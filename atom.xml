<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Minhal&#39;s Blog</title>
  
  <subtitle>不驰于空想，不骛于虚声</subtitle>
  <link href="https://blog.minhal.me/atom.xml" rel="self"/>
  
  <link href="https://blog.minhal.me/"/>
  <updated>2023-03-18T11:59:17.573Z</updated>
  <id>https://blog.minhal.me/</id>
  
  <author>
    <name>Minhal</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A starter V8 challenge</title>
    <link href="https://blog.minhal.me/2022/03/18/da6b5479a2f6/"/>
    <id>https://blog.minhal.me/2022/03/18/da6b5479a2f6/</id>
    <published>2022-03-18T00:01:00.000Z</published>
    <updated>2023-03-18T11:59:17.573Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="664f358aaf9f63d93b11522716cba63b02d1a0118b8d5fd67af26761c4785104">ef5e8fb986790557a3ee9d908711c6b9212ceb583306d56671a9d18f27f76223a1bc74c9e321e92c6302b630e4e601f3c3eefb7c441e71be7f63739f4e2e10fd7306fe87ccfcb4ba54bc207bb98fc751c621213fe00ec0c7ada5f2a49db26ae1ceeb4b4f7d393c159b510b214891affa40b43fde6f7615e9a2da906665e132fba60b0c97b43a2131c27e22f084b63a07aad65a7146bf1eb25764383e529b157656c65b4bb0385e41f0c1f4948267d94e88d87a8893b10271a8b0352a14dcb8a9cbd77f5087582e038dd44612f1954d72542b83018238dafc81fb48919e5d60fe3e5d2933a429f905bc8d0f125d1378ff44d6a00e3a3cec09e5b790f69c0c48de42bac5195193853887ff1f77b2e883d22fc5aa1df7aa63bac7f5714c512efbb612d343b206fb976e89bc679b40f72fd5e7d33fc20abba23c050819072e5b935ec3094b61b7f0fc1c2a9404274ce41c2a2fa29c1041f19b950c348389c121600e3a57f8a0319194832aecb2d7a9f545d57f07bf6b4891275cc2d03a68e3bfa06aab744c458630c6b506b41a2cdf3081c80a8ed4fe60dc9aae70ff0acc6bd0440d88820a54c656271de658d0f1424f929cb6c5cb8d51bc30388b84d38cb8320ea331c49c16938dd8b10f1941c797078299131bdf0e53ecc6897812937ba7f3d3cfdb74a68eb0fd6e630f1ee8b06790be6cc83f5872fd24a57cb7805bff5b455f403a335af709b0a0b1456f7b20633302d711922cfd8b839865cd584d4ed6a699a9690a2a2ee99c90d5593ce13c7c1d788d361c59cdcb9f4bc5554c0904f36013d330b77a705c44423b3f328da6cf46e2e05813ae8c6692c716eafbdb35337b17cd75fb71a08c9653ce452944f856c9e66daefa89d2d327f07ee58e5a49e3a2d04db622f16db98f21c6e0a03e9ea253ec239ee5b281ef4d188681a7e609cb04820038258633fbdb6797f8f8cd8e28447e54356404d0b08539d3ac550783cd43755f1e62cae9af25d5616acc83857c60137ad6c35629cc9b2824f79be4e14d2635351fdb699c79f414f17a4e85d925d0c041d87d85be0bb1894c4aed9277f720ac866a71ec39cdb6fca167dbfd87f103d9d66b1fe6ab3bc3e202737b144e8dc8fb841d3d2db0c210fc8fca7a5eea4af868e80199cd7c42eb81a99663137448278c1537798e938d483aa64be098cc49c37375a5d66833292913df0d7a34666b841faa6e5250e8cd2b50c0e73529a499d1c73fd6395675f625ef10c296c90b9ea024933f9ff95e7f31a233996b539d01857db375a09d69b9fbc8fb75f8fe8677a7238d6339ec42f9a133c26e575fbc0b2d1ce83765168a804aa0c29b4ccd35c79dd8104d569a6eaca01a5ebc821d5305026e19208076efcb550fd00785771136672fdfe503478ef351a11917f844c9e0fa0db8ae446a510d788341895cbc99f59a14008a9cfe52fd4e3e2ce5f291c6880e9909e9f3180da2ef0cd72e899ae824bdb1a100f379a66710ce9900d7afaff0fb7c843f8793331fb6901d1f1a46c0eeee114bce83980f048beb01a30a414687573b11cecc47a84b0028d60f5439531d5a0ee8e32f2a8edd56e873e66dac7cf05f32ad843056ae6a27e0d5a03927d81fbc43ea6ed3c8e4f797099baf5c35cc81795434ca65e7d2d84234368f78c03c6b981a29edbc6c8dd9ab4fbece0eea89570e2cb2259bbb59384e8b00300079cc9a374017d46e257203933db031550611b1f57a0ad1b8c7cd7eaa15377f4d8f7270797eb4144a9a8842bcca84e0fc3a2f5e58016a377ceb6afe5d8f1a10c265a78aa1a80a9e28349aa5cc1a8fb470020ffb9c8621495306327f0280136416a5cdf8ab637595df3a7880753598c10d6d4a04f560501cccd924e0af0b2e9018694f6da54fa47ac74a89065f0b79ee2d7cb78ce3fe32cc3b5b275cda427a3c6fe35604eb0c074d7a9094fdc26ea58b59d0ddbe2cb23287f83bd1d4cf838dfa6d2fd392c2877074a0094ed00e976aad52ef6148ad078278a0808298af9260cd4344b1a173ba3d92c89f5cd02083d8b6d69c8b956719f082bd0915774d1ffe819cf85e2103d6feb9e69cefa1183bf01beda34867bc344d7e1091087baf93a5afa949cd81cf2e7f72254bd9f788a9ea34065cdb6b22b2d169c9f2182471652500c133141e3c10e16658cba8056a7df276dc1bd7267aa2183e50cef8c6ed0ffc3e0e82db0a9795a1fa79da96a39c762ccc7eb34007ac41c10c803468604ba91f0dfcbee177f595b40a9faebee883ca8edd226b71156cbf79bc556438ea79f0c5d4832b69fe748506772808d32a080c3deaa91f1e5310acf376cd0ff8c7a7ed3efcd0643eeec188f90c9d4b6645feea94843da471e2ec01387f5bdebb1a1b5c04823f4d324a04daad2452270cee966db6f9c6fe8b1ff51fa7f8ec6852e0573ba64b83175c7803c169f880cec2d5af5abdeddc4a81bde85bd8769d8a770228d7330821716849f508ed26d7aecc303da1ffe3ce353755903dcadaaa525f819307cf605dc4cf38350e58e98520933adab0bb5d2f4c0edaa89eb8a6e228b214f8338de24c6703e672ca5d816f50fe27343d4cc135dce276e588124b11d914222de53fc48edc6b8690000206c83e5c061f965d292440c40faa5af04870876e7594dcc220fb5e66285eeaf4bf47ee99ef43cdcc7066b4baae14302923daabb1ab5f1e4f818dc1c0f11456d7309f527f2638770368012c4513cfec5fd3a4df14ff6bba3b61210871a5a008191c4a32aca9c6a4bad3482b9e136d619570e559604d725dc42402521f78ce7989320d46ea3ca6c0e63f8f85174a71674dcd7979409439d4b00dff1076adf7023222e88037975d74a45f3432b45cb5e8e2b424f4c5ec85f39fb482d32137e969c414126c2dc5310fcad131dfa9c86b5a03a07372cdc968481d5dbdd281d21de11adfa28864a4b0686a873f379055ae5ebf25c75a8fdf605ab64f3ce546c61fc56dc4eec2152942b789c8051e3ed61c1f4013b0e1cc4d402432119dd82074b46de49979908f11d399b9cd5eef7d9df16477f9946505ab6eea94d4031731719a861f97877e616474fe2d14b091b12db7929357e4e99cdc86efb3350e565d2049f111208ee32acd720d3b3adbd26e7ee5be8db4702efbf919d1e81c2d1957ad2a47c569ba6d929fc107167cdf5a64c29ffdb3e88130cf8e5971086bf08316d0242817c15d3f68ca0aad0cace84e2dcd653986cee1eaab7e1a2ba53c7e3ecc039229be840ec11386d2e4b13dcc494410e44101623123fc9f11d64147111a13aa9de9bee264edd07f033d7368bc838372e820ed546e162e8dcafd83e08384acd163c5b720cbcb0ca3dc2cb5be7c3b4fd27f01069fe5cf19e57e1d12fe62049891e9d2f4a687bef7847765af5fc62e5c8a4e5ebf0881bee80bb1e677c12191df8e0809da44b816e528b103c29d8b947004f055e5aa96884dc3817a41fdb4909b26287f36ece53037926abe38cb689222541be82f70236e35c727d34610901db0bbaed657d50584b9478f7703c6f192a144591e52cc7bdb3f4101b577def77572b542ede1c1a8db810651e33572bce19e0dcde211fc9696af6b3e9662bf84a2dadb6a47255d41aefd21e68287932c8a44718eaa526b8ec59ab58a18f9027c8b729f33dbdf8e45932209e4e662867b155cddb56a3f21b479700df9243104f45483fa5e2440a9680007f62ac362119ecab6539f06bb7e602bb1f843c54cd5790cbc92b609170882bf0641b2b2d8ba360d3263afb09fce4b3bd625d1cfa4e6387ef957b2ab6b0e986c341fdea4ce52bd33d694db4c0545d4243d0a27b7a989c4e581ead51fe8e18547308f2cf13d584aed99c13ef087442ea864c304c2ad06be2c27db48f02cd80c398e8efdea5d3d3302cada00d77892262a084f23fef8eabf188277bd92b32506dea4b33103acee6106a88382a0870ae9bd646d1726a43be29a3603da90c51a912b62096c64c2c2c884c36f6a5399ec18015030dd4b9f4c42a9d1608ac767e6a03c47a58cdd94238c0759e18819a16d5f320439af90c17ae0c663bd832e9cd6026a094efa63a0e743161b7fe02bd856bbb7efde9a5d05c283e958690db577c8e181c52b2affb7be9a11c866e1ed85b1e3808074f6c1c52fbe02de76546aff2da5d16a765165a5c473bde6812c8da4d4beab1a9f8d1c8a0d34a2f05a9c3776610f6af43b788e3bfdc06732f31f4dc9b9a73b0d4f9650847852491807067f5ff5d0d6cd87e0fa187cc5fb535b82106827a9e0a42231db05f7b763460b6f70d121cf8cbd49090c53b6d7c027b9c58e27666121d51076cf7fb4e61f83cee486d136cfd12cb95ab737516c8d444a5699a29b8648300d637121ef790c3006c6bdd7ec19f1d4b0d39b1a70a922bb61917f2d87e2de042a71da127f60deeec27ba2a9cd1d97c09392413665f1eb0158a48512f6a0e4997adfdbe111e4c47ad2f52668adb681f774e6fc222ef51fd2c4da5dd885bb6de9f5f0fc649893e4bfe539701440d59f4f168a4cbd7cd7c9a5e218d1bfae0ce0f849324506b25e50e173ab340da83db29723701508366d2533a815337fbdaef936a805491a2b632c0bb6972b6d9c3beb07d4733fe92df684b0ad14ffde5d764a5e474fff2c4f2294528fa1b4ce708c2dc67e5985baeeb28483e652d6ced0384aaa52caee6b9d3c3a761d5a2889a1d3a485301554381b96bfe5e0e72dcefd256b139df60c7fec9e77819646c5921b3ec1bbc2503e6ff5c16884b7292f34a57301d37bcda14715e474bd5f86d0ba062d77f53a141150f92e3f2f8d964cd5378797002f48020e7c93b49c1c5fcaed43d1e6c184b9c9d49ad817508e47322f7042d7c5cb9d74828bf05d97216f55b4d467c4460e96d8aee9a814f86dc42b75ee483b7c3ff31384833699726392afa101569cbb0422d9b9d81a88d5ce55819d3db4cf87bdc7953b30c8a37fbe4b9af400140a96ccf9439d38a12317296da32a08149539e3bf9994364c4de165dc6d61e2e00a68ffd53455f18fbc201dddc02e9e178cfa83bad12d593824535f01e1775a3521702c7e558abc4be82d197865a6fdeb76c0ab42186d7532d465af69416731d6b9237e60747cc9c1e92e7516d5ee22b3ef5896d852d29a971dc1e16567db9602d55826dc6c6b062b437da030ed9104f65e3ffbb8f1fbc023ea5f185f81cadc6912c8e4c6d73e5928533d68cc5a1a1c027a5923d0eb08d740314dd6dc55f5fa2edfc0e1d11d6d741192acf121a06d2c6fcd8a11c4c92f55d5fe7bafdafbc9f5a20a98048820c255ac823c1b5d06ae0089c6a25f461d4708fe31c5778fc33a4e75330fbb0554949fc28d5bb88067697e65ea7db9389e56debfc5f4c67677121ce2a6ad9e3535d42dceb444d3a91ebe450a9a9dd60add31e4ee7556b2bbdbbd4c889c260da4b412d5d88f6c87b54843c02fb1dd19b67949b3990ba599c0f8625bcde0d3bfdf52a46e6d7e0bdf3d8d9ee8fc79f3cc958cc59c1d9eab30ce7c7c769183fd3955f47721d3e4ef81dfc3d82248f23ff95ce8486c7e8ea261f897e5017a8e55295f2f9cbeb4189d4d7ae07c72b7fa62db15d94961605359be637c3caccd03dcaf3c0d4848d39516894430cb429727e30e5a1571ced95950c9c2d047fa238b5b54c97e582dee65e0b1828f04d51681249820eab67f9b090e9b961380e48530225d9ea5ac4b2932619711f3ca2831e2095cf4f2c35aa6493a8ffbb462eca32dd7a14ab2a4729609a1ae65d48b84835ccccbf5fa8b977e0cc2b6be26b28891789a00a21b462412a6b92343a86ae611f67e3d16470b37254bbedb8e0d39439661390658ffed4330d543dcacd2b5f540e370ab6efed5a27909d48f2a92bf37a10d21a258e0801ead46070e96c7af744b98937693ed66cdada187f37a4f76e14008d4477ac05419c0c9c34b8ee9ed8ab5001fa79b618e65d5309b6e4487c3139c48400524ca633d57b607a53cde9c086cb6d4bd52214b72ee33166bcd84d93e25133db446e279a47d1b34fbb568a0ef400ce607b03fcc440782692f5fb0390d6caea5d232c20d8248e0c5a80e5155cad7fae45af1c4052ef6fae5795ba5b44b6aaa34d4174871cb14bb1b5ca2bece87642158583c450d5abbf37c90da620ec21728d6cc8aaf2556488e5d994c1c817ea249bd9425f8e16bcc0a170c988b7ac278237e6f2c231eb08e1e9a1996d7059409830bab665edecf3d5bd0cb5bec42ca77b10d5e5f0511f98ced19fadf86e2a5638b6af08b9100d2f6921556a55ca1ccc4051230cfcc1ae94bc7571b8565db5ebca77b398135641baa598eb12f795e1fef12dab2c9483c2e9a3b18a816e23c628e6d59ed6a352f8487eff4e467f6b103c0dafbfe244b156bfcd512106e444766ca02512ac8666ab971b4f052f0d81b342089cf16ff25cd5920cadaae0172c07c1a71b4575d6de3585450197dd18f3d7535821b73cbc5889f185794dc8564f4c9ef9830cf77ae88cf211dfdc77f22cc2e3885c103a6cad50904910946513f7126bf1ed7769d4279cd23ae32e14c28a1ea0fce4e1d14e9aa74aabab59e34d0a40b110092ea0c8206eab2b9d85525567eb3300a3514f6d2adfb0e6cad341fbb5404ba7589224e750b401b4caa6ded987d4b40c5509aa0af0241a3053099befa5666400f00fee9212ce44792170d9563f5fe2a53215bfaa410af5cbcd3230a9badbf497dea0ffd7dca1f9fc270cb297f3de0c4b6bf5a35f46b99b9c4bd9e36c87ea24bcc9e0e7e48a83d2c5f9600578532f1ebc4a5797d57c487b50a2381bb4978eb3921f2e002eab67af87247a774a7478c6e42bc954358d10088157f3c4abaa69403c849b940cf07b050cf0310e5f5555c835ddb0df611b1fcc9565f2940a2e88a21410c468e23a74a1d2357de4ef264b3d36350739ff6b2404c282d45934774b0c8500b7167e252373c1290c6423b49cd48c36bf9e14f41b085f093fc52ffa1cace353577b9d57b41efc5f46dd31b38243ded4dedbf715d44510131868d45e098b6ecb52dd77dee99446d2725f3cf69f1eddb285c1531894f3116fda1d7203b000ca2d09d6fb38d750d0a0e5111287875c3d51eb5e2200b21110e001c09595ee6ef66a8c50516aed346994268efd10c5fdcfdc08a6b08c1257366f5ed024df44c6c7c9683dcc536e5f9431874284c3581df1270aa93eaf07032f5f5693fabd79d26ea5e4a8df554bc6f567b2833b77769be6d881da0d365eab2143f8a8da526bd28398c9b4c4e4b61204c148ff87d174b866d7487eeba1350898d6070b682a00783ee584516292958be55541d9030501d94a176997a83c7953553968ab4245c8b0d094c868efd60793a530a41b6b473bddd077da890eb090e59f97f38dc957379400dd8a8e48754f7ff0a93c431f440619c6b66b23215287431338fd1267aa62058df8471f99992af2647ef6be54748ede75a6e4ff17f553eaeefea091894949440923995a545fdd7c923557aafb732b4a98cb29e4e6c27443173965eb3cd9496531cab4119f98b3a0e572ab00496f837636b2f9f00279d5abba74cfd949714b7b7d1336808b7c4f16c8f317efcb9b8bb291fa92c812558716e3f2b6c390cf15e622cf0eff8adcb413d2747e32450f14c1155957a0787c0aabb66a61068ba97f74196f09c203f76fbfc2dd5f5548cd256e0b67b0d02654d9885911065dfe0ff0d6c77a10bb367486176350a70c90dffcfb83d5d9e826fa4540e128f3e2f3392ed8cf9d3647306107e3d24a8e416a1b060cc21288533ef252a32fed4404e8872bf8809185a8646fef5ac728f4ae919244a943ddc03dc0f61f4bef4e56fa755bf58b22ed0328307c006778ef0e704e374984967149581bbdc649c90b6f634784a694cae48c2d4f14f91d67ca80ec75063ab6c3db61ddf030cc8ed5f10ebb4fb891a66abd3d1ba2f7fe7eace6d7f3fbf0fc7dac77f2167e8d36c60a14b47078ab666178ad090b969fc0ba6563a769390a22632ed10ee2dc22c1cc3380488995f8687c14da7754e5dc0b5d6c43785964fc7b344738b05550c97731b616fe4b826ec0d2e846d1359643634e22ec2cd9c0aec18b14f8e3ef7a09d9c8bd02c7829a94feb69107e01d98bc31483da7dd8ba95e476d00f2f3bfbc31980fe8c8e9c98768bf8771baad0abe4042c183e71c214792aab1f9b4dd5b62735d613dc26a4cf0b895c2eb11e59d8ac875533346ac88fb808311b655c6c3a57f232e7ed138f92cbfd23403c050925c411bb5d06de86e1becd16d4c79da54b241455138e9441bd52d0c1a8a1f7f908ca4f5808b73611224a29a9eac0e875b6ad1a932384c67f2a294095b9a481e1c137d1a35c5ef2f50b2e8e12f439395e2ba68f8b3cc30a858212c3460a923ffdcc01edcbf50486cf7b0ea741ff8d0bf91bf0c5130f55c722d1aa500022ea74b6daf39c21b172eb319166b709048d9ce399f9b164efadfad0cfecc6dfd33a4599d5486cffff7f0989642dfaa9cff493f0bee938c50c7d85d3c7d755cefb520ed103fd7b91f18765d471a29c1c7fc7ff6ec6f3f86608901d8bad03a2a2588f678f533a4a3924d961b2d77d2e6fa8780ac6a216fbc24c75e2a03275d40a5b5a52153f6c767f3eb235399935849b39d93a1d3cada29d3dc4c186d244ea5fd7b29157d3092c2a32d22bb6b3e4c1fd5efac3a2f2e130217e865889d00c5aa23392695356fb975516a9a928d1efaf5cd91838745c6b64f9efd6176c9b00cb8cae3baa37f4abca49abe80066aa639ab7982dd53c73fdaee6445ee588caf90e90c7bc7363e32f427f0e9ee4743c83385398fac05ee96ac6888f7278dbcc079b090ffc02c11177435f0942e4908a765334ae6cfd8768be272c5e336f5c092ffac66a587722b56f150c3e609ef09a72085fba4350f223b870002d07f9213fb0dc7d5f8ac06019cf98b9af42d15aaa7ab8a212b1ed679059103c6b635de76921a79b118c33152cd9693328aedcc2eccebc67e5c21d66e0880f2457c3c247378cb48ca85d67bb9e94c1a9a4268d83d1c95d542dd441ebc9a31d88239b93f28f7583008fcef148c943d1998358e943bf4871c1d02a9a751eef4c2f1a1ad5bd1941567a8f6ad64bab7af36872962b280c6787987e5d5aa9b00e74c1bd63b8ce800db5c0ced8f28763220cb210b66d93f0aa84a3448fd4a03685e4b1761571ce070ed6ab93e649284ff3696f327d422054670fc43eeb720fd4c0f1f302b1995b057ee2a6961c4d7324923fa68bd32d1a6dc00204c591f3737477a3301abc2b150b65ee6fbaa50117774f8231161bb75b776e519a0b59c518a610ee6777f1956c009e7739d9b52e7ec744f498d8e467a1e69c66a464892e81009072130b83302b8e499d88ac9529a4ec3153394150c7fb875d1940a96e72bc23df78a6721845d8e03851db9d161a127d45da090846b913e8ae433f1a4b2686f2b9e91a423ebd3d3dd79e8ea1a84903d53821a71b5d004f37a51f9f9e3583ecca85db79c129b658bdffbfc680a532617853fb455bf514ccb9a1e79090c46dad50aeb9fd1ae3f405d9cd46b232d12e3e1facedaa2721b6d19601837efe529110150fdfc735dc8022633df3a4a754448ad8b8878cbbe9d49220b2ff74222788f0cd2c32298fa7962606f6a3bd8e80148918791ffcdc3c7564db5d2fa7dea71eb60a94c3d264147b0fae6c4447c87e825a6dc0fc6e4f35082a97b72623d16c21ab86da28670edf6635b2faf3c88015fc33cdfc038de4c21466e1d9acd3315d5d7e75474651b53d548b0ffcf8b5a2d338212698b2114575cc7677364bb29f1cb66b77ebc8ec1145b0924349337de321c27a4ce2553daec6c2e2f5150fd3b85781a06118b4cb8ad054f500d83f085ff032b82fa6e98a4d3a084e4700796b4f9e0c0b89b921c1b92aeab381f8a5cc48444edc495517220e9e05e9e954a0c2ddc2d9bc76f8a575189331c41754935cfb1ea7c4e94843388c3c72580a69b7f31b5ef86dd6a40da92d413efc59a8e8fb79008796a549c8d51e48b663677d05c6a0b1eabab058cc818deba524e1507095bb42eab88b278083758714cb7c58b8bf8f8a36b18ed661b990ff804be2a4d9516cbf55a7f52b54da6c563518e0dab8b912a164ab6d8e170bfd48d27abf299febd22155c2f2df5a993325f0917c98e6e184d161681789ddcf5129aeb1b1a539c92157d26752b3e330d58d19167f4d0ef79124d6aaad3198cf0a821ac5751a78c4ba49631abf63588286ed520940327c60a30187dddbff0b519b8de159d1fe164d72f7176d8cbc1f5dd73b725f83f7b5fc1125fc1ea0eb16e175968170a4f9ec32d4345304894852fb24d7f6f4daef98360b8ccc9b2f4254ee9e4d862ada3bb11e49558a495064a20a694deaffee99394ca08acce5c4038ba0686e854b199c6840af851d9971d183945d50596e2422d3373ed0fc5b61db30df2c07dc8ddcfb1d2ad5c07ba041ffbac3de7e32064323f82e15828430aaf2e87f46c8e5a211fe13b05dbe01ee51f66d40b62700c18e32410d6ab06031faf5825ddd56955be8418973b86b79aa4629637950e6156932a135bb8fab74b5d598c604fb2492d1b079eb005f0095de6a6f846c551d99fa767b28a0c45f44cb2cdbeb4ec08fc2586ff90cb7e82d3a17b1d6fe33b1d1915c5b75844cfefefcb677f59a47cdb0d84fe7248ffa1b89a40a00f2da741ea45205aff626988b4e4f0d26bf0706ab1c4c8e53cc2dbf4c253b7505cdb0f78c560d4466d45955eba39260d52a42a210048d2351734e646778ba7ef94ed7a06e31dd5f0c1261dca894a5bdcf36c22f36c4af74f911e23635cf998cfaeae7f6a29e2e4b63848e8820c4388a2c71240960b544ba601a039baa2f9fb7f2ef0bb0737eec7c7e024fd62981b903bc99d86999203d3e95a86759d09b33188c153edac44ca06587fed0438ab274c97c091017438744635e622b9230915dcc7fb15a5dfb73b711414eb5aa7d8c98f809b2be8df0b13399818dd2976317d462104c7a895daf7e9e94eca7b3b413d08c2305f98f94e77e560bbc20ae484facf1d2882faa99123412a5132d2f43a815e04dfc4adc1c4e75ae11ac5905be0c7bcab185dae4ea1fc4f0826de612bc1a59cf687882f7de6ec22854e802cb898b418a38201cf4c8f26bb32b79f23b8dc6a9984585da7b0bd60128d85346d9eb57206c6890af75fb9d0af72410be1cabc3cc3ff8dfc70c44171b6143cfe6edbf60fb130979166b4044fb28b21a239f3cb7fb551a137eb03d77df08eb2f305eaca2e136bb26f031ca862da7be0bb70d066339ffe9e246c4736571d885157955abc94716381394420d1c4270610a7cd0e5e8d68f286ee8ff4fec65e25b703678eb942730a6017d8019c5337a2b41227b8b6d4d5840cb203340162ffa6dce6dfbb7ee571707736e6c7c53a3e5806b0b6e2d2156a31ae5881bf21fdd72ee742e841613f352f5ee5f6b63e6b0d61b1f6100a1c8de04c43dff1f1fc8d8074dfb61608a42ab9642c818efe022a7589b1eaab0e572cb229b7ae92ce9796ca7190af24dd403c735ae37e378538601ec63fea35a26dca0b47531921ae3f1667d575227b385d214a5090d26f04cf6413fbe4919ff6064b01dfef611316c13c5f23f0c89060eafd6e2a896d40eeed3a8b76c8fd1eaee62f52e3e77603e8b2e32ee5a2087ad0c2f5f226d4decf808ad57306b0fda6ebbb3b98d3da4b036dcf25ea7ddddb8a8528a3f7765ebda4b75ac6ab77d0a349704d375d827e2cc8b9dc22e8838601fe7e1499daa5349495c383bd139fe9dfe11dab3f9fee371930737f5ede1c0a2d907850bda2cccd00b0f70ca42bc6d69c271f93c0b396ad98dfcc6af60f18143ac3558985ac96d74875e3530edca514588ffdd4898a6faf58f55f7c879ea8d07d40c9ff914c416a47c52015d00983b2200c91a1b2fc98013787ac4edce646e0cf3afb44f35aa8a82bc59e5ac5e7ec1f81a9ac2ccfd39aabfad9666c7b822d3e8dbd432871d7ae24012729e3cd7c0a271be892ffe85999702f73c87c5c4b14ff7ad46b7161074f4d97989a8cb518ed98a10228634fe4bae5786430e5d5fdc292389efcd6debbf07602c573f23d9321b1b65335b675e077cb8c7672ec98dcff1b8d7c2429c4e61baa564a483e2c6e22fc2fa1a764d86865594b31328ca20d4086a40f632db1766f06fbc67b2356c43d0cf838ad033db8b5783f13c2b83ca3a3de968fc5d3b46e81292c4a598bb8d8631ef490b8007cbedf790538604c801e4df782220010f47f34890001c89f3319da1ec9aabf35808270d196910180b202532205f95e6643e03567979e9d5487a9436a3c98d94c63d9bcdb186c3d06b9685cc71725f60176fffc34757ff376748a9d28a98e00bc187d344d782ae2ea14d26f04c05eadfecc51d8c2525be00e418484ff6488585981dcacb48628e24c5b00f29183a1f997e94169e7103c49c912e52cbe29c1dca060c58cf10705c6e4d6a4bfaf0cc3cd39ead8d3f2b97c1b1b32d65ac6c7c2b912a233905105d2c9b86a09cdf1b8382b35e3eb8b23bc1d66b37ef066f93a428c4cc57b2134f6c15ae41f85344733a8701256ee3303a68d36442fedcf2f62cf6d960ab07e7c9734a8c19ade664ac4dac9fb4656c2dc38cf00517fa50ea7b0058ea3ba3ee1fe550938721919238908cae1ac7c3f8dc4a492fdb1b03da09bd53d69a26de5bcf0ad8e2a62a9449dcbb46b1e603596e3bf7dc8417578b865890b3832cb2f0fade9e92bb7714d04ae71899028e0bce342ee8c16a0d46adbb915aba250920da31c349aa68e396ad7b8d58afce3989c7abb01b2351fcce8911d41dac3b9ea8ef624fb74335c6133e2c6d4cde91d0cff6087f71d54659cd7b65c4b45b5bdf3419f80036c7506e6f6e9b924f3afd43851aeb78e9a5f4c505cde11e14e54454a44153227e3d5ae2d7ce792d68eeb326faf632e588630ca293d73885e17bd1badf94a1b2aee63500fcabd1c4d7eedb7792a9a76e84c88ba0042694039bd210c93905c39b574cd3df8fbf35981896bcd7626dfa4399ad0b5ccb7e587951a7f35f45812f037f5e90e0fdf804cc36973cfe3a1eb109387ee0516be45f17a0ba1bb058d0ca8b96d8ab9e7850f26437c14772184373c78a37e05038998a944e57723354ca3c1ffed8b371ff0e323b1a7e4e80c8e8023aba50f68d1c00c1e30f9cd8d340608bb93991ee6f533f817b3ae81d9d5d2e3c755e81c095eaf25c9d35a74258fb93cc18cdca04f674973d96144c323d2066cbac2ac99f5233c79f52c376eef1b6cb9d3e6bcd19da4b835c14028ab4ab021238ada4c82df816f21bad6ed80ffeba9cb5bf6f86373fea21bec7f0d68e185ddf9cfd12f178d029fc02a58648b650cc2df96b65e559a1bc2aa0ef839d161541ef62962c6573c82963711760808afb9eb8c558e8ce6585c4012b143e50445f431ca744e406fe31aedeadcdb39cd91bf06835bbdbb97179a2e5cd1dd96d71708f46a7af263fd00b6d08d3ca5f16bc3114250c9e540ec0b881175d56f20f2d0ec8fd7f484cd642b4d618e46df65aba7de70ac08eaeaeb8f882fcbcdc6d5c220863082da4115218a818816c1bd63f7f978d7faa4d91d573937ed10c0e151194bfa916bcc9c5d9e4341b56350303c94ee4a8ca4e68fefdb4295fd144244a018e57825c9f6397db39167c0ea6991f95e6ccdc81b892bb7df9f10702b979428ae0745029a500c7d5895bbfe5d0d62fc2c7592581373b3b2c3f7760c40a3cc048b0d494e7e55b52f6b152940ebb07e880e61355cb604005486724541b89ab7a3dab05bdef995b91a097b7a053f9c6bdbf2ba14ce1e27157bcf46f002eb777cabfe4b1d1f676f1391fbfc3727ac174110359c41af02f2d5c72f7f94f45d4840d38539068e9103a8eed896be03bdf74d899bf1de2602ecb986399b6416ca78fd5980ff56060d69422efa4a343364b8a0838b89b06bfa45dc2357278ca3142cb74176a7458b75d3ea6943676c9cec7bef63fa3a6a57babddd664d9bed248a9c4c622bae37aa14d5f736f48db351cbb8e4134fe122c38cb88e5106a8fefe8a61d5513bb338fade2c0ec19db6ebf72c76c27f0ab3bf9acd735f73ad858e30df26bafe08aaa3255259d8705aaa736b8040f8432eb6ea17a0814a3c71d2e5766fe8cd35aec0839b1c14dbea0ed52b56348786ccc26492012f487d4a45a265757a7455aee602495ca31e741078168f2c18d965f85d87b661bca98010304e184676149fcdfd01da950bfe3540aada999625942ba0369d48ac43056b210dfb7485b876bfbd988848fb583c4c09804c8a9d2e282617699ce12b111296493e7a23a80c9806d33b13ad4c331e1c73185f917af3dd912334ec39fddaae67ce9751397634191146fb59b6b4945bc5386d1d4d503bdd206f0b2a4462879123455d0c14661d4ebb760938030cc6d207ef32cdcfd1e869664e363732be16c4b79d405538ed2d5c34d5adad4666f455e55517e5a128c4ce087550c200a8ae46f1edbb4bee8fd021c86b7cdefe1870331ea1fd706040db934fb2314625a6947069bffd4fbe7daa14513b00fd3c29d451462d487444dced8b8e25f36f56aa37ff335a70e06b9a437e64612eaf8ba7b84055f007194a29480723f6125415143fdffed608a96192f5068acd9ed8c21f3f89861f62734d157288ddaaa7caf418fce87a1536211522284520e5f0d7563f91ff7c1dd8c6980940bd17a09dce7933937560862415ef0e8049ffaae1abe991c22b3bb40479b0d5ba92ed88f8530d668cce1e35704448746f6a9c90b68fd8dced86c31097b21d22d61e7a85fcdfb9914cddc61d87028443b322c4a4b690da1ec261ffa1e69f7152060e3c535ac5264ba8cc6e6a871cd35344fb9c748d9cbe31b05e445bed1330c1c167747665619f0aab0e4c10777b28ca729a599e2c5093a05e734b8a12bc2106de7c324cec3f63f390488601cb3c248c2dc3bec4a28a45a18f361829082f73eef8437621d331b8be6c5cc206d2d7af4089d9c57a03e421d11eb56bb2f72779e0f4f4121ec3c35a8b3133b117aa9e49630ffa3804446d74dc8336ca2cd8d08af77d3b43c4359c32f9e8219d8a3611a9b748fde5fadd4f1eda15763e703b5776ae022c2e80c7a6d2d5f7f17bcf57c6df4432eff882b459fa202cdc5fe688f72e9ba73dba0b24ea6d3d4d376b26919e17576efbe6554f5de80c4380f819fce70ed372f22087b3fa092bfcd12ebd87bbe48dec50ec66ecdd3bf5d12b57bb086cd1527f7d55fa4d061d427dcf753010f0b83686de9c34f96dcbca8638e43976cade93dd9d81ffb3559fe43a11223fca9e204fe83b7dc8f36b70c761b44a8876f448cedf9dd3f8dfc5bf757c099e1370c4a5c3966f5a81f4d5657cbee442aef50a821833929ef8e5f46f34cc5ef8a8c761af8a10ef6fdeda82d69a5fd4372d1343f55b5d1b09a795d33c34c1a677dc52c9c760e077b306fda866c581e4947f8b0a7292db692eaba556ddb693f95ace2a49f71eac6695bce5890f64e318de905e61f448c390e59cc77c6873e0f81988b3da1a828df7785826744dcfa38f43967a3791d5c423be281cf3dd940dc31f47f036d478cba80325bb4d297870587cdd15b076108e8fdf10dd02aa8f67fc25fa5543dcc806148f93369b73893b943822421c1b8da691160d0a67616b5b540738d4cd195d8807258c17e0250508f20a66deea7478b0da8a2ccd838a3e09d203411bcf16df8c5eba935effdaf2b44c6ffe8cc3374e6f8ae6c6e8023bd7b068648f635ade583b65e356f44feb2b383b375fa9d634cb0ce0760c35269b823da973a622ac4cfe45e38c30e846e649f3defe925d5a50c880b7aaf35d8fa8e97cb4611398a45db77ff7bdab4d6743436e68aad93b4ac0ad6d126a627f2da24ed40c407989686c16c7da69896c914b8146633ae9e8157f9d3bd8c773b9b369835407fdfd59447e39be526d150175fbaba1adbcac2556bf6a91d1ecaa12347828bdab7a934240a05be5565eb1860bb3bf887e3a6b803a8c2e06c1e22afc7fd6813f867dd076abe179b961587402f89f6f5ea66fa6dea69f1402b17ca6219c6b901e6c3db5b6e8ae22ce5e8a711d7d317cb644699ed674021eda725cb58a2d560c7ee6e5a29285303e0d596f6a5d1900f4f4280cfb3e95200e60150221f9175a35a3167598b566136f8ee54acfaa12f178d8b67f93eabdd69f7a614aecfdeb1255754278f138674292004f65d0f579da313ee765a03327b3a216e1c139fdc79acd1d94f93b59f503cb26a7601f4c2f21619e7217ffd4497ca3a56b6317bc17b96eff6a52cddac9e5845bb97ec4fc1e29fba77028e861c442c1f0f4ce12e3b4e490423244ec10abfde5948c4da6f5e9d3fc396c3067dbdec117cc83074dd7fa9ae8a189c5e4bf55c3cbcee91862c401601fafebc283200fbe35910d94ffaefc5cb8da0a8af2bd043769dd942f0084b1dd8671b0ad6e8198d6b05ff6443aa43c512a293e6bdf1dfed1f19406355ee7c5f8836d6a45e4a270bf010daa3511b44c693749f83964242c186044c61ae6bf54eda7798f2fb60c219782d2fd9a4d5ee7fe0b931fbd508a85f4e6f6c737afd9f392d8eb2f48a24bc05e0697a27e81cdb30e593f4421dbddc911ff35103937ef574c2948197b0059538b80d1b6373b0b238a5cfeefb580a3daf3230023e9ec5093d06653c6d635fdb16525daafe1a1781f3647c4d7f7886abe859052d53aafe4a897f22d8d43cc82ab8a9cd0416a061aa28d397b65ef4c015932fad0a80cef2bc26416fe52940f8ea5ab3724eb582332311bc58b41ba7dbe3bdc7717ca8fda6a42b55214d1fc87c01728b82ee83030581e7e26519ee7001d93c5c063cc0d03d5372452c174abb057215a34df406f6ffd65a4e77f4cac2227e72e31bbbd3fa1bfbf21a4fc888b006fe126228bfb8a44504ae2cf9aa5087133b2b5418dac1962fe94049bb01b554af3d45cf19d9ff298a69516beeecb5b01546802f928894bdeb3936216c7355990d7acd33067476cdc345822422a0182678d5199115cde5c31c354c72769d8e6f00e1a17cc34997be6bededc8bf0566b3b90f80223c934fbae60f61f31d2d5bfd9ffc7152bb8efe00dcc09c08aba359b455c6edd41d7b17a6ff635b6299e6e45c8d1f4cc5f868a806174b00505ce86b6ce01eef80eb033067dc45c2d9b0f71840109e09d2c360add148e4500f49a8bc79e8772502214e4b58614133b300519b1db9bfd546e8ce0841bce0248f02cd3d682a8753ecf1d59a7a4c992e147f53b6e48f9b79714b3a4615227458c935871a01885dec07029ca9c1495b094d083c0075b346e39229c9fe8f04a589ec35855045d270efa23d395903a6c9880fc47e7c86709c6b682dc7d871fddde85cdeae74f9250d1cf3ab418d5e47170849fc9810a6de7eefc70fa9a7c24474711912b0f6a1ec27a1aa0d3e66f4b4f2bf01f8a3aa2b0886b4bca79465bcd155a8e869e4fd9ddd6f41c9a87e1deed96bacc8ee76f14e2d44df457be14eab9aba1896b21be20050c055a148353771429ec24b66dd0b827216b8a0b9186db7f12aa4bb2f9da7ebd02a8fa834996c8a73314598d0b7812fd668a9355d6ff8ff0d962831fc90c35ae3934062758e98aec37d7d0f49ff9a35fcb60b2dc1ee669c932f9da4451a7a999ae55bf2911fd750004657477d828b307b24757651c7ce543005bec9721f4fb71f29c694eada27d5f48e6bfeda09983a395bd8d7b46a23c7969b24ae38048985dd128e81d458e48a058f84c5cc8051b43f690026114c02456d5b3d4378d7917211474b884c2b7effc96f72bcc87aae67e2917ea0805da843e64df09245f0106de034d40c3d6fdb414bcdbe6e96809e208cd02afbc594de99901fbdd7c7cd7cf03e25bc34862892f74c1dc42421d758cf9dd9972712718f2f85930b4802d475ed7110b8a8d800e86e3b0212f1a2a9264f5800d3874e59ff239c0d946cd643782799df6f00920c95545da2921b8ddfc0ceb3b84719fd62964cf8925c8ab7a0030ccde0d60f035e51095b9744db1e9c6b915a5f52ade2da8dc32deac2b409eaad1792df7bfa7c5840302c663afec4863a64b0590ead424173e4ace41aaf9d85b44cb47fa1fccb013af7055f2cd8d9f1c1f0b82bd7347dd829ef27a5c3aedbcd72a3c95870d3724ee08dadae6394fd8ca0829978dafec9ba36e200a42a6c9931522bbd8c2b265b1bbc45ebb69e579a836f9c14a252278fb192a35a5b401759123e5377796662030a3db9b92f94bd892c2ec8aef03ff5cd580a56ac5199a1e06028f3e3bd54e1a075b7290d6f811155330b9927787dfbf5d61fe8c661c4592b835d0ef0455c12b7cc24c1d79adedcc8314df9545383f77bba1df9039d81807e2c150d337b29f0e3a5444f32d0dec26fd006ec7e0da9bfd906df9731aaffb8b91f3b44917c4b8f322dafdb567ebbaf5f75554510fd40fdc98c0297308419f0b0f6cfb34f7d9dd60043a0a8bb2811e7042343a989ffcb1f279b4e404b6738ae900fb386aa3992ae5aed008535b0552ee3e084d5af01596d659e973a86bd05f849fdba846bd0c082b15bf7d7a4fb9cd629215957dc6b9e22b391953546adf4cf22b3b2ad361583f844b41e084f16af346cd4ea805bc3194e8291a0019cb407f358994d977c9561e41c1a0a004bf78aa5876d78618292e90306484982f41737234d69999c8aaafacc7ceb4420935eb4f495b22071b183da5464f12e85ad6fbb3d47f6d67ecc3b80d57d6e0d3d91a35608cb1a439542c9cbb507572c7eabdea200241907b074156d7dc9b8fa0b4f8c15b83afc43382b9c7428c79f67ebe66550046927bf467fa3f3408da55285efdc0a45dc30515a4c17d1bfce1bce9b0015c794066b6d0af1628727e6b9030f7a95ef9545c63cbd1629ddeec8d6ff186585f63a9975751b960ee23a624d330ad65cc8c5f281829190ed74f0cbd7ef8b067a0abb5eb961ee6d9203f5b992c8d31172a59c01d2cc2782929c90b7c17f737bacc2e1380ab79a1732fd29dfb8624dff4bcf69dead233222dcc367a217265b7f7328fab0863f8f0ea8a1c1373962533344beb89c08fef295cc072710a135ef797a1049893f43b6e6a0f7481dc2ce06735ae0bb4d561f12bc88788979df32d8a0530fb600bc6f8e920af71c615e47c5d2d567f930959abe3591ddde54bc133ee0b3fb092d866c2f8cb4487a2848157f163c0ad1c0c7e7f7366657854637d7233ffbad07d44fbc756b6d283341318d3660762dc9004c07e8b030e146a2a65c141386298ff02bfea9faf583a1e342a4187ecb49430f7d41809cf45dd3e55735709225a0a7cb2c2c8982afb1741d50bdda6aa3bc9fc6fac07ceb652350af6d11b48002bb66e985541d9d007249b2a5c91ca0eaf7fcb9216acdba5d4297b995b55521edb6a50fe18126e0f505e6ea251a93e77c8202353671d05a97e872f8c16db9100ea32566d0a7a8daa48e55865059e1a06206cc3e654cb8b4839ac04dbc11b6a21a921e27dab8a7c9958d10bdd65a475550c174aff6c3011b86eccb7842c9c4a17a343415ccb1fb9127d86cd973a33b1b60ac54356b92a1be369baa7f6d2cbf1ad9189bfe725a7e3c26969f7be792d480d8fda4c240d3c1b19bc8d249c4b6ba1808d3cf347f3146c99c948549c7d7b712cfaf03b5f342a0f494c68a4fc1d9f99948323f03de8c1c21f6c4d24751a6d8fa06d81062dc1d638613b049ee0faf2db1221635dc70aba2dd0ae63348a7808495e6a47e2b13047d4494cf42b346b1b6995914e8d4353cc62373bfa5b2e4b69eadfebe8d910ca8da695fa3141156556a9696e591bc2748135d18a86421357463582cadd72eb4d3e5e6764ff257c660e8c19ac576bea5c82bea229b0801bbee0ef374a8fc57d6238ae4181b5a981bf6e0ee3629a71719f8ba1681ef3eb4cb13ef563f1d74325bb7cb50d89d7f7ceb7e88b04e73c51bf760ad8bf34566751156bff6fe2b543f9eb46c1e96c69dfddc978f928615b1e2489e2d44cbc6bd5d9dd31e982c114fca194f71d186d804745366dd4cb757295de7058bf1b8325c31125d5315a1ef671441d7635810ba2a2c0a4bc7b1ed0320009492fdbfe0b7cd74881fe5afc968d1f439e4bc0e9de7cce048eabb67eea0a3da314ef69bda9e9a5936ef4a00692ec73b8f32217bf128788171348f71fac2b640f1e2ffee8892421435a4341964e04682c1f703bb1fee8d8e0083fb21f2e6255058345bd5d5972fc246ad5d5df18b82cb3b1c763de10ca2bb6f074c86082fbac6ec5e79251d9f10ec49676abd1a84feb3d413c2f1e54cae8c98d85f6f614a141d8317829b6f7f617bb5ba3fb0f3833635bbd081b5ec16a6d59dd470cc09cd0f90bad5f34ac6a2d52045defa9626571e098998f4a8762aeb442f85fd6d5d808de756da82f0a722bc7c048e22d87be52283f5df0283e6bc3f9205b4c733e543231784029e49d39420d8209aec652ea6a440314a7dee2903c2f588888f0717c203591a76f836dea596508506c3366744c3d5a9339f2a19c9e4229934eae7628fa25ed6f70e4b09c2929a4056c63b81c482bf8cd4e9651751565a07a9033fb77d03950f519b174db39f28f8e9a68ac27e517d44878843e3fb1dba1349106597e861e21bde4a29c98d506f4d3ef393a5201dfedf235fadcc65ffce2cb8246fae467beb29047daa0f018c0048e308e4e309027370666396dbe5a18121f681b180d821459f564638760dfd8b071715f3328df40c483f5529b68628fa81162143360c0d1efae8808df80d66caf686c75e6eff5b5f78740349a9f3e780d185b93581880898699460c8d1e470ea35f5559d5c3139f8b73444e21cb58521e3b8b83c0e9f429c7e95a092040c11686a833be3e08a0fdd45ea2dfe1432da57d1c06979ca7e18dac03caae2512a5d838d3fe33bf3c98736c27d41797f0a96d6c5e2f82d1753f98b653b470fab676018c0b9177a40f172bcebb80239183a0cf54e789618746e6334713b6feaf63214032502509678da35f418398a3d0bf8ee0a274a676c7d56d7fd2eeeafc276cba682261caedc86c6dc4e62e8b643ff540ad0ef69731e13938aace9e76409b58ee589f27e8b646c8a01f33988fea7822e2ab663db5565d5250ea993e8176df27be330f4220adc4c29cf7780b7b345de35ae37bfdc749e72410d5a36820df6525af647a2a238f83097e1e9205b844c8b34fa6d78445f5b48b8050ecb77aaf862fe948ec8f50f6baeb51f208031c592b744896786ec38a2244ea816445e1488c91f690da0f3efbb3a780115706bdf792c42b7adaf0cc85d1e37576ca2287ce9d9ed716d505850a13579270c5c58342728f1b61a0fc2b7df9eb01c49a7774f1920552ffeeb577cd5e549b04752814c8bbfab13910d30fd0400e73a07072d30629cadf860b9ac36f84d3b64341f0d3905d052858b34668e86319cf1e222134961480d7897bac0508427df56f86f5a0b0730c121ae9fad51e702e15dc1f9d20153054c0b9a9e80948551afbea59a71abf37c3561ee98e64ced8121c7edb9cd2df9b4fe33c38233b602fa98e7bddb6c1e8fa1b2c55b7ed1f6660149ef6d1a8aef6f085883acd7238241932fd325d10f559b0375df33c3b84d767b49db76a432a4aca1da12e7611992b78794953d50073fd6ab924ca29157d15656ecca6f9ffb465639db559f405ec31f3a88c9b7d45c2a743421605cb75ea51bc379f312a878b63dfa4f6d322fc0dfb9ceafca2fc49f28a730178f9592047fd665a904f22d7c763b016d4af559780476806f12f381ade8f601abc45136a8c91855e5976ceb361caee98c5ad5743914aa425f204872578ee1088f14a948036051f55ce90f7337cc29eb49aca31cae1483fa497688d1e3684b4f729d9afcd8748dd34b86491a2b517940d6cd245f7f19dd0f4e5eaf17b13dae33025943046fdbe3466d604d7436c5952bdd9e05c9915e1694c364842e0e91eb4e4b5c3da5f27689a8980506f032967d798c30e6b04184eedefa4b135699be8134f230f3690475f2881ca80f8582bd7320dbddc0b8d92b7787aabbe7439e3f5d2bf160b2f9b2a592de16a028effd5092d7d66fae5e4f2766cc7af90bde1a39348741a832cc5765d47dc86b8e8d0ec49f473f5bffc9a1e1ef5a84e1b0ce00e3ffaa1b9290d558d62fde546eb1a6ff1bc39a95e047fea0e7c466bb018eac8a37c8e7e4e4a73e5434d28ec415e0e30b1927a6e5e825962df7bba5ce9e8b8d199094c0d7ec5698801ede4d832580b89ffb05588158ad04b503586c8632cae79ac3ef29f60f9638cbe1534f7aa6ed6b4ac440ee6076e3b1467fab61c066ca81cc4307a49664ccd71dacaf153ae46ce967bacc68296a1222d174786781e114e11780c8b73299a32d694e0e9bf6a346f2a6f8b220979caf93b52bfa7427db928f72ee389230a0c676c1af81a3efb29a9cd1fc1188f382789aad0559ddaed9ec841f880aa24cf9b1dfc9cf347c7fdc8c05fbd05ecd5cdc987ba3323972d3ad71d3c644f7209decc6f4024bd02db111db210b2565fc0b58fb99ebbea3278d200265b4ff317ca69be163d2354b95cf61a8ce68f3e3c84f1a0766f10a8fa590b3c5faaea85d7077062e8f258a0a758f14ae90e3f1f612f5b80861247581ec6609f164c4cf79af2b2b605b4162b6ad154db28b672aff4315f2ddaae15a2b7bdb8ebf4005ef47b1f2dfc42a0bb89edf1c6b75fb0d4fe1c05176ab1698960b0ad7caec589c069d44ac90ad6c3f908ef07c3f272616c89b9c3392855ca33cc9f0b5d10d8bd6220ead0fbc925850d6a5a996ec4acd2d89b1ee9f56f22cdf869ab729ea9538fbd1bc8e1a63d8a488b93f466491abf29ff32b98d5fc3565ef872c3f5b47facf4ac9d294865c7b08af5f9b6fabf432d4de399ce3fa486a78721cf50b9843935db00262b2ded72f5e027efc7a6e89e5c9f5760e34fb62dbd2de45c7143c77783728ac04cdecb2c53997b6799f5bb3915c9fec4e4eb28529006610b60e2504a5efed6bcbf6ffffb7746c5b5756af350c18511d8982ac009d0461037224cbe25cbc23ed9cce3b8f20b0c2215c483f42cfad0281708d3b04a20cfa647db3a7357ed3a46902055672512174738a3bd1162874879efdadf458b0e61d5c63c3b9654843b7c3e839152dbf3c51c8ed4af7234d9b00b7f9dbbbcd8e865ae2d73f2c450182cf2f9f03c0ceffbe383bb09b128ebe7fa45b2d6c18d0b24c5067e98bf87daf4f74b4fdc86c34b19100bfaae4fe7f3cf8d06dcd2ff50cd6495c3b8d7f6dce915fc291d48f4ce49362226539ec953f5e5d581490bcc0484b7f48986528c66d8f6f71eed79d507f261899ab93c92908f422f114a75c107d01bf17dce32cebbcd1b3f83a83f121241ea587d40b245127f84562517a2f1dbeda18394ca0e7e14fbefbf717a67ffd75ce1278f08c0b64623224c87833afa31e50107046067c90c4accbcf34a527d021308138b025925166ed61a3520692261befab1f64e1a81c7c145261dcd44e10aafc64d19fb069c9273e7dc75ecaf65caa3038d2dae287186140d2a60bc7ad15e3d2522b446c20286d96191e465c9507cacdda792f7df7548795917f2db6098fc46a5ae69f59c5014198c94ccd94b64ce879bc4184858294e3646daacf2453c683f4b2829489790367a86b9e532a783612cfd27f915d18bae937cb146b6c3c46ea5e618c57ec734c2b94b239eb9d583ef3e7c3d1d02da0f2651d3200080fd36f4db9a1dd4493b405f17a846560f2fc555dffc8dfe39f3e7535ba6c047caae33250ced023c6d52da9e3ea45280a03346d60ce152ea7695e2ea14176629c1771bd72134fae4610427610cd8696054838617766b6941598393fbe3b1a20c29362e7cee589356aa97cf54610aecfee92cdfbaaa2c65b6c80c60d7a0be69d801ab072ed7c070b0bb33e514a658f72718df18b227a4a4f37cfc54820f4b77e55ba8bcccb0d47cce6001bc018f4940a66fcce6d13fcbe96a83f8009bf875e6579d250b4d9af9a1d9cc6910f09465317857528a911601e5221829612f9f13aab83627f04d8f2e281dfd5afc750078d6197542454a68a93c21a0b83aa6bd1dffd49501d9a7ca4e2a32c409874376f87a0f1d2e5150a9e19443f9886b25ee16d46db2952b0664617c7948295376f6495a154f893cd1faef7f43df146b57db611c195af138044c02be99479b4f8faecd51fd95a92391599d09d4380086fcd62a32e29982706eab7fcf2152d05495027ce0b278c476e02e830dd8a4a735508676a03b9a9c2eb329c48e67df453db2e5108ade14f55b8425932136ceedce522778c9f1ff84150d3a785cc69c8cc49af914cb59797b69709b91b4d0813f7e9ef2500059a9bebcc08c9a18685f471a37a6d9588cfb122d9d403a2b97eeaa78fc8b655a39ccea06ec6e9f04cf76bdf6ea971146a928da902d358f674d7bb1bf5cbf458886babeaa0feec5c1d88fdef9a4a5706b28605db177c8219cdf5bb907cc703dabece2f79e13cf0d5d401f5657833fab6d46e312771ca160eb5249b4e61da1bca458271980dff0d2041d6e97d9505bd0c8537d82a34b3c29e9f94e581ce56ab905a0d55dcee088b573199e3f12301dd148d8b7b1266f03edbffd2743bdeb775ee3cb39679d1f8abe67c8b4b49d7ebf0e29b8f0cd7e08da426a09ffd06d7f0ce51920719e6018d6c8af8ccdbece55b1545a3fd55aa9b0fa54bbb25c9cc2b0b9238107f509df8c6c8133a26b6aefcc6b1d8fe69b247e7b01153a294095570fe351ddf582ee4094bede36e2c4096ade42e39047f983d30382e6e7d153130e566fcab703b9ed4d41f3f8093560f390b7fbdaec2716763dda94f72b3091622a5b90378445632f726b3b7d3d98b56cd8c45d97c2db5fd5ca00919d9650cca5ed42a854b3f3db540c2ead82a0d765ef968ad7639a37a06044967d920565ab3fa675cabde4aabbae03e9601106d24608a2ac0800596c2484258dd493775e0edddb1d86e29851f6d69c896bce52170e8228a142991b1a530bfad2004d8bc1c24bcb8c33db7778cd00162a13a645b5f30c943a8164a20232a401d12775ab2e18c1a04634de9a2c3fc4489249704d4ba0daae75c52a68998cafe8a70996c72ebfdb188b421fabeaa9129a97d4f23a61380d0b4831ecf8597420f50c83b22e6120b28e21ba50bbabba5b64a12f2fc5256b6c46f709fc279a83fe6c9fe922cdd278aa2b7863c09566b7b5e2fef8b632585af58ed48521d6b249340b75b76837adde2ed9939385f471897bf1cf8ff3e86a839319f87b0fc13b8cd07cc5e91f5f46f48da27d2ffba7e6e97133ccf4cacc7bedbb0e9cce8a44ed4488568b2b3a58284c95ccbeed432009b049be851efedfad8ca4ed466ffe5346dae30d69414c54535f117d68b2031c1aa4127d9797f3cd345f47acd5e5609b9eb2555f0b0e3a072cd3878d0dad6b59460f58af3d9624744c7ba71c23e09b3f2195d570739f1bb832cae2cd7cfe4ed856a6083453ac134f0745e3a6da9a5865d4b5fc7b42d68516208e95ea7be2d683568fe4277a6b8f20716502d3c07dcd770ef0738b503f63aec9a96a85e904257167c6966b90df80fafe3d96245397f31a21bd2d8326bda94cb19a4bf6f2658a107b2ec5f38ff1c796071a3e8a59043bb177384c2040ac4be14fdbc48d3d04e60cfc53bdf8055a5f14b8e26fe3e20b3649e4c2591e173060722512f9e8e4c9ca56858ba71a3489190d38d8f4f99c3522bd2d29872631408914aaee7434b6e595f34ffc02c74a8c09fa7fc4203ed3f560013a922a73ba70d236b8c27d3edf615cad26de8ebcaae9eb5baab18ea779681269bc990339c8f2f6976673f3494a8ddef995bd29f0a6c55910422432f2784dc80520b32d1e9c974c8b4cb81cd53fb0d240b2f7f08a0f4635fbb32d834e336958767e7a9d81188a51644d93bad2e7bcb212bc3d15ece7e8e220844b73b13676231ddf8a2ff1023c7db220b1f51f7cecb0c585efd852fd0df710f04d4b6348d69232fa399c1914d4fa6ec22d18ea33f120f89f30dfd6fbbb4e9d33c9fe88b44167eb6f1623613408cbbad17d21fdc6c97ade02d4173bcbef9f7d3ea8a5d3b05f3b4677e2c41f84fff822c9d7778014b2ba8c0a0e8125c708333191572ad0668a60232fd807d31d450b6d421a063b3c159588460823c0e04a2be040af6331879dede0d473b94fdb290d2ebfdb52d30f9b51903d45c579adb201370830608fe983b28cdd995b7cb45fdb7090c15cccde7cbf497e196eb24fc51e18eda9d94b3a2963fd84a735cd2d19af134c784bf3abd287d031e8e9a95353b2888070098407bda614670d227d711d77a9b5fc38399b7249c1a34a5e5085182d09f37218cf04f4b1ee7e90cb6db5692536dfcd93d2ff080c0da2a67b3ddd2f6eb538258c3f8c942ee1bbba463f123a01f638b0fc5761c2a08c7e53ff7d7e6438c8ae10633c755a516182003a44bc2e6c677c39cc2fb0434263b321620c1e1fba0402df0db52858977f75f852500cc2728ec4b5ca9cb1ef83130c4b81a977bc5983bcf99877d9b08e33acad5013c67bad13eb7796d08adac33ed2f20f3618e81c451d1f203ed4229654190629374726316b4e2b0c40e82902a39799247ada73bbb7aea0f9cb7dc7bb3f93ee18af660eb69e700eac9e68989f774e56a6bdadcb4dff5e4e0f70c5ae0a8dc1fdc8695a3f5f2d4c9acca20fd1158e6468e694fe5e66003a64766450835c42c64de12046d98f1df3ff6afb114abe91ec892996167ef62c65a042eb63dcf32169fc20f4c7669d9b922a28998a63c00183a925d648d3e1066e085a2d835a02c03c95b7db3bd48b07742346d58dbadbd4fc8ceacc61ecfc8888f20347ecad7df755a612fc070e3e8053baf5e712edd961115f05532786d904e35a8aa4a84dbec7d076ccec972a69739d6f508b1ab62d1e380ab50db6868a0a7790793d07bd4461623740bc442f5bbcc1d9f31382ae7bc059a2461b27e80fa632a93b64720c87559a6323c3d119d97a72dfc8020e6888bde406e47a52a3cef3421713dcc52645711930e083a0e47d567a820866550d3ea9137ecbd92f97c9c5da1016cf436ab0abc9d2c19ca36b482c3b417f85c80edda2e6fe983f3fcc5612d5f437c78cd9e3c528a2baf6de26a45c16a3fd6c99402a5c52530f787015a4b2a2968ab14bc60125eb4132106c9eb4e90f0246a01bc36d4b8d49bb504e87ead898d9e24e671d7318a665f4a2022a2903c80dff956c0ab485453426dd0486b9af44a86ae8aceda5b0bcfe1a2eb7415574d0ff941ce5c639778a6c1ec3a700bf2894b73c98c07364132c85f1bf0a4a1236ef38ada0c138f01e7afe1fa07f60b1166bacf07ea593ad8bfa3acc8c1411563702c61ae7ca1774347cc492700d9b1caede609876a2106fe66711ab7722f3e3cd63a4ea0f9654c95dd7b952211cd34be2aa80a9a9e06c46f50299476bdc7acf78c2590688feb5016f74d7cd34050417e91d9560206eb7705ef091af9f62e38d7e7e90f2dfb5011caa4c5d8dc23624f2b41df19edad9059135f0a17144d7418b959448f2a283f156ebed186506c0887bf504a3214495fdad8d0c63192e824d9a41081604aa795f21caaef1ddefa29133b8100cb06d973277e159cb95646d1ffc9b0216a29a9a754620de9c020c4cac2ec0ca17b8cf8a3191be04d9bfc970a8d1da003ebe5033d3acd7206b0bac24e855f37ea641b6cdf1c35556d92cd8d2d66120557d0860444367d676ddc1f444957f511c5b2a196646fd8375ac249214e11a7f3fe3f6b81d084ea7f75183b51c77b2345e6dabd321c393cbb57df779abffce611ef698760d2bbb7d04de39d9dd864f8620f1ee2e2c5803e85ea7b4382053a085b8ee1ba2683203900a479fa1eda7b3f702bbb3245dfebb16cd6dd5f452b657b33ea9a63ae55051afd4cd7a91866b58a10e4ad70aaaa2cb8f279d3533ec71aa2cc76feb64096f06d45ad20f2abc98a0a1229081f7c59209a7b672edc30c357f5f1b7ab6b18a390b34fb339763ce8b92b8c2ced6f2d29bf2b29096ba789f2ed0a03745939c31ead5fece50d52f35749f796cf4ed7a9c9b4e772b86833203ef9c26de1e4f3bd30c4c1c3917e7e7be1b151d1b39261633445ab4db19b0ef9a9b19808f769168a25bcbd0ff96feaa6a53888b3fd3fb153ec125929da1cd3f16579db21b4750a972789519b6b9b28f1a00613d5f23c7fa280be3cfd033aed4f9e98c4fd1e6443df6727c551d1ad04f33f3293dc6e1eef284f4e5cebb9487b8f6e3d579cbd2dddb36fe43840cef1e3037efb4ea62e335010e4935168b45bb1ffeada43f6205e7bc1cd42e197c22071895f3ee07abed7c197c8bf65eb7aecf036ebc170a8b224d0e99e64887ef4c912697b6fb9ac6c210a1d0d1a9615f18103336dd058e19acc64558058752c7bd9204d19250746dc4085df9c7e290082ecf0fe6bf5adb3840e62b49f06fee6c47af3c4d0fbc348227c93fcc434918c601526295f0c098cec0164e66e23f37101cb0b56673aace0f94a20fbce0004c0d05596f730a7c4425d7230ac658b879c1a3599a1303df1744343f8fa16df2171bd96cbb950e0fa37dacadc0778314537c86bd91786dae45e4f251b6f1b41482a208d204fffa702d7515a7a6b27f3abc6c61055e8f14b543a3eb27684d466f0a294db22c0bfb75d37f0bc8fe4dc3d1e5c8d8452d2c884957ced8828551e7af712c2e4efe0e8d5739c70694055055b7d5dd4cff6e7d30e86235ebce36d9fd78189728e89dff9fa365f16c540f0ca4a116ad72511a3e3084d72a25cfa57d51e9dda3f98a2e2010a0a4b35d72cad482dd15c5406a688c0abbd061caf838a819ca8d9ed0c3915844e369d3dbc1b9ada7a5c0100c6ff691b518a0be7aacd764e60e107bfe264dc30960f48c10249cd2113da8b6cadb3d0b82a813a86c33a62584e4088bb08bfad2ef59bd91fbb3a417c5dc890eafcb52e2c2ab18467951fe8910ec6c4323da6ed28a341500f75e81189dd8df0fcf1792d25bed87aa06b6b2ade6bdff60082cd175f3c8494622ca36bd8ad3878b788c3482382427760dc6bb0c4aaae6d9ffc5be9b442be67c47aa357b5dbfd59d0ec2bad6ec8f53e88ad1a5ee2f9baa2d6fd5fc8f384a3cd827722623ed27dfbe61804640d91df2cc05e422c0df4e904b4ac90e666f1612956e861dcd4c1d845415ef2bb96e89f552be45d802cea2951234366a872cdf6320581d19f31d2bbfd602f0027238a5d757a04d62edaa589f698ef73c5add3832b9765c41e7cff92b45a59b50f3dea989638ffd2cd32a4942b29bd6db8ea1535c8a323a410cf0b04b72e71ee8d104a339fc0538bf3ef86f5fe0aef1a9492d512bede8fd7b7a0bacd9fc3ae3a3cbaf8b03fd271dba47a3cd4578985986ed866a1cbefa9087d64c2b7de6e3bbf8b66f01598ecf9ea7171f7b5aebcc7b68cf98e51cb636f2580d71f0115408dd99f45a00b4a8fe620c566a117d16c2ee5e9fa1cacd10a78df4da1a3f58781037412af70d5579c5d1ca49f482c9b708caae3e8855c97a1043c4940c8ba1a09fa69cd252e2eac1297dd67f7fecd1052c41fbf7cc68785ca4cef009e589804ea0dc8e1120fd37dbaf5482e128b8d0bf250545d61fd7856f824f1bfc73c2e84f22d48c70f33c24e93a1a63d71dfb6f6a7b260a9f4990810a978dbd4212aa917fb4bf894d9e1e47b9e34a631fbf8433c20a3a987bdbea836af09109884eef74c505005adc761dfc68f117b115fe6d4df3b3e03d741451510b8236cbc5115f08ab1c8305f6625a9b1fff6ac05c17a4e05c22626367705923c59164edd38f5de7c97e0031226873894f0a2b2aad81d3b439c623ed557c5bf753b1a8296f7c2ddafe81c4544198611e3e6c0c84b891e9bf75223ab6d61671329ff07f93fdc7b39f4103b7cf1b3d1472bc8eb7a94a4b63778ce90b148e82db6b451657e66b32a1f8e2cc8e2264092e08dc6d3501c00596595d88c78209561bf53b3938f7f15ce793a6e1c0ee008b06eb6210b95b497983cd3af271ce84a21d75fdb44a921b72c8dc2aa6589a3ce074d1ac084b172abd0aff6d9e2993b3b48009343d595ad90deb972a837cf74a89392c370a13395c4913ea9e153a7fcb1c205b35fc66fc27badd36827da6a69383962f0fa175c4aa5ae66d43cc6257b0f2c2b8256a65cac3eba998cba6eb3cc9cc490137972d4270652f3eb1c03118fa8efc276809b44521ccd7db377d22563dc76e50afd01f1fa42b2134359a0a81b7f7ee361e84bd6b7c69e137e01a874db308d5f6fd27e6ec3ea8d0f62b668e4d94966f69ef51395a627e2305397502433b329fb5191d5f8cdfe12c0d7f0872558b2cede024aec6a758bd8e67711511faab25090f1f52404653c65d776dc133c476f2fb01bc230c87c3d850ef21f3c2349b4fc82b3d9b277cb263c34e74d5f87ea792d8e8b49167fb71f3897450fb112986c42fc4233b22f0663b13de447fdc2311c7671284b0f23b9c2a421015f1192dc83525c0a11eac7e89a5ee0805673c53ee641aad8062385c0f1ba5e5f109e315f24aa9ff706c49971379614d28f40006c70e557f22a9c88636ec8649f8ff55d4528b37c1a7a8ac38cab1bf08c2e626e9acb19c32f1842f4690c59460970d737ed4d8667256c554cadf2de7639d485f686ad9d3d62edacfebafb996328819816196859dbdb727d898089d0866b389376f80f3e2a61df3b5040a92b33d84148ea454465d62321419218983f541ec8ce198e6fbe718243d4bd0af1a6c8b53d87775742a6ebf56d3f801c3b7571587cfe74eb7742958f1e4beaba10ac54ad80fd7c55cd7a1ed1f0e428389c175f6624e747bef08c0ef232dff1136f90827f468a09a7c19022b7065204d17bbe24235809deec16fe57722f1885599ceb6512d9ab98bff9ce2cb4d0ba4de2c4854b2a7f02503914366a4cfc21c8906f8d041cd450498f06ad1adc09147003ddac0d3fe8c5a238a6716d0f17c632fae9ed3bb3a231aebd078c5032824db9998a01531a3a3788df307f7518046bcc7840fe599281473dabf4cdeff500f09c350a1b553a9b9afc6bc2227e59fa00c90e63dbd31c82c1d6b330f42d90d8586720e4a7564f2724e090257da67ba1c10e0f74bbbfc0c6da6a0dd017686a148f74e71fb272977731a2c492ef203db2645b6c0f6eb1f834e0c90c473347178683d7c6c6826f1e0b46a9213e1690a48ce768249cf8baefc62b30af94ec04ec4def620c1a95704617587439e17933239ff8f4e0631024b87b24f0e52858b19f951b4f15125990b4d9f318553435dd74faf67c7b99799ee1f95b2b4ca90e998b6f3dc2da3435723de02b76922238a544981f4293e372336c79391728b43ea1ecfc19e3759989f09f8255253f949d2dd2459ea0e85bf96cf5d6f7250b3fc7caf80bce3fbf26f0b0b58d90e411c0bd946bbf6d47833bf09360fda4c1d1cea3cd75b4c9fef4c4fbab4de8899da1b604ec431c0d3f2834dd21345894229d65351d0974c4c2456af73bf06290b3467581a0969ce6dcf3e90fee5c3a718bfbdafc3719bf7bcc34b0269e6d36ba6f270f931900f9c137f1a077daf480a53cb030ef042934e2faa5f972202462a36cdc063f16c7ad2bdde9bacb9c419d7aa5b0a8acb52ae0d112f86c3353125af54904cbe8ef17619ffb142600916afe4da24fe996bb565313e050db5634db4f42f0ffdcae2beaac3d6852aeb64902259b15e2a8887706fd4713c9fb4748ac54411d046ae27c55201ea34afab67cfe1e9a8978518be26d2470bf2bafdf6adf4f70719df4e915e7a1185ab6076090ac798bbb66bde2b7967e4884435102943fd94f3fc3d502bd5ad9fe9ccd53afeecf628675bdb6895e9abbf56f346c45fe390ca5a16dc33b04736fadc2bf7562d7516b07eda839fc38e173e9834efaee7a1c8ead7b3bfe23ff36437299b8e226771a9f6346815bbf31f0a22c48e6b385f744dd0395c923e215402bfc8393a03db5c76c4131ef5dfa38626cbbf155c2c61e30160ad7d7d0cac126b15bb02aedbcbb42a0a811729944379553cb8d558d086f881bb0238c73f945786bdbb7091f504c132a3f569a07ce20072de31fa9f2886cd7164b73599022e669be313da161ca9219d1643df0b113a64c1c2cab497a02e75aa6711e98171c666930f0ba13dd93bd3035e4803996ef5018ad77f11d7bdcadba07413191551062459d0788c288648a55bd314737d8e033a3ccebc9d5f452978398266c4d9c72fc2dc7ae73fde7512e5c98fd941bba3bbea7d867618c13c9528e068e178c397e3f410ba1689862bd389e233e8b8d403102d5984a44138a0d8a788912595971d8e81e5e2390a42f667d67d9428da02f99ca057b039a97fc22b63c44845ef7500caac438b39b740c79e376f6a7b8f6ce33b24cd75b13faf96fc24edcf4c8d5da7bbd16fc329c4c5029ff912410285b0d6d87489e1dc4e3873f35a3cb3e30e90c50fa83f05a89e18b57bbddaed0a5d9bddac901a0eb7792250d5e75ac891f976395debac0b0ab5a8ce2478c7afa420cb17d90e5c61cb0baf944541959e4710dd8c17416f46a3df038791a99749875f4de0f4c2393748a2f07d175109b75598e5600e86c58bccc6f7673349a2e4ce23a57d9bd6758f048a62af335ecf4df895f276c6c3764fc367a832902bb243e0a48f8619f3e4be0934a66fd142c42b943cd874904fd84b27a0f6f740dab8a89475724d43ef3897217f1733742be71557cd7177b86a5adf033d88f308a5a7b75e1761018f18495183e44732d4b12519cf071e59ed81a21e04dd2c800cdd76c7ba80102c5303f898c5118425c4bd9a1afa785aa76cd78cb4cb834baadb72fdfe6f8c063e6069659970104962aa15cc37d0059fd91c279498ad34760571f0e72cdaa54ed668c55d704fe4cdf6cfe93524c44085fc67eede07291d0e219d1ffd4146f3590e7071be8ab1a8f0700943fa2eee2a7c492e6bd5da85edc741460c5c62d4e5bd8b6ebc2f84ba15d7935ee5936d2d5683b39d3158daaa0a0dffe83c2689959e5c22b29720bfe6893772fc110a856fab323ccd340e9b92dbd9fc4eb88f4ec5ca2d4b0cf76b64f9c10383ed8796a30c67542d4608ff803748842ea018e059ba104eb07640ee04dae38a0ad7d57afd18ed290e06f7bdee017cef9dc2a07bb5139e530fd86acf114d0219ac5d698e3a268ed3dbd38dd26a4ee4c9d9869ef65908de5998fecf189e7d27524a7cd2f2eeaff0969ebf9e7497852f2f97d0d2c17be64b0e61b3be038a5a84729377e78cfa0edd605819f20fa9f402802fcf3d8cd5a7bcb34cfda5dafe8003c9ea08e33fa895cba70630f50e5d5249448823cb6ac58176ee14ef309ae6210ef93a685e7e9aca9f802a99f4bcabba3229574ab7ad54a906e024345fa6afd6fb2fbe191b4b415e1a1e28b485d40356afe72e7989c441fe433191173c672a8e151bac66fc33c000296a6e304868d29c18522d9f6323abc811b62e460fc27340cfab680c82acc2e099017ba52e646513c855c3850c30367f0208f46ea6143902418cb0396be0427c641e5ece8edf09994f81a0894bfcc8e6e537bf4c14a16e24023530d374cdfe5d9d356ad2600419003a510acdf5a0c96de52ca90d81b64f42a60d857470380e454fd1285291c610e70ef7d6e8fed71a4f6b751e992d8a37e20854d26b17d7d9b50c857cf940efaa456dc836cc3dc6da4e26a4c5cb8063159e767301efa5c8a47d7becdb55ab89a630c43668870db13325791cfe0b18df3073f23f66e2697e8d9bf756c02fe59738c7a41c392bbc18c34f386641c98328fc61790465911b99ef3ae6aaf8f98a6ce66fd8bf3178251830e79255766196913ebf317307316e4c953225556b7596da3b864f86fa801213302e9c9676b00a0f842d0085fb5069006f6368742e9d4ee3460a4120563cf64d206956cabf11b76d1770b3b088149b574cbbd467d8ee9502fd06d87755c24f92714d2bf92e8b174ed9751920b6a9091c311f1a391b1602fc6a85bd170f9aee66c35513c5ce7cbfff6da8ce3a5a0eddecebcbca24fcc492ee263f2d81a6f8f29a45b5c6ec1be7a6e1b44b06da25f0367392fee889ef9b257cf80043799b184f3f2088aa05b83efa7a39735132dbf3a964ea9e7246640549a6456a85289f6a47adc6dd1738324e3a354d8e8c5b479dc599f88932958504cbfb30b5c96793f1111c58f28af28ff2802d4af4c0a4027a7396d41b99810f01d51db62fa15a6eabf95f284be5c114b6ea5e232ff5f260cd83d4a04fe73cbc6d56202b7ed289fb465dadcd33d11fe0b3d7e5887df2ce9a36b918ff2affc291a58808261e36a27d6e76121e3ede9125e92149073a9c199b1059306d3a94885540da6e06030353afb3b8ea5de1b27cfacd6dea6b6303dd30d9c6b97287c8ed8b001b6e1931ef910bbadab03e9f5621395bf112d5009dd0eedfccf4eea6a47bd903b519839cf7911b0b339871eb34392ca028f9b0edeeb326d41c4e7fe8b2f3f4a19c850a55bab50d45dc3b013913f9ca66cf3071de16fc641ea0b783f20f569bbbca20a784f1d018f11a12db5bb22343ded9d37fee0c43a81a48a95cd4616bc2b0abbde697a7ae5bace827b75b47dc7d2fb7343cb10511782743df1ad50b2e0afa689fa5e45cfe400b5b22a28f50fd1622cccc04db9493d32618a4678b255557da85d5b64adef3c308ba3b5464773c47eb32ed7a5fe6a379c57bca3d7cf858f06a1a8e41013156c9be2ff79c11809782dd30c0f842bcad8d5de1e00ec2b7f500d8a9cf2c92131ee76efee89b8d08624339274b93e60b473fe4ae9bc0f0c1cde8164cf747af32b257929a3ee9ee7e1e03438e5ea44d7675616c1a85a79707c8356410db89aa97be5cf5be32f4c8cae0dea3d9cc7d47adb3693ef8e35d1f664538808d8203f598a3f0cbe349cd0e11302c8f71c243eaf39c606b25196a39502133afb9220010a9e7aab0fd08024734c0472232e22927240d3333e1d44ecbfc73bef18e15c2121a2fe93e188ceb2c2fd80c3e828cb66eb24af615aa01d8ee520fff8f8a5970d4155bd1c5867bc0bdb581895085b8d5ff41a5394f63c0f56a2ef5ef1e5625fb5afcfb26522ec6571db53aacb2ebc259bf2e89a69447e79dae6b05a5fb9d1bd06fb0a1db2084221a6cce097dcdaa9f0eeb353230a329de694d40b2eeef092dbc84256392bb685612ecdb904360f3e68537a23e03f23b35514b954c541e88763cc94952b97d74c2f47867e2cefc34562e4d562804bc896e3dcc7847a9e6eb09929935cfda9cb4717a6c51d8c1d9e2f7ce8a0f2582b2fe63e4e4e52ac11a561377c4482dfc5fdea6700807dc042713538b2ef80537a6154fe00a2e3e997b0319145a760195d28da0d61c835c739ebd6fa1243d7349d01cf03b6ce5a4c41294c41f80c7f3e83ad52bd8295dc3d2ab612f418982a063b247378edc83de4b4628693fe45dd6b2dcdc5d18a65e5d8cd1a27c5d79fa6ff250ff858433145dc5f8aae2da9e0100ade0a50aa082e2f4bbefce5a86483f0fb9937c653f9ae1d6bd466a9878b48fbbe45faa0f6ec8b19693e1afa1f036230509d99028a72cdd411a09b0755052c28c79af43e74c5ea2a1f84bf851929aba367e1a454915a51053ee103777f4a715426e2a69ec53fcced9d39c362cf501d812dfea7df0fb68d55cec7a644b9e67d77365b4532a1c250f8d964d0052d1d6a2f065c778cecd9914b3ba6c43ff84f88c9c56a4fc479124355274c11a6b0421cadea5edc93cc09f78f8edf478ef0919e8ee26a43665847a9b5485550aa8fe2844d46d5cffc87e33c830b94ae2e34236d96e347a6f75b3e0662b01db3cafb96469956d418aa31ff5e2b54c5afd3c9ee8746778ff993535bfe9b076a10b331cdc16ed777c60987f46ef6846af1c1f6f90d243939f6f1f1c034bed184b6fbf86e200119c4ec12f242ca1429a0a7dbbc791f9779f866002b7ae77f2cc7e39b9ab1a93dab454e3bcae135ab84698136bd0cf6fcd2253076d94118c901b534f364d5213c6dd5ebc7a8d52405c70d40c9b07bbdb8033b85e24917fe295544be2e20381dd598d51da90eb9d729d4dd903277060e262888aed2c0efab26e85a66b8436c9992ddc8bb0a5ad16c3584fb749410ad09911d76da1e1b743aeea271c71366e9ffbe41dab0c5e6d1e14984cfb83a9c5d86bb653b4802c4e74834ab256e84db1319ad8fb352bede93480d0b51c712c63ef73b67a024a5d926c7173d35882479bcdfb158c36dc838082aa10cfafe09fc8d3569e4229fd31761a7bbcac248e35af8343e03231edec326d9adf9e615c6464329a32a2a98bc28166490a3d28cb4d878cfb4a9d111251e38df1649159ac55fab603ef6af1a4c5ea5641bdff4877117780fe79f5a1a9c75a55d649471c22e2b7aedd0f9969926e84ed3a87496b91b1d116b90da19fd6e1d4419ea3fcfaa6d2ac5606e117f90778d620f2e8f281f2dcb2696d06fa287a4efae01a24e1a2770222fb36dd5a2de5379d456a320b420110b4fa8d2ee9e99bee4c0a409e92096653e1037c82a74d26de7fefcc5f86b366763325841ee0ca51c0d66684abea3dc967b2944b5ef24ce54094dcb08b1da02708c3325dc7e116cd1339bc3a10256a02f0a0eb1d5f8d794f384833d45a6052dd174db54b47bb45fe2ba20300898b0e209b144384bdf80f016fda5f27c7e6b7b29d52e3ccc207f06566ae51b2f9b7ebf683f76c8fd9f339162a3045ddf91fd3292e76c5caaab2c77e760ca253586f2188b5953fed790b9b83c19f0ccc5b0cc63cd73158677e3262a51a519fa4b3555d3f747557ef4597161f167b2490464afaca062800325d2d2becab400dc68cf42bbfb90510c2e92bf2bf1672d8b180badf708b7b1e5cf5373460ccc4346a53b23c42ec42ade761f212b168eea1113b1970199fa08e093bfe3ef27e4c527391cce9ce863e3766b38b89c256857ef00391260502159910e39a82c12cb1ad3ba2b42a82932f5628b78431e3332aa5d13f885579416077910bdc3d739df834af394f65ce8fc0904a30ca21fe63cbb362bd67d8ed3ab113579f823352684e37eae3d9b9d3aadd0dceb7a4825dc83404c3166391ec0852c8d8367eac784a8effdc088ae49b88c83d13f697aea6bcb36fc5f7ee45134e7e7a66c474d038b914cbd240b91691d9b602151e8fd533ecb1e62f255c3620224f55bf2d9e8e4fbf8574c379e7230357b22e7a8177f5cea0c57e8683b012ae812dc942a696ccff845df5ce7bd41175d2ac84b3cc0dd5f9502cd45b8588febc38509cee7c952f84752386adb9b8700f2c46599d3b8f1346488aa95e529255dfef52a30f4ee06a92f29b92750556a7b1eef9456800b2e57a33d81374d0408e3f689c47cf854668fcc64e2fe676b5f4df604177e99bf19dfbca2d31ce9667140bd1ec8520df645167a9cbcaedd213143ee39e8b19cabfd540020407c829b13e88722a7059769d4ba17f707de40a7c3307e90bd1291492d09635ee6e539752be0069c5c46bc89f345db39f5a0666986dc297abb96eae06f6675e716d8f689123a01686da83f0cd9657f3daef3352909cd52f229f53a812de377392aa161c88be822ef4603d216d8820cb046123d005c0ee5179180d771dcdc4db7a227a07d90d8ddf02b22821209c001b872e5487cd4a1aa875869a5245bee7fd522b9e0862f287549cbdf4c7e536820753a3aa0ee9400f1cbd8185b556a0693efaf84ce6604096680912c660a2a9aac9d459deeba4e5e6e72f381a917796f1d69f099185ce9fea1f30c87ace0958aea3f1ee8bfcdcf18f5d7d538c5d14b2b88ffe738540fdb4cacf03eba55a2391990b718302d32a4a0c891feed0d41210be5cb550cd9040fc2e6fca772c5047555f62c8dd39482dcc12be65fb1e5b4792c494386873a1d2826209c467f842fe0c27be07857fc6bd7db3116c682cae59de3c8471e966e996daf40bc3b8c5f7b6fe890964dc0838411fa46bd64e175cc418f0ae9c6d9efaeec557fad6023c32a4f3901ef7e3dfc40a5b672c1a906de223f4dd3009a492a6ab5f64806216b18f334bf8a1586b586eaffd52259fac88195f9c5a6bc3e31f2aad51c432e5b00a97b9636e8bbf752a192e71d7f44bd11b141e98d17db90034453f1c56d083826610623411994147de2b531623a0943a7e71c44147cbb162fd66ee09064f717a60a8e26765fb7d79c8b88e9bf05a6cd1a05967733a19c3b1e70148f001aa0b1eaa6f44a95cd40ee296de71d576f5ef62c2f91b326532966d13b68542d6ab9f69d0fd14e2db8851962453793ae6a6b2931e6ef1dc578b3146156f00c8c9c918119a3f6e9634a7134cb4e07ec3717becb957d38ef9572a983aac44a2a50e6d512422eb1979e8a4d6ca8a51ef5bed255fc77bd398d72c863a6f637b074ed6e7cca741508de6f327b949786556fe0a3d4ee24d2f12e49761ca0dd710a657017d4f49668aa2c0047f97b8269f89e3ec38aa1df21db74c4c566575edeabf47d31217e9cdfc1ba5629547e282940e38e84d667a915cb1a4ac24d90088af863e7527068ed65bd658e24cd5a9b11002ec4ac4e89b4ed640ef8f863d1c506626532cd9493f9679e42ff6e70f110d6422ce3f518db8b735a7a00203b99d6ed9b9e3c99b5ae55e16f1a3626423d8b0194f8283d5434cf961f5ad59b1184b45e643b02e4d3851529e8bb5979489b4b3cbe1c143d72e070d9baef348c1609b08d260036b26badb456146a87650069f44b5c4b500b3658d35723eed825ab189faf403d49af98ded157598a77eec8dd66c3d9f4303ad68fcfb9f76548860fdf63152536c14364a8d3817b76dd2556cd49efd9e946fed37def769a610f7ce89ee0e9ccc9198e637a9fc5da61fc4eb44a9b1dad2212aa9992aee24e2bbf38d9b7d7f92c7d61cfbfa69f92ad1a71f931b93f8c1e195fa9d70c6ebc572a3e6ed3072ef2e60d841383b3e4fcf92f8ef1f2472ee7462ef2c77649b79c5357897047ad264f8f9f0013565a7f3d400cfeea9c30f59ff787406c94b303e4701503bf4507442a1f593ab4d4695515576de4f1707fdc14ed3fbe229aa359f497c1153006c03ac20b912f82909b67b63fea57db8e099921ff8d9240b4500980ceeedfa43314061f0bd5843745c36b544cfb46d1de74e666e50a483680d504ca242d533634acec9441b4f1e977a67cad9fa98289315cafd51c094e753f6d78732fb62610cc4080f808df7ddfffb819b9c7983cd563f5f108449e67cbb4ee34d1c8eba1dbb98a9a14e3d1a034f6c007f84796771776f4de259a7fa87ca44432d716ce3225fc0952064a02df7e9d520a38f79f65087951fa9437c385334e34d5c6d258e484f3772a9aebc6a8ce79dde5f4318a3a00d4c348934bdfef7212ffbd67add04241e4ee191786ec481ff741098019065507bbcea950bb1e8ee5cdb24a74a6520c7fa55ced5bba1882a5043a3a41fd5c68eec1ce6d1119f31b7178ecfbdc7ebef0a681b0248804929da0f56834cb9bc32d03dcde8edd422c5ddeefe642eaae9d8ecc653e32316b7c69f1877323696deb80bff8d57e1d4d2ffb0d1513ddd13499636bc1be151bf85044b7e495718ecbb2092a44222da156dbceef979850643f0127b2b738c466a2a1bac3781e50e4d7485eb076d2c84d4f0ee9d64db88b103d21114039da57f459ea1e643e634c13c3c99c0a15654763bea00f4d1925bb0f9f5fc371b3720407ed6789d8849df5b362d67cb328e52c5afed6ee4acfff0d205b7d66151ec3ac8e6a113ae3b380aaeb47a1327fc185ef3f6fa04c4e5da703fceb528091eb7ddfc011fb9d502ea4555cfdbd312a615d743d345204d723c4806ac3a89ce7a1dd4aa2591daaf6d5d18966c9a44f2ccbd36d21a42a0277ffbefa27abc2e2e8dc7d68074d2d5bb6766df427e95bfb3a5e80efa75058ee14c5e9d55b570198c7a823ac9cb114418235d7f0a619152e4f7ae83eee8766e6dae6a8e6094205b5ceb98997bc4fb8a3b02ac4007a93a459eb9860ef9958c971961339bd803385cc48d304b80d664918db7ec2f8001b61c6e5caf2997c2c40077d1c24c18fff379234dea5cd82463bd0c484efa1426f95b7766463240406e2d4e135ece123baa71eaff22d9a1551edb0c4468e7a5c791aea3aac596750fd0269739bf6da2f53a83b04cc475e1662126f5a83b8a64ea533b7e145bc6a7e5772f8c3c734ea1a6011dad3cca19ebab483e4a4f1ce27920528cb597bc362dc17ee556caa2a0711825ab375483cb99da1904d119d2896161e17d6de16195ea00c1538e2bf2aa01fded7c02e1c569ecc248a955cf86fb9ddce3199b6a7cc31bd222e3eb2a27bfc21b18fdba3f0201ec3286e0b1f0b868245652e3ce1e497444e719dd15fb6198a1893581a2ed72db626bbf6f993e4b99a816e77c5cfa5d1a711ad1dee014f97dfddfebfe14cbc97d024b81dbd607c2f4c1946aebed31954c1aa78c0b22252e71ba1488c26667e61feea7511e4d2c745ff1f1d1863fa692acd5d3f2d19b9c3de1a2cbea00c6283a30d75038e736691a091350808115c43c14922271a95112973b4deae1b1cb4b3015e8ff07c6e61225c0d03305596b738087d336af504bd688fa23c6a90a4aae10b38fd46ed0a140c49fb7c65df561f6e4944b043d36650915b350b8f8accb1ee667ff0548cab03b0479e7ecd1a2d647c6440aa7e1db51c19123f0ce61eeb2f93c7bd064ef9eb03f77f95caab55fe38001d0a9958b12bfba20a4224895663045ea542e1cd4e7d1d8a620f37cfe0d0eee0b514572393172e12a5f19c5be180629bf21decd824793ed3db12df997d06e119a07869ab4dde30e4972da32fe23b1ae77100e23a8532294a6f404cb4c9f808c1c41d7796706e44cb9723fd7de2c30698a3adac5f8933fed3f59a9cb682a274fb500a4fff9a96665a06c28781a2be9655dcd772f1abe0a5905df427a22cae58b3b8aadd46678d6bffe2da70427f25fea45d2f58caaa564824ca06476541855e84e7b232ec67dce32d48c8bb85ba83ff8130eed0e0a88731dd1bf303a7dcbef2675b13da4c45410d64bd209a81c75323e43c29116f0f6216cb6f79db40fe7e69c03eb6fd73e8c844cfe9bc8abf6e93b8d749bbf03f03cccf42af94d90c8b53b7c181c934e28bdbc20005d88482adcce43d06c656efcadcdd66c0351555908fbc5f04ff5c3a319e1490e04054840eddcbcd773b723cfb98cb0cf3d6c02395f1da6bec143f70b00eaf3c695fc4e2019be9515eb3bf21ee86434ceccaa4f2e8c437162748346a941c1261ac2317c3c0c244ddc06f5e316b5097178658879755efeafe91cbcba8cad2b6a31d502ba898478942020ba782b205039af79d6ec5b21d1034e44c4047723c07be233e19d1a6be8b3661a11b43bab2bc458de3ba3d2a4b2f52ee8cc4801471dbf80e430236cd3f0ede1a3f0a15ec1e016706e567df869688e7c1d3e6bee7873c6d778f1d1cd78fb383307026b347878b9ae53ddd673f9d7c7baa5c4209078464d9806f5328b6e0a60d848b17674ba63512de1ace2b6547aa70bef6c5df143e18c47621fe59ddcc51b357b12c4b9cdef7da03c4d6cb38e5343aa22443a6da62052fe349b48b0ee3356b5711e8afe889447587fb85c0887dcbee7074437b4fc7c2f2bd3aa53bda64d438c5a58509e25bea3b49fe8678b73e24e006848115b39e0f79b5d0fe970d38f9bd512ad889ffd6bb9beb43604dba0c02ac37db5a46c9fef04527ae3b4b04fc54699e81c17daa98b823d9d8bff37e198d17c01b51706e5f8f9d4c7116a183338501bf7b35a2c6cea667099406051c57d0061b0f03ea628883276c49ad851d7d72a50e2bba6796181a2a70d9c5fb26c4052692d8768fcea04c5fe1923012932f95deeb6aef34bd00425e5028b9f8e8626f715969c89278b859f3bfe6c1021436b49b639520fee75c967b75f1c551debb19229bea12b02770d5563bfffbd353db2951423e74174213d5fc52c57670f8e9ac78749eb65422aeb604d3a11bd28339ac85776ef191140587afb8c6ad8aca4938c10279a41abdb147b6486879df2509e6ed97b2d51f9671873343061289283bcb547d5dac945bbaf38ebb1f6846bb22ec3b029640b265f19571a2a6fc040f145474699e7c995ee08af8d062e4ffc3f556a377adeda7dd4e85f832a770932b8fa76105c0c1319aff5772d12f3e3e9be564f2882c57bd68ec71f90717d83d56863572fd58d010ff58741a20a47a69af99f33abc2739114c0d936da66375fa0678ad4e208400b7339be4c182e9e994d4f7f497efa5b18c3f5624211d5d7172910ce6b4a90dcd5d2ec589948466ba5b11e3ea61690ad20989720c2c3efbbf83102f3b7ab2bcd283c0557289b6cd0ff05bc2e6378782f19ae304e3f2346827a6271f925365c5a78d22854009be3795d8bef1d0bb631a0f1369dbe217475b2558fd4ea732f9f22b958442f27515a686cbf9e86d60b2b7c4fede2265da0dd209069591fe7a980f8ca41d7133a4686490f5855c18b8c1f0240aa88a753482feddb8202d1a5f40c90d2134a538beef81ac4722a30f5539aa7d29d7c54ab2033fca926829a1fcd694d7534abf71180b5925e20612bc72b2aaae0ee6a6ee1bc1f6cda2a5038439b0cf178679aaec83cd4569ae3953df9331172013ea2092e469114f622574c4889664c32930ae5b042d8230ae5caaf704b8b4d01d624d381de463eb61e8b402e7ed79ccc78e9999a0e5e917e7a2275e24a9904ac8ecbff98d3d90ab9e225d3a31bfc78f8e23d6b581cd21d87f789750ac448a7012418fafd455d1371d6031c4f5168bf3db6eb4ae02ae9ea775edd6bfc4f20dde698fcce29e5f35f91e74156b19cc752c83050c90d77c5211f4fdffdf6dcca8f3fa12d5483213134f94fbc6a5ffc6b4088e8a8695cc67f0fa250bf0ad174d0695714167cd361a46054fd91b48c082d62ab052d77152ac8e93b6a847fe8e8c31aab744a1ccdaf9ae08d37fc945d2b953a234ac713948cf1a2edf11f93ddc09715a8df9e66a92d618574da1d78e5febf3dcaf9cb90b16462ab7fe5ecc3fd0e0a2e931e49cdcd20fe9d90a4cd199f3f89e2b356945156eb9eee84353fcc5ba0879cc8ed4fcbfce235bcd9c6665394348e3a58fe132a0ae297bef58186aabe47618e0ad7dc29e0f89eb7fd1255c38c5070a152adb28b4127fdca4b1e4221282d84b30dd44413666eeaa06b0ce7bec6c760fe0a54aebf1931ffb8763f1136409376d8ccc9b0c033c8682256a9560f0b6c1a4806ad7f2729d336764b27815856145d52d2eb01584eb4bc16eb79850e8e34d16e9dea0728eed2279356de85ed16f9cc9e1563947c6cf4dbfd75921eb01efa9d9291eda10b76d9839244e2bb0a5d8b57a63c4021c7b5d3fb98a8eaa0ff73d5aa9f188c7e508fb8b6bd81deb4777827d26b30032770be40ea0521d116e713c5b3065a8b5a48bb47d3b28f4d14c2efbe6b1fcf0c195e90549ec34c5e8f76374aee0721320f82c7311b53e1293a57cd26295dfe3fd83163e4194dd73c9e5a880a3c61f0cd3d5203fcba70cb0b6ec609660dfc3b0ef78b4919f90e60be355747ad77f53cf148acb36515addd5f01dde3985b336d09322a67dfc479973a7b7aa40acdeceb06da545c9c37cb9b4191889738e84033ef19936e892524186bcd8aa641ff589f214e25a0082587fc70b3dfd24340f311c864cf17645a52c83e97bbcaeeeeb919c6a40fd82f130d3619391a4d2e5c6f19761ec11fd5ddad3cef719164587407631ce2a7918b260ec461967446ccb3057135f87fc6e896c8f2b9acab327f3e298f6fe0a3deeeceb23dc3cdb417773f081d918577026cf0f3a674f368fa972cf5fb32e70fae349b80dc410ed795cd7d7345c743270f985ba9c733930bb86827eb879a29b0043617261c59afa8eb24cbfafd5bef9a5d151a9cd77926f93a3b8dc2ccc3d7f5870e5cc9a7860a87ded4e24e5baa6860e8828ffcbed60cff743f3b73b610ad787ab06805f88d12e250dc4394bc958bfdd6b8260769730b877fc20655268f8ae0d37ca14c3810ac02d71db2b184fe952f3f873965f534c718f7af977ad9db325d5af619e95a125a58750c6d716b20e7a8e79514e0d2efcb2b947c921f3ff221fa86ee81d7e383900e4cfe6e057116c361492063785547aa3dec1df97aaf0968b2f97702f4f9ed73e05b5ab6b31cea4d7262c41c4bd593df4da13066154fe131dcbb2d4211f9088e728d712f4d5178418940abb5be9039dbf00c8b507c86824f490b5404431fb48964f9d71d64f34d27ed1dcd34361b1b83df722a345012332f27616a3b6f5a8e80e2ddbfad051296a0b48ad3f911df893b800fb34fe940a1ba13e72c1b85858c39e6558db04382cf7bd0ab33ce05698d5c7563788c16ee8c46c33551b4d48aaf4aad40e9f8d67740a46b9de73212d93eb8ff5a7e7a608fc94bf7001f31b6e01d04e49122ee03bf6d64d5b8a44c4e04de05eb1da928188d8e195809ca41f66b4ca1d0ef3c7993ecd995055802db5cb86f6b933da7ec5c540f8b58085c1288543c80ebeee96cb7157564a9be80a0983eb7e235de26b90b467631c25a8b3e3a1f2eabd5aa5f2e78382243580f64ef07e11598d7f1340666ec88ca81137a3db8877d8e7c001532448c9567184b7679d93c79563f21648d10de265a446f2cc2cd0846e3de17f219409370ff60346f5ea2238d343e06d85993cec6e048523d827ad5eb24b2d6f5fd1b6db9e9174ba311ced1e36557a1319b0f5c77ed2d157af802c9e5216c6a131b1ec9bdb039af2b6e1e946d28975944ed5df45e887514e92d439c65da57cb18c06dfd75a35e7d2403a37ae591dccabc15cbe5808f971216e9b43fb52e3fad969f00d1c303b47f1ee1cc123c0df25febee44895edf514ffe9fa7d749f561477e85e04723cd77a19065d56398efa535c8142bc78177b715ac370606bd8ae95b49b1e9a4c59e3c14013fdcc8d300688b65b633330febfe806b24f1c07f8713cbf6d90953a664e2daf40c587b57a5c04d4d1825783b1d4b1ad576d2b55413a9465858f9538ee35d4fcb2e4ab14476f45b88b0df9ba9ad25d76cfa326e003b7b3e0d62fa2e0cfb7915fdec3f9372e0d3ac165370fc5b83a65741c9628e4841389366bbeb35c532c7999fa8c072d925c22e93babfe30d91ebd1b796dbe65edd4ecbbd8ea77a9fd0fc3e558e3a4c979915c60be889e273e97e8adf5ce18f1a7b24122491cefe4bb6e985961e4347cf67cabe9a1f39fa99440ece0232cede8b66c026f9ac1cedf0956f6adc5322407691fa56b97de1c53f416b41a595b2084aa3d6663e7296c32edef5d057930e1ef055dfee37150f731d9fc6a126e8c75e06ad81fae73574f4a5b63683042d52830d5922c466b58114ddbaf1e2bf7b44f1629980052c051bf50910c8b571da76d63db16a775ddc47df5d98cdaade2fb68fcaab6cfd00834bae161a9cbb31913d931eccad97c822ec24bd97584b8428fd2eab8cc0f396aa25527b069f509d60679e327698030df7cc0204a134a4fe95dd3550f1fd04fb26988cbe301b61e78fa3ab7e2618a015f4524218ee8ff75e82df679e19f7db94fb56b88d477233c561391d4002b14853f51e62ac8ee1030b4c4144c665540366b8d1d23965c4c9994df75786db347aea53a7b8e1b69d93c2dec594ae4987c267d8e6cf8f70a4fcd84dc8859779edf4f62c1caf9ad4aadba5a5cab14caa9d831f72c034c4488e01c699ab19a3cb1009bb806344f5cedaaaaba6f7f159b916bb872d3d89d84d3c6f250e1a0f424a907dcda46ff9a788c94262649ee20b16b766579decd279297c5c441f395ae6e682f316e9ef85c3611dde311162d0def9a17fd637440190e3e1c31718a17a4698d156d5e98441ce43561c6fecc7652de6e0ade39fd80e706a34ad3ee27cdaec7d6d6e9bbeecd1655d56e580f7ff300d444b9ae29e9c44c9538621f312de5d08d01509f499650568b65d4bf15daaea91f228dd90b43703f93c462fc5e3a2bafee6997c21732df3d6ce1dd3f1c0af8af09789b9c2d52a52996db29a05597b457d6fb595b85c95cdd86e0d89fe8263d9676b6bb16e9d0b092a333c6003bbca22ead2b18cc063c112b5b7c4944b1004e83fd93fd1280711acaeca3efd1e3ff9d776cbc24f2a828a8c900f44486d4de9d0cee44c6da8d66a2a0c3ef2ba91938e8119e3b61afde217d64596075dd354a7bfeccc56d3175976fe1adc5f6817f00d0de58dfe2a9da6b8f2f538b74121716a3bbf72833e309408b6a6ad126c948610f3ca3e15f2ec251c42106b257ae986d4012d5d91d3fae20936afeefdb938091c0e215929305a8dc35dd2cc023fd1e5df11f886a027e1ad45095f92934377114fff33965ebc4caf1098356b6743280487425d2a2aae3bb9cc1c39f6da8c14ecac998de132533d448f121f4cafcb4334430b99053400b8f3597ae1dc788564d48b3a19894f1dfe6a9c5089fcaefcb7c5ad82bab67012597c60b71f46d18625236300c0fae8a746050d6ff1c3af9e71b496f142e4e832b49e0f5f6c73b2b9f0e1f0beac2b450243b30170e47ad8d8312fb8aa1ad198a96781294ac264a510c16e35dcfc0a083b1719a66d83e107d110854d5e37eba13fa98f02aa046eab0f7a270e4f55109da9ba92baa43bb7312a23bfe68b4eaee8e0d7edbe06c5c79380639d89a678fefac1849cef96534612abf019091fc85f773b539ba8efe33ce24137efe6749583c650068da3275d3e6e55b7bd19306077aed4fbcd62b10a4c76d6bf1639704271a52623563217c14c380de0d372e75e05f66d2e60b0f60b6f6ef8a6989efb96c25589bf5424860a0fa4e31ee723ee55c55067d0491f40898052e6b610b7e28ed246fad9d39d6871eae42d2f651c01fae1e9747843b1c0b925914662a62328a645c6c66e1d60d6c46df7b0491de1fefcdaad2277a9d2b8f414e6989a6ab0caa1867c80378c541c31c9015f4ebb6b516e93e864161683abbcad7fb8ff1575b8662fd906fcb94afda5fd9fbb1d313fa5509942d57a314065ac9cfb944afa0f8db5210d8081235985c51dc5e9a6287ccda6579e624fc994a0be456e9d1278d24d3a9f7959eff32e81dac64ec03ea07bdb95d02ac1926b9a70d09160b9641039abc3ee2553fe4c322f766628dd90db5e836ad59b2af0ae5af16c1e7245feb5d25c17ff88c9450b31b3cd4b526f522ee0605c80c737aeb52d5ce694f29dfc71f29a84db0e786b2e1edaa788292fe3e387933c02f8d82907f60a402c9e545f76eb424f4c43abea6746bc7681cb1e66be6cb86e0a59c8536c8c8e3104b969764df1e6cf75890c006a1dd2cbc09f53e0d3778748b052f5decb705873da8aa311cd63c421b637ca23466208f542b25fec3f060fa5b4b29f72e57aa0894160c65ba8d7b4743f81dad2a0b74f6eaf420c57da84b43d73597fecacbd3d6f5f5d849c47ae15273d8c6a79311b2f960498f2e5a959eb4f79847a9d5de876ed2632bc4209e3e02df69b85f634d9ff93d44ced59e3c2175878d72a8b952daeb348989198561c4fa3fbd9ebbafcc70ab624596bebeec4dba912df67a34e5869a0a8d93e64fe7056930317bf0257a10715d880294e3bf241dc39dc38b73bb27d79f1fa4dc67a273772be578412133f20f7554def7ce8a00e89ad587de78b737fc50e196780aeae8a89cb7d2c50dd8b0ed9b4e4468b756b21ffa439c1a379b484781f3901dec4e502f23e01b9fb5917508ce09da84c79df4b513972c42c8c36f07c40e7fdbba0a12b69bfef977cc8f368bbb39a6a93abd2a6bc5b3a079020f41776486992924815fac9865e622d2e45aa5064550e387f2959faa047725206fdbff26c93d9095dfbb5eac1811df9a946e9940f1cfde3df55865cfb2169bdc399e3ea20c8d1f4740fdab3f2a4ef5fc2e5bf1c43b5c3ba5f1c5699fcbce952a9f3202b4aca3aab39c3f160d8e917ad24c642093fd13d9bcd69f6a9a2dd1991ca2d3c1088aea9d79c11219d7172b19e1803bfb63ec453560ad505570c90dfcaad43866b4ed251adcca4abd22543861989acbbc823133e4b555369453c1b4a533a2df092cd245b124d2d72563a6c5302496596aa205fda5e56ce960e3ed80976b3c3d1f32a78e497c622173b62cadd21d9cb6d517bbab831be59205dddccd21d79679160a02f7bf63c11b53df9a3239dfac23572fdf54ea4a04219b51fa467f0a149542fcd992dc9d76cdf7b90ee5fa4b5c343aaa6a59cf6afd99eb74bba272edff4fea38c2567f0021bb76bc25a74116fd15e5f64de3a9848dd86bea0a2fa7f219be2fc0c9b636c3cb28f5b36dcdb6a17627eea7aa624544eab116e5221b2f5ff3d6e900303614a6ce3d8cbfa5dea415b1381019ce5bda29a6304cdef0eb2d648915b0372bd2af13e0533dbc4811d7b6e0e68ba733790a8db968f76a89e367b943e0afa2d76906e841b932f534da041cb186b1204376f510b5775c6d2d516ba704d2907daf1ff83681adab011b78048cd5171183857c2435b1955a9bfb509a897d4965e0e341c8aca47763dca2c49ae076c991a15b1c3b28d5ea0d58f1c2571a1d2131c600344005d960a8354ec3300bfec5cbdabe67c40b233415fc1a0875ad1ec812d518a571f70e179e85eb5fa55bd6349336902dc2484682aa572337f4fec9a7b3830becde4dde9954818460aa241cbe95025499124ab267f920cc8262ffa5aa57953b69a895594ead58aba7e4aa28d8a2118eadff868a8b726e098dad14f44aed917bce10251f8ec16d535072bb94e853d604fff66097513744f5b405b96a51a6ef7b1176ec2de6b3fc7a74d8e2d0fd719c778677435142956fc69af3ef04508acb403b62564f3d762b664633398d8761cabc39447325bab0ce2aeb7fc0be150430b693a96dbaf81a9f8eae1fee3241213a52a13d8217a1d71a074716a79d093da0d8e5aea0ff6b9734f48af4b2c3e05b22725986002e0d358c63f513a4a96a8fd0a4c43544e557654ba96633487f25a01c7d4b38ce9d15bab26e8850c549a6522d2a5a264f16b67aa61c6014a96370048f3789eaf551dc59a88c841b7ae19d3556d72043bd88b625158f81e80852a5a848f50d5595878f744df6d551773fc60da04f10b9223e62f34f34d5b459a996dc215460bff8019888bcd556aa270cd78919287bb245ec967a40081753d9386444bf586b7b413a1d879dee97cfd691729c4568a831989bac9873938ac04dce4aedb3925aa36e74bf6aa4439c06c951736c01d3e763586706c46e48b34c5d2773dfc02aa193fae9059b14e5499c267dfc9869add1014bb3e3491926ac34274ff324c766e4e61f2f565035cd486b47cf52384f4dfbf22f4146366a2e7e30ca417be008af3d9ad9036fdc1cd91c28649b4a447513dbd6e5febbfe685c6ac53c4741511c1551e16e63eb7ed28e6dd564f1f374286e7596f9aa6ac38c57a1003d79ff35fe6fb261826b21f944e87aada798c05120129fa56d7face5a2003526c2f48e10de2ec6e2946ae04a76a64c49a504139c412f82fb8732360490ab5c4f9679dd2d7d13566998507f8631b2121b0e102d1257977eb1564f786155ad13e459c5138f26b632598f9866f1d9bb45ff4fa12d2695c14e5814ee09078d804b8de304480554714e050355a15a341812ddf20a8c3b907632ca1c74a244354d1755318da45877c51e2c404b1d837764098129a99bb7660f4cbb8427729776bdd5960a2693703d9d9cae56ddfbc5471a4d38510e0cc72295c672cccdcdc9bed21c6e553bd8acfecb0c9c1dc1ecffcee0d1c18bdf00d7728e54309b585fefc56a4a3bebb509b32f9ef441c717233c8307b14f40a70a21ee0e8d53b0846e72def7e9ca62b4f00cb5cd09280c7cc7369bfbfa9dbb6e5264881306918846ce41f35d4baf7f0010eb39ab993dfd9d2f1b88f02066eb533891090ea93f46d31f444058bb5dde09cc6619ce72fb4226973ca18e053b3dc387bbf00190eac70b163f22367695f5dc0c49ccf7750f1ef725dd8cdf90ca58368d19f7454bc882da1bea2c9a8c79c433b9e2810f2e18163dc0c21246dcfae9300cfeeb835707187c986703bc27320dffdcdef4bcca29386411977fde5df0d6f85b96f453cf04d33a59f964c3f9b817e57ce884f92a71e11aa40e332f574b9ab1d8eab4513b72d7572ceca460683bf91ba58dd46a059b3c1a247e4d0f3cfc2937ef8e6bc43bfeb07834a36906deb8a4afff0e7fa5285f38d01ba092336abc5a39b22f7f732baa37950ef671a1476d129604be323d725954c4b7b3ac03cc6069db8065ee97b6f964e7d57aa1e701e340664358aed548b82f8fa25daae2a52b24fa564070299877a81efa34d0a34a3e072af3b9a83750243a31354f1fc2239bc2721f791ac4bf29a2e76d2bfbd16666b84700ca237caa0b1bec4a1f64a08e79aa2df81fcf3f8b9e107017b2a4ad6158dd1e16f7dd40b778b0dd99f5c3530fd098ed277ad22e5fa5607291135b3c4e39939b11fdb124c56dbb63c29846568636f036e333fa8b8395c170e174d0f1028279d180363643a8b204fee3bc15e730619c01c0e0580d4d4db9fd1ca5b35bc9a17126a2734dc89e683b5e8cc03bef85ec08cf49595bc7de5cad230adaf5e6b088c9df240da8e99c082a63902ed4dbb9fdcea9bf5605152e1c20475196331269221f767bcd332fe33b5b57487f50597a869a77679d9919ec296e0ec112dc448667e461ace88defaa2bd14096adba8377b77494c0db08f94df301de0c0432f0d771f27d63702ec6dca62319072ab7ec2905c44b2ac26ade964863438aa2f52d343b5477f9083b264e2d4f1d89ab419af4977410fd0fc6b5fc2126bafd09113a75f48933aa63ee8b5075f7ab7a30e7af555cfafa22cdb10080596d2baadbf61360ef02b021150830e90e830f19ec8a9bc360119bc7f73649d627e06ca585a6cfd4f4cbff6731eb9ca26654d2bfd9a54dd76fdfbf8dee9e2fe30bb67a4d41c9dc47d84b3005d0aaadd2692782db7f7b190263aa150d7e0b3e8b93f243b14f84870cd6be24759ca11ae07ffc0c2df5e5e76b0058abb951cb284a06f4d476d18b84037542881bd0dfb846d1a14d8f44aca15b9b09e6cf2b99917eab13759b477922980153444864939b27a3ba563e1e402b1999e87cb09d6ba8de79c85d26b8ebbcca43497a2654a352cb32cf61ec514bbdc899db8559f6a5dd4bb5db91609913ec8ff65045e33e508022a192e71db1ce4615a620ed70bb7ff5572601e594e950dc25794131eedc38f47068a285445a14ec54824eddd80d74a8d1573f11bc1ac2f5f76ff28e8d68367635e6f7e43b8a9dac91aaee51d1f34b1ce75b3581e7896dd701724ae8105c4fd01e9020e643da2a3fbda54447f87734df77d1e228c99204aa196247b46acbee595dcbfd3e31674ef7d6125b9f9bf859c0178454caa2856c1fc5a1d9babdad174fa37e602e09482ba1e469516fdbe8ec76249b437cf49b821ae14b94c981c5462ffd4f3e9a588c5c67c71414f5c023832d3884a098d60036322d28f5435bfb4587f517cd255fdee71c22010713a2522cd4b14cc8bf85fd451a39cbdbd48e295a4f78dd8c22ad98d6698238d9ca4c18e845be95a162ac90917e8c973291788c28c746d2f2855c046a301e8f299643cc8ec9ae6f8cecc3f2a357bfabf86fb2236c25741aeb1364e44a651031205b48733863e1c3555ff033f00b2729be8c00233d46209549e77a650a7f6cef259d6562e0cfa18a4fc8fba783215282d779b9856d91ce1a6a54cba4f773fcbc5989097429795aa8be4bc842e6229544eb6a773fd81cfcd63fe06dd6e5a897ad2b52d5b757df517e7126a3eb04fccf7f3886fe8c87e887fd1d11c5ffc5b9cb4f8353b66d15ba42afb212b37058c20d35a56ddb795bbea9ceeb4ef8aa5c351ae3aeb1a9a3de8ebffc0767767bc704d4c2397e64764bfadf961e0bcdee49aa7766f645b221af39b9b20a5ea7922a24f082c6acc88981659cd178ca34ee5ef088cd4f9364c05eb6bba6e7bc587d1f3f8b6f2db36f67f849c5a4fcfd6789afe5721a2ba6b431bd6dea7c74710ab516d38e6904428b81d5734ef10062a21cd68190833b6d9701601ba297a5acf74cddf9b3f387c7cf2d4aa1c661e6572386e763472aa14a24fd216991ac451df7525726bad213bd8ab135331f0093889304d8441764d2579aa2c67ab30da5cdc6ff8dbf626a8e4cca6bac0e4439348ddac9a252b071a44d09b54c22d033b1f5c13da4bcddc51eb6fbbffcd7439b0fe180719a88eaf570b66980fbbddc04f73700b9c9d8fc71b785589e19d8c7556ba756dd01365f9eaeda764573648d692bc720347e66307dee4bfdbc987accc88f35aed593af102209ee1f95be2d8361eb2e0e8f9b0b46fcae385f39d4ec6034f99cbb818e912df8b36f9a1c27385322a59d0d75db4473b04f20806d8017c1fd0e10c85e5ba0353504947b5c6a48d2df05fef8462c1cb62ce8d950265dff365f335f1c2b539e21bb03b177734cc0eb9b9f0ef37af9d532e0f8c46ec8439098117aad0eff9cfbcab8b85545612fa480d7fde9e3099744a2126a72937072ed13d7c34fb0291fa0672e6a6a6ddb4faa74ffc7170708633f20e1c2499d5a7a66b1264186bb83cb63ae5a4d7abc4f42f9f5bc4046d23d099879529f01c8758533fe9eb3706d42ecff75c97c4bd119c8b23f4cd19a4a0479c38ba41acf60b42f7641b2a18606d8535bd0121ef6b5efc26afd8c08060ce5686b6443e98dcca0b4010e2639414ac2db4a133e343c8307f98759c9de37bbf7d4100aeb4ba34ce38e30e5b1d786f9c819f83b740e71f691db1852edbfc229f996345eb2a10406021d73a0a811be93dc8b42ac7b00ef5d15de93e9ca38f447f03d3e9ec95b1eb542f3c7b7a6c871d30d71f7e24d5cf880c55e7d9151e65d0d791f19fa29920da3a3e2c67b27a5def3950d6028d061e97554b1dca0605139becaf7ca4f28be106bc61dd47da2abc79495c5dcbce1e3bb844f46946a41fa725ec37a819410966b113e9d3f81668bd69007d0fa2e34e2a8fbb30b6f7289afee37358c776c696525e8a81ed78210863de59b75c6fc0da7ed928002a43c5620803b4567e11d70ef5aa99e97bd286b1674ef962a7bf71cdd217f7b74f7d94ade9a1681e97aadd52eaffe0e3bde70d77342743d32b4d1bb11e27def553b6a63dc1cd91e9b0085513967dae6f7ad0fb66a86461e86d290c095ffadbfb9046b8da2</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    
    <category term="CTF" scheme="https://blog.minhal.me/tags/CTF/"/>
    
    <category term="V8" scheme="https://blog.minhal.me/tags/V8/"/>
    
  </entry>
  
  <entry>
    <title>2022总结与展望</title>
    <link href="https://blog.minhal.me/2022/02/01/a4799542133e/"/>
    <id>https://blog.minhal.me/2022/02/01/a4799542133e/</id>
    <published>2022-01-31T17:01:00.000Z</published>
    <updated>2023-02-13T13:49:50.458Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="888dd495b3302375e1ec9e1edaed86d6458a592c0dbbab20a9f717b9dc769129"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    
    <category term="小记" scheme="https://blog.minhal.me/tags/%E5%B0%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>GSE协议封装解析</title>
    <link href="https://blog.minhal.me/2021/11/19/fe1a016ca798/"/>
    <id>https://blog.minhal.me/2021/11/19/fe1a016ca798/</id>
    <published>2021-11-19T03:11:27.000Z</published>
    <updated>2023-10-09T11:56:43.431Z</updated>
    
    <content type="html"><![CDATA[<p>GSE协议封装的学习笔记。</p><span id="more"></span><h2 id="GSE介绍"><a href="#GSE介绍" class="headerlink" title="GSE介绍"></a>GSE介绍</h2><p>卫星通信近几年逐渐火热，目前的低轨卫星通信大多数采用欧盟ETSI的数字卫星电视广播标准（DVB-S&#x2F;DVB-S2 &#x2F;S2X）并做改进。而通常它们用通用流封装，因此，在卫星安全的研究中，对一些数据的解析需要对GSE封装协议有所了解，所以近期对官方文档阅读并做出一些笔记。</p><p>通用流封装（GSE）协议可以在物理层对IP和其他网络层数据封装，在通用流上提供网络层数据包封装和分片功能。GSE 不仅可以灵活的分片和封装，而且能使用智能调度器来优化系统性能。不仅如此还：</p><ul><li>支持多协议封装(IPv4、IPv6、MPEG、ATM、以太网、802.1pQ VLANs 等)。</li><li>对网络层功能的透明性。</li><li>支持多种寻址模式。</li><li>可扩展性</li></ul><h2 id="封装方法"><a href="#封装方法" class="headerlink" title="封装方法"></a>封装方法</h2><p>PDU（协议数据单元）可以封装在一个GSE包中，也可以分成片段封装成几个GSE包。而GSE包的长度是动态可变的。GSE包可在不同基带桢中发送，基带桢长度是可变的。GSE没有独自的完整性校验机制。通常一段数据碎片化变成几个PDU片段，在最后一段加CRC-32。如图是DVB协议的GSE封装：</p><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20211119115001.png" loading="lazy"></p><p>GSE包的头由固定长度（2bytes）和可变长度组成（0-11bytes）。固定长度主要有S 、E 、LT 、GSE Length等字段，可变部分主要是Fragment ID、Total Length、Protocol Type和Label等字段。如下图：</p><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20211119115136.png" loading="lazy"></p><p>每个GS流可存放最多256个PDU碎片，每个GSE数据包的头有一个开始指示位（S）和结束指示位（E），开始指示位为“1”表示PDU开始，结束指示位为“1”表示PDU结束。如果都为1表示是一个完整的PDU。</p><p>而接下来有两位标签类型指示（主要用于寻址）。标签存在时，接收者可以删去标签不匹配的数据包。当为广播包时，接收者都应该处理该数据包。标签重复时，只有上一个GSE包的地址与现在匹配，接收者才去处理。所以标签重复主要用于同一个基带桢中。</p><table><thead><tr><th>变量</th><th>说明</th></tr></thead><tbody><tr><td>00</td><td>存在一个6字节标签</td></tr><tr><td>01</td><td>存在一个3字节标签</td></tr><tr><td>10</td><td>广播，不存在标签字段。</td></tr><tr><td>11</td><td>标签重复试用</td></tr></tbody></table><p>接下来12位表示GSE包长度，最大2^12（4kb）。注：End包最后包含CRC-32。</p><p>Fragment ID只会在中间包出现，同一个PDU的GSE包有相同的ID。所以只有一个PDU传输完成，才可以有另一个PDU使用这个ID。</p><ul><li>含有同一PDU数据的GSE包必须用相同Frag ID</li><li>第一个 GSE 数据包的 S 位应等于 “1”，E 位等于 “0”。</li><li>中间PDU片段 S 位和 E 位等于 “0”。</li><li>最后一个 GSE 数据包的 S 位应等于 “0”，E 位等于 “1”。</li><li>一个 PDU 没穿完，它的 Frag ID 不得重复使用。</li><li>具有相同片段 ID 的 GSE 数据包必须按顺序传输。</li></ul><p>Total Length这个是保存PDU的总长度，所以通常在PDU碎片的第一个包中才有。总长度最高65536个字节，CRC-32不包含其中。</p><p>Protocol Type 0-0x5FF表示Next Header，0x600-0xFFFF表示 Ether Type。</p><h3 id="CRC-32"><a href="#CRC-32" class="headerlink" title="CRC-32"></a>CRC-32</h3><p>为了防止PDU包的数据丢失，所以在PDU最后一个GSE包放入一个32位的CRC字段。定义的CRC多项式为</p><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20211119115151.png" loading="lazy"></p><p> 初始累积器为0xFFFFFFFF。然后PDU的字节、总长度、协议类型、标签、扩展头等计算。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><p>Protocol Type定义了扩展头，扩展头属于数据的一部分，所以数据段的数据结构如下</p><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20211119115152.png" loading="lazy"></p><ul><li><p>如果有可选扩展头，跟在GSE头之后</p></li><li><p>如果有强制性扩展头，跟在可选扩展头之后</p></li><li><p>PDU跟在强制扩展头之后。</p></li></ul><p>上面三部分都不是必须有的。</p><h2 id="解析流程图"><a href="#解析流程图" class="headerlink" title="解析流程图"></a>解析流程图</h2><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20211119115153.png" loading="lazy"></p><h2 id="PDU分片"><a href="#PDU分片" class="headerlink" title="PDU分片"></a>PDU分片</h2><h3 id="首包"><a href="#首包" class="headerlink" title="首包"></a>首包</h3><ul><li>S 位设置1，E 位设置 0</li><li>GSE 长度设置为计算出的字节数（包括数据的长度和片段 ID 字段、总长度字段、协议类型字段、标签字段和任何扩展头等长度）。</li><li>将 Frag ID 设置为一个任意值。</li><li>总长度字段设置为计算出的字节数，（PDU、协议类型字段、标签字段和扩展头的长度。）</li><li>添加一个协议类型。</li><li>添加标签字段。（如果需要）</li><li>放入第一段PDU碎片数据。</li><li>GSE包放入基带桢</li></ul><h3 id="中间包"><a href="#中间包" class="headerlink" title="中间包"></a>中间包</h3><p>（如果PDU分为2个以上碎片时）</p><ul><li>S 位设置0，E 位设置 0</li><li>GSE 长度设置为计算出的字节数（包括数据的长度和片段 ID 字段长度）。</li><li>将 Frag ID 设置为首包设置的值。</li><li>放入一段PDU碎片数据。（按顺序放）</li><li>GSE包放入基带桢</li></ul><h3 id="尾包"><a href="#尾包" class="headerlink" title="尾包"></a>尾包</h3><ul><li>S 位设置0，E 位设置 1</li><li>GSE 长度设置为计算出的字节数（包括数据的长度和片段 ID 字段、CRC-32字段长度）。</li><li>将 Frag ID 设置为首包设置的值。</li><li>总长度字段设置为计算出的字节数，（PDU、协议类型字段、标签字段和扩展头的长度。）</li><li>放入最后一段PDU碎片数据，并加上CRC-32值。</li><li>GSE包放入基带桢</li></ul><h2 id="封装器调度"><a href="#封装器调度" class="headerlink" title="封装器调度"></a>封装器调度</h2><p>GSE封装器中的调度器，在基带桢中是智能放置，以提高效率。</p><p>如下图，PDU1、PDU2 和 PDU3 构成一个 PDU 序列，由调度器预先排定。（MODCOD 表示PDU 相关的调制格式和编码率）如果 MODCOD2 的效率高于 MODCOD1 的效率，那么我们应该采取 MODCOD1 对应的才会更稳定。PDU 被封装并由 GSE 封装器排入基带帧。</p><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20211119115154.png" loading="lazy"></p><p>当 PDU 被分割时，像上图 PDU2 ，剩余的 PDU 片段被封装在一个独立的 GSE 包中，在下一个基带帧中传输。如果没有利用智能调度策略，PDU2剩余的包与PDU3的包封装在同一个基带桢里。基带桢不得不降级。而如下图操作，能实现更好的系统效率。 </p><h2 id="后记（2023补充）"><a href="#后记（2023补充）" class="headerlink" title="后记（2023补充）"></a>后记（2023补充）</h2><p>在实际应用中，卫星数据流可能受多种因素影响，可能会遇到数据丢失的情况，这对于数据解析产生一定的影响。我与朋友针对这一问题进行了探索，并在<a href="https://www.ndss-symposium.org/ndss-paper/auto-draft-409/">SpaceSec</a>与<a href="https://www.blackhat.com/us-23/arsenal/schedule/index.html#clextract-an-end-to-end-tool-decoding-highly-corrupted-satellite-stream-from-eavesdropping-31622">Blackhat Arsenal</a>上发表了解决方法，欢迎查看详细内容。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>本文主要参考 ETSI 官方协议文档。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;GSE协议封装的学习笔记。&lt;/p&gt;</summary>
    
    
    
    
    <category term="satellite" scheme="https://blog.minhal.me/tags/satellite/"/>
    
    <category term="protocol" scheme="https://blog.minhal.me/tags/protocol/"/>
    
  </entry>
  
  <entry>
    <title>frida学习[持续更……]</title>
    <link href="https://blog.minhal.me/2021/04/06/6fb8ed7e4721/"/>
    <id>https://blog.minhal.me/2021/04/06/6fb8ed7e4721/</id>
    <published>2021-04-06T09:11:27.000Z</published>
    <updated>2023-03-18T09:56:01.200Z</updated>
    
    <content type="html"><![CDATA[<p>记录frida学习的一些东西。</p><span id="more"></span><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>kali2020</li><li>小米6已ROOT刷入android10原生系统</li><li>python版本3.8</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h2><pre class="language-shell" data-language="shell"><code class="language-shell">pip install fridapip install frida-tools</code></pre><p>也可以直接安装对应版本</p><pre class="language-shell" data-language="shell"><code class="language-shell">pip install frida&#x3D;&#x3D;x.x.xpip install frida-tools&#x3D;&#x3D;x.x.x</code></pre><h2 id="安装server"><a href="#安装server" class="headerlink" title="安装server"></a>安装server</h2><h3 id="下载server"><a href="#下载server" class="headerlink" title="下载server"></a>下载server</h3><p>直接进入 <a href="https://github.com/frida/frida/releases">frida rlease</a> 页面下载，这里要与安装的frida库版本对应，同时与手机架构对应。</p><h3 id="安装server-1"><a href="#安装server-1" class="headerlink" title="安装server"></a>安装server</h3><ul><li>adb push frida-server &#x2F;data&#x2F;local&#x2F;tmp # 把serverpush到手机中</li><li>adb shell # 进入手机控制台</li><li>su # 获取控制权限</li><li>cd &#x2F;data&#x2F;local&#x2F;tmp #进入目录</li><li>chmod 777 frida-server #添加权限</li><li>.&#x2F;frida-server &amp; #添加到后台运行</li></ul><p>可以通过命令frida-ps -R 检查是否成功。</p><h1 id="frida-基础"><a href="#frida-基础" class="headerlink" title="frida 基础"></a>frida 基础</h1><h2 id="基础样例"><a href="#基础样例" class="headerlink" title="基础样例"></a>基础样例</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> frida<span class="token comment"># 连接安卓机上的frida-server</span>device <span class="token operator">=</span> frida<span class="token punctuation">.</span>get_usb_device<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment"># 启动`demo02`这个app</span>pid <span class="token operator">=</span> device<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"com.minhal.demo2"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>device<span class="token punctuation">.</span>resume<span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token comment">#通过pid重新启动</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>session <span class="token operator">=</span> device<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token comment"># 加载a.js脚本</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"a.js"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    script <span class="token operator">=</span> session<span class="token punctuation">.</span>create_script<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#上一步连接到的session 去执行js</span>script<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 脚本会持续运行等待输入</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="hook参数、修改结果（重载、隐藏函数的处理）"><a href="#hook参数、修改结果（重载、隐藏函数的处理）" class="headerlink" title="hook参数、修改结果（重载、隐藏函数的处理）"></a>hook参数、修改结果（重载、隐藏函数的处理）</h2><p>demo样例源代码。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>minhal<span class="token punctuation">.</span>demo2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">androidx<span class="token punctuation">.</span>appcompat<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">AppCompatActivity</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Log</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> total <span class="token operator">=</span> <span class="token string">"@@@###@@@"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"Minhal.string"</span> <span class="token punctuation">,</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">"Fuck U!!!!!!!!!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token punctuation">,</span> <span class="token keyword">int</span> y <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"Minhal.Sum"</span> <span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token class-name">String</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        total <span class="token operator">+=</span>x<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span> <span class="token function">secret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> total<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>把这段代码编译成apk后安装在测试机，连接到主机通过 可以查看系统日志。</p><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20210406172720.png" alt="1" loading="lazy"></p><p>然后接下来是js代码</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Script loaded successfully "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Java<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Inside java perform function"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//定位类</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Java<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span><span class="token string">"com.minhal.demo2.MainActivity"</span> <span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">onMatch</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//该类有多少个实例，该回调就会被触发多少次</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Found instance: "</span><span class="token operator">+</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Result of secret func: "</span> <span class="token operator">+</span> instance<span class="token punctuation">.</span><span class="token function">secret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">onComplete</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> my_class <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"com.minhal.demo2.MainActivity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> string_class <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取String类型</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Java.Use.Successfully!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定位类成功！</span>    <span class="token comment">//在这里更改类的方法的实现（implementation）</span>    my_class<span class="token punctuation">.</span>fun<span class="token punctuation">.</span><span class="token function">overload</span><span class="token punctuation">(</span><span class="token string">"int"</span> <span class="token punctuation">,</span> <span class="token string">"int"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">implementation</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//打印替换前的参数</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"original call: fun("</span><span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//把参数替换成2和5，依旧调用原函数</span>        <span class="token keyword">var</span> ret_value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret_value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    my_class<span class="token punctuation">.</span>fun<span class="token punctuation">.</span><span class="token function">overload</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">implementation</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"*************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> my_string <span class="token operator">=</span> string_class<span class="token punctuation">.</span>$<span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">"My TeSt String#####"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//new一个新字符串</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Original arg: "</span> <span class="token operator">+</span>x <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> ret <span class="token operator">=</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span>my_string<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用新的参数替换旧的参数，然后调用原函数获取结果</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Return value: "</span><span class="token operator">+</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"*************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>执行脚本</p><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20210406172721.png" alt="3" loading="lazy"></p><p>查看日志变化</p><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20210406172722.png" alt="2" loading="lazy"></p><h2 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h2><p>这个实力主要是实现在py脚本中也可以调用secret函数。这里主要是使用的frida提供的RPC功能（Remote Procedure Call）</p><p>apk文件还是上一个样例的文件。</p><p>现在修改下js脚本。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Script loaded successfully "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">callsecretFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Java<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Inside java perform function"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//定位类</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Java<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span><span class="token string">"com.minhal.demo2.MainActivity"</span> <span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token function-variable function">onMatch</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//该类有多少个实例，该回调就会被触发多少次</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Found instance: "</span><span class="token operator">+</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Result of secret func: "</span> <span class="token operator">+</span> instance<span class="token punctuation">.</span><span class="token function">secret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function-variable function">onComplete</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>rpc<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">callsecretfunction</span><span class="token operator">:</span>callsecretFun<span class="token comment">//把callSecretFun函数导出为callsecretfunction符号，导出名不可以有大写字母或者下划线</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>然后修改对应的py代码</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> frida<span class="token comment"># 连接安卓机上的frida-server</span>device <span class="token operator">=</span> frida<span class="token punctuation">.</span>get_usb_device<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment"># 启动`demo02`这个app</span>pid <span class="token operator">=</span> device<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"com.minhal.demo2"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>device<span class="token punctuation">.</span>resume<span class="token punctuation">(</span>pid<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>session <span class="token operator">=</span> device<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token comment"># 加载s1.js脚本</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"a.js"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    script <span class="token operator">=</span> session<span class="token punctuation">.</span>create_script<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>script<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>command <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">while</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    command <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Enter command:\n1: Exit\n2: Call secret function\nchoice:"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> command <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">elif</span> command <span class="token operator">==</span> <span class="token string">"2"</span><span class="token punctuation">:</span> <span class="token comment">#在这里调用</span>        script<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>callsecretfunction<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行python脚本得到下面内容：</p><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20210406172723.jpg" alt="4" loading="lazy"></p><h2 id="动态修改"><a href="#动态修改" class="headerlink" title="动态修改"></a>动态修改</h2><p>这里主要实现的功能不仅仅是可以用python调用app的函数。还要做到把数据从app传到python程序中，通过python代码修改传回到app里。<br>app代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>minhal<span class="token punctuation">.</span>demo3</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">androidx<span class="token punctuation">.</span>appcompat<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">AppCompatActivity</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">View</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">EditText</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">TextView</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">EditText</span> username_et<span class="token punctuation">;</span>    <span class="token class-name">EditText</span> password_et<span class="token punctuation">;</span>    <span class="token class-name">TextView</span> message_tv<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        password_et <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EditText</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>editText2<span class="token punctuation">)</span><span class="token punctuation">;</span>        username_et <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EditText</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>editText<span class="token punctuation">)</span><span class="token punctuation">;</span>        message_tv <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TextView</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>textView<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>username_et<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    message_tv<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"You cannot login as admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//hook target</span>                message_tv<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"Sending to the server :"</span> <span class="token operator">+</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span><span class="token punctuation">(</span>username_et<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> password_et<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>app界面</p><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20210406172724.png" alt="5" loading="lazy"></p><p>接下来操作是python代码获取输入内容，并修改输入内容然后传输到app，通过验证。（包括admin）<br>js代码主要实现是先截到输入内容，传输到python代码，然后等python传入新数据继续执行。<br>js代码</p><pre class="language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">console.log(&quot;Script loaded successfully &quot;);Java.perform(function () &#123;    var tv_class &#x3D; Java.use(&quot;android.widget.TextView&quot;);    tv_class.setText.overload(&quot;java.lang.CharSequence&quot;).implementation &#x3D; function (x) &#123;        var string_to_send &#x3D; x.toString();        var string_to_recv;        console.log(&quot;Script loaded successfully &quot;);        send(string_to_send); &#x2F;&#x2F; 将数据发送给python的python代码        recv(function (received_json_object) &#123;            string_to_recv &#x3D; received_json_object.my_data            console.log(&quot;string_to_recv: &quot; + string_to_recv);        &#125;).wait(); &#x2F;&#x2F;收到数据之后，再执行下去        var my_string &#x3D; Java.use(&quot;java.lang.String&quot;).$new(string_to_recv);        this.setText(my_string);    &#125;&#125;);</code></pre><p>python代码</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> frida<span class="token keyword">import</span> base64<span class="token keyword">def</span> <span class="token function">my_message_handler</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    <span class="token keyword">if</span> message<span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"send"</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span>message<span class="token punctuation">[</span><span class="token string">"payload"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> message<span class="token punctuation">[</span><span class="token string">"payload"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'message:'</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        user<span class="token punctuation">,</span>pw <span class="token operator">=</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"user:"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span>        data <span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"admin"</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> pw<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"encoded data:"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>        script<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"my_data"</span><span class="token punctuation">:</span> data<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment"># 将JSON对象发送回去</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Modified data sent"</span><span class="token punctuation">)</span><span class="token comment"># 连接安卓机上的frida-server</span>device <span class="token operator">=</span> frida<span class="token punctuation">.</span>get_usb_device<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment"># 启动`demo02`这个app</span>pid <span class="token operator">=</span> device<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"com.minhal.demo3"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>device<span class="token punctuation">.</span>resume<span class="token punctuation">(</span>pid<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>session <span class="token operator">=</span> device<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token comment"># 加载a.js脚本</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"a.js"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    script <span class="token operator">=</span> session<span class="token punctuation">.</span>create_script<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>script<span class="token punctuation">.</span>on<span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> my_message_handler<span class="token punctuation">)</span>script<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>直接运行python代码，然后输入新的用户名和密码，我们原程序是本来不可以输入admin的，我们本代码就是通过输入其他内容，通过frida更改他的用户名参数，使得输入内容用户名为admin。<br>执行结果如下：</p><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20210406172725.png" alt="6" loading="lazy"></p><p>然后就实现了动态内容的修改。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>Android Application Security Study [<a href="https://github.com/r0ysue/AndroidSecurityStudy]">https://github.com/r0ysue/AndroidSecurityStudy]</a><br>Frida Android hook[<a href="https://eternalsakura13.com/2020/07/04/frida/]">https://eternalsakura13.com/2020/07/04/frida/]</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录frida学习的一些东西。&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="https://blog.minhal.me/tags/android/"/>
    
    <category term="tools" scheme="https://blog.minhal.me/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>2020年总结</title>
    <link href="https://blog.minhal.me/2021/01/01/81b2dbf50b34/"/>
    <id>https://blog.minhal.me/2021/01/01/81b2dbf50b34/</id>
    <published>2020-12-31T16:00:00.000Z</published>
    <updated>2021-04-16T09:05:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2020年过的有些仓促，这一年发生了很多事情。这一年或许是近些年的一个转折点，对于自己也算一直很重要的节点吧。一直想写个总结，总算开始敲起了流水账。2021新的一年，也要加油了。</p></blockquote><span id="more"></span><hr><p>“新冠”是2020最热的事件。2020年年初考完试兜兜转转最终9号还是踏上了回家的路。从知乎看到武汉有确诊不明传染病到回到家后的越来越严重。当时也没想到自己正在经历一场会影响全球的大事件。疫情让2020的春节不一样，不串门窝在家里看到的是大家晒吃的，那段时间闷不住了就是出去去自家后山上面走路散步。那段时间，时常由于焦虑感到胸闷，误以为自己得了新冠。</p><p>2020也是第一次体会到在“家里蹲”上大学，还记得第一课的计网，早早起床准备着上课，之后也逐渐变的懒散起来。由于疫情在家上课也使得自己体重上升，在家上课没有了想家的烦恼，过得格外快。在听到9月返校的时候，毫无犹豫订到了去往学校的车票。</p><p>国庆节，一个人去了武大的疫情纪念馆，看到了华西的医疗队伍，莫名的有些亲切感。看到几岁小朋友给护士写的信，忍不住落泪；看到一线医护人员穿过的战袍，用的器械。感受到的都是祖国的强大。</p><p>2021年，也希望疫情逐渐过去。在2020的尾声，国家卫健委也宣布了疫苗免费的好消息。赞！</p><hr><p>2020年，参加了很多竞赛，虽然疫情原因很多竞赛取消了。从年初开始准备的国赛作品赛；虽然国赛作品赛被很多人称为PPT大赛，但还是收获颇多。项目开发，共同柔和；文字打磨，答辩等都是一次又一次的修改。在最终答辩“翻车”中，还是功夫不负有心人拿到了一等奖和国内仅2个的最具创新价值奖。通过这个奖被保推到了互联网+全国总决赛。9月份，就在互联网+的忙碌中度过。</p><p>9月几乎没上过课，一直在望江备战决赛。互联网+的比赛比起之前的技术类比赛显然风格不一样，所以经验不足。好在在学长的帮助组成了一个团队。这个月里，每天都挺累的。常常熬夜，偶尔也会通宵。最终比赛结果也没能进入围。但这个月确实收获颇多。这一个月如梦一般，相似体验了一次创业；了解到了很多公司的运作，产品模式。也见到了很多大佬。这一次无成本的“创业”经历也是大学里最难忘的吧。</p><p>作品赛之外主要就是参加CTF竞赛，省赛今年如愿拿到了一等奖；国赛不尽人意，有自己的失误，有比赛场上环境的变化，最终结果不是太好。如果明年有机会也可能重新冲回来。之后还在西湖论剑与很多朋友面基，第一次参加IoT竞赛经验还是不足，需要总结的还是很多。</p><p>这一年，协会发展也很不错。从年中开始，跟小伙伴一起把协会发展模式改变，办两次比赛也发现了后生力量。希望2021年，协会不出现断层现象吧，发展越来越好。</p><p>这一年的技术长进感觉不是很满意，很多目标也没怎么做好。知乎，公众号可能是很大一部分知识的来源；对于根基知识与知识架构的建立还是有很大的不足，在2021年要改变现状，多看一些书籍来构建知识网络。大学以来，也不怎么看技术外的书了，这一年也逐渐明白到技术不是唯一，在2021一年还是需要建起那些非技术书籍增加一些人文素养。</p><p>2020年已去，2021年出发！</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;2020年过的有些仓促，这一年发生了很多事情。这一年或许是近些年的一个转折点，对于自己也算一直很重要的节点吧。一直想写个总结，总算开始敲起了流水账。2021新的一年，也要加油了。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="小记" scheme="https://blog.minhal.me/tags/%E5%B0%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio调试apk</title>
    <link href="https://blog.minhal.me/2020/11/07/347a510be579/"/>
    <id>https://blog.minhal.me/2020/11/07/347a510be579/</id>
    <published>2020-11-07T03:36:54.000Z</published>
    <updated>2023-03-18T09:54:23.795Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在逆向一个某工程性的APK文件，由于加了一些混淆和其他原因，需要动态调试理解一些关键代码，于是搭建了android studio调试环境。</p></blockquote><span id="more"></span><p>APK的调试有很多方法，个人还是习惯Android Studio 配合JEB的伪代码来进行调试。</p><h2 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h2><p>首先需要使用工具反编译apk。</p><h3 id="Apktool"><a href="#Apktool" class="headerlink" title="Apktool"></a>Apktool</h3><p>可以直接用Apktool反编译 </p><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20201219151801.png" alt="1" loading="lazy"></p><p>也也可以通过Android Killer反编译（原理其实就是集成Apttool）</p><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20201219151804.png" alt="3" loading="lazy"></p><p>还可以使用  <strong>java -jar apktool.jar d MyApp.apk</strong> 命令调用apktool。</p><p>Android Studio3.x已经自带反编译，所以可以直接导入。</p><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20201219151803.png" alt="4" loading="lazy"></p><h2 id="导入Android-Studio"><a href="#导入Android-Studio" class="headerlink" title="导入Android Studio"></a>导入Android Studio</h2><p>如果没用自AS自带的反编译，可以选择<strong>Import Project</strong>导入</p><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20201219151802.png" alt="2" loading="lazy"><br>一直选择“Next“。</p><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>安装smaliidea插件，来对smali代码进行处理。</p><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20201219151805.png" alt="5" loading="lazy"></p><h2 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h2><p>AndroidManifest.xml文件中在application中改为true(如果没有添加上)：</p><blockquote><p>​     <em>android:debuggable&#x3D;”true”</em></p></blockquote><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20201219151807.png" alt="7" loading="lazy"></p><h2 id="设置Sources-Root"><a href="#设置Sources-Root" class="headerlink" title="设置Sources Root"></a>设置Sources Root</h2><p> 在AndroidStudio工程中右键点击smali文件夹，设定Mark Directory as -&gt; Sources Root</p><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20201219151808.png" alt="8" loading="lazy"></p><h2 id="重新编译"><a href="#重新编译" class="headerlink" title="重新编译"></a>重新编译</h2><p>如果之前改过代码，这步要重新编译签名程序。</p><p> <strong>java -jar apktool.jar b MyApp -o newMyApp.apk</strong></p><h2 id="启动DDMS"><a href="#启动DDMS" class="headerlink" title="启动DDMS"></a>启动DDMS</h2><p>启动DDMS，在Android Studio 3.x可能在tools菜单找不到DDMS，可以直接在terninal 输入 monitor启动。</p><p>打开后可能会遇到<br><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20201219151806.png" alt="6" loading="lazy"></p><p>这个时候可以按照提示改下端口号。</p><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20201219151809.png" alt="9" loading="lazy"></p><p>如果改了还不行可以先启动monitor，再打开Android Studio即可。</p><h2 id="配置调试"><a href="#配置调试" class="headerlink" title="配置调试"></a>配置调试</h2><p>在AndroidStudio里面配置远程调试的选项，选择Run -&gt; Edit Configurations</p><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20201219151810.png" alt="10" loading="lazy"></p><p>然后选择加号新建一个远程调试</p><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20201219151811.png" alt="11" loading="lazy"></p><p>然后进行配置</p><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20201219151812.png" alt="12" loading="lazy"></p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>配置完成后即可调试，直接在想调试的地方下断点。在DDMS中选择要调试的程序。</p><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20201219151813.png" alt="13" loading="lazy"></p><p>然后Run-&gt;Debug ‘name’来启动调试。</p><h2 id="模拟器连接"><a href="#模拟器连接" class="headerlink" title="模拟器连接"></a>模拟器连接</h2><p>如果通过模拟器来调试可以参考模拟器连接端口</p><ul><li>夜神模拟器：adb connect 127.0.0.1:62001</li><li>逍遥安卓模拟器：adb connect 127.0.0.1:21503</li><li>天天模拟器：adb connect 127.0.0.1:6555 </li><li>海马玩模拟器：adb connect 127.0.0.1:53001</li><li>网易MUMU模拟器：adb connect 127.0.0.1:7555</li><li>原生模拟器：adb connect (你的IP地址)：5555</li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近在逆向一个某工程性的APK文件，由于加了一些混淆和其他原因，需要动态调试理解一些关键代码，于是搭建了android studio调试环境。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="android" scheme="https://blog.minhal.me/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>RCTF cipher</title>
    <link href="https://blog.minhal.me/2020/06/02/d31a615fcd28/"/>
    <id>https://blog.minhal.me/2020/06/02/d31a615fcd28/</id>
    <published>2020-06-02T04:28:08.000Z</published>
    <updated>2023-03-18T09:59:01.802Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一个mips64架构的Re题目。</p></blockquote><span id="more"></span><h3 id="检查文件格式"><a href="#检查文件格式" class="headerlink" title="检查文件格式"></a>检查文件格式</h3><p>检查文件是个一个mips64大端程序，穷人用不起IDA pro 7.5，只能上ghidra来进行反编译操作。</p><h3 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h3><ul><li>题目给出了一个加密后的文本</li></ul><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20200602145422.png" alt="12" loading="lazy"><br>最后多出来的0A是个换行符。</p><ul><li>用ghidra反汇编，进入主函数</li></ul><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20200602122538.png" alt="1" loading="lazy"></p><ul><li>时间做随机种子， cipher应该就是加密函数了。</li><li>进入cipher，发现有个循环，每16位为一组数据，由于我们结果为48位，所以应该是就分为三组进行操作。encrypt是加密函数，第一个参数是加密结果，第二个参数是输入内容。<br><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20200602122539.png" alt="2" loading="lazy"></li><li>再次进入encrypt函数，由于反汇编偏差，rand这个随机数参数未能识别传进来。in_a2就是这个参数。<br><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20200602122540.png" alt="3" loading="lazy"></li><li>根据代码，修复一些变量名。<br><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20200602122541.png" alt="4" loading="lazy"></li><li>while循环为主要加密过程，主要进行了一些位运算。，写出位运算逆向脚本<pre class="language-python" data-language="python"><code class="language-python">ld <span class="token operator">=</span><span class="token punctuation">[</span>s2<span class="token punctuation">]</span>lc <span class="token operator">=</span> <span class="token punctuation">[</span>s1<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  ld<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>rright<span class="token punctuation">(</span>ld<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> lc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> i<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffffffffffffffff</span> <span class="token punctuation">)</span>  lc<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rright<span class="token punctuation">(</span>lc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">61</span><span class="token punctuation">)</span> <span class="token operator">^</span> ld<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  x1 <span class="token operator">=</span> rright<span class="token punctuation">(</span>x1<span class="token operator">^</span>x2<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>  x2 <span class="token operator">=</span> rright<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x2<span class="token operator">^</span>lc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>x1<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffffffffffffffff</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> x1<span class="token punctuation">,</span>x2</code></pre></li></ul><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><ul><li><p>while循环中，srand未知，输出结果已知，输入内容未知。所以我们逆向出这个运算，还是需要得到srand值，才可能解决题目</p></li><li><p>srand 可以采取爆破的形式，由于比赛flag形式为RCTF{xxxxx},所以我们可以根据第一组数据进行爆破，得到srand。每个srand255（无符号）种情况，255*255总共65535种情况。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">65536</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s1 <span class="token operator">=</span> i    s2 <span class="token operator">=</span> <span class="token number">0</span>    s1<span class="token punctuation">,</span>s2 <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">'QQ'</span><span class="token punctuation">,</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'>QQ'</span><span class="token punctuation">,</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span>    x1<span class="token punctuation">,</span>x2 <span class="token operator">=</span> reverse<span class="token punctuation">(</span>lists2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>lists2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span>    str1 <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'>Q'</span><span class="token punctuation">,</span>x1<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'RCTF'</span> <span class="token keyword">in</span> str1<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">break</span></code></pre></li><li><p>得到srand，然后直接逆向解决就好了。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>lists2<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s1<span class="token punctuation">,</span>s2 <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">'QQ'</span><span class="token punctuation">,</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'>QQ'</span><span class="token punctuation">,</span><span class="token number">4980</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    x1<span class="token punctuation">,</span>x2 <span class="token operator">=</span> reverse<span class="token punctuation">(</span>lists2<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>lists2<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span>    flag <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'>Q'</span><span class="token punctuation">,</span>x1<span class="token punctuation">)</span>    flag <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'>Q'</span><span class="token punctuation">,</span>x2<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span></code></pre></li></ul><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="language-none"><code class="language-none">import structdef encrypt(a,b,c,d ):  b &#x3D; (rright(b,8) + a ^ c)&amp;0xffffffffffffffff  a &#x3D; rright(a,61) ^ b  for i in range(0x1f):    d &#x3D; (rright(d,8) + c ^ i)&amp;0xffffffffffffffff    c &#x3D; rright(c,61) ^ d    b &#x3D; (rright(b,8) + a ^ c)&amp;0xffffffffffffffff    a &#x3D; rright(a,61) ^ b      return a,b  def recerse(x1,x2,s1,s2):  ld &#x3D;[s2]  lc &#x3D; [s1]  for i in range(31):    ld.append((rright(ld[i],8) + lc[i] ^ i)&amp;0xffffffffffffffff )    lc.append(rright(lc[i],61) ^ ld[i+1])  for i in range(31,-1,-1):    x1 &#x3D; rright(x1^x2,3)    x2 &#x3D; rright(((x2^lc[i])-x1)&amp;0xffffffffffffffff,56)      return x1,x2def rright(v,n):  return ((v &gt;&gt; n) + (v &lt;&lt; (64-n)))&amp;0xfffffffffffffffflists &#x3D; [0x2A, 0x00, 0xF8, 0x2B, 0xE1, 0x1D, 0x77, 0xC1, 0xC3, 0xB1, 0x71, 0xFC, 0x23, 0xD5, 0x91, 0xF4, 0x30, 0xF1, 0x1E, 0x8B, 0xC2, 0x88, 0x59, 0x57, 0xD5, 0x94, 0xAB, 0x77, 0x42, 0x2F, 0xEB, 0x75, 0xE1, 0x5D, 0x76, 0xF0, 0x46, 0x6E, 0x98, 0xB9, 0xB6, 0x51, 0xFD, 0xB5, 0x5D, 0x77, 0x36, 0xF2]lists2 &#x3D;[]for i in lists:    lists2.append(chr(i))lists2 &#x3D; struct.unpack(&#39;&gt;QQQQQQ&#39;,&#39;&#39;.join(lists2))for i in range(65536):    s1 &#x3D; i    s2 &#x3D; 0    s1,s2 &#x3D; struct.unpack(&#39;QQ&#39;,struct.pack(&#39;&gt;QQ&#39;,s1,s2))    x1,x2 &#x3D; reverse(lists2[0],lists2[1],s1,s2)    str1 &#x3D; struct.pack(&#39;&gt;Q&#39;,x1)    if &#39;RCTF&#39; in str1:        print(i)        break    flag &#x3D; &#39;&#39;for i in range(len(lists2)&#x2F;2):    s1,s2 &#x3D; struct.unpack(&#39;QQ&#39;,struct.pack(&#39;&gt;QQ&#39;,4980,0))    x1,x2 &#x3D; reverse(lists2[2*i],lists2[2*i+1],s1,s2)    flag +&#x3D; struct.pack(&#39;&gt;Q&#39;,x1)    flag +&#x3D; struct.pack(&#39;&gt;Q&#39;,x2)print (flag)</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这个题目比较坑的两个地方是注意大小端，还有就是加号与异或运算优先级，如果这两个搞错，很容易被卡住的。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;一个mips64架构的Re题目。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Reverse" scheme="https://blog.minhal.me/tags/Reverse/"/>
    
    <category term="CTF" scheme="https://blog.minhal.me/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2020 geekgame(scuctf) Reverse出题思路&amp;writeup</title>
    <link href="https://blog.minhal.me/2020/05/23/6f13b4db0c8b/"/>
    <id>https://blog.minhal.me/2020/05/23/6f13b4db0c8b/</id>
    <published>2020-05-23T01:11:27.000Z</published>
    <updated>2023-03-18T09:56:48.633Z</updated>
    
    <content type="html"><![CDATA[<p>2020 scuctf 如期举行，比赛也相当激烈。正好要写官方wp，顺便更新到博客吧。</p><span id="more"></span><h2 id="真正的签到"><a href="#真正的签到" class="headerlink" title="真正的签到"></a>真正的签到</h2><h3 id="出题思路"><a href="#出题思路" class="headerlink" title="出题思路"></a>出题思路</h3><p>本身作为签到题就没必要太刁难人，主要考察脱压缩壳（re选手基础技能），正好在4月的脱壳分享会也说了要出一道这种题。脱完壳后就打算搞个简单的加减乘除，但是还是出题时候考虑不周，出现了多解的情况。（按照正常思路一般都是一个解。）</p><p>问题主要出在当时做了一个除法的操作，因为C语言中5&#x2F;2 与4&#x2F;2都为2。</p><h3 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h3><h4 id="法1"><a href="#法1" class="headerlink" title="法1"></a>法1</h4><ul><li><p>第一步，查壳，发现为upx。</p><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20200526001329.png" alt="1" loading="lazy"></p></li><li><p>直接可以用脱壳软件脱壳也可esp定律等手动脱壳。</p></li><li><p>脱壳后分析代码。</p><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20200526001330.png" alt="2" loading="lazy"></p></li><li><p>直接写脚本</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> fstr<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"pbm`KkL`dKQ2KeJLd"</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> theflag<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> flag<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"scu_ctf_f4k3_f14g"</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">17</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    theflag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> fstr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">-</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">17</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>theflag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span></code></pre></li></ul><h4 id="法2"><a href="#法2" class="headerlink" title="法2"></a>法2</h4><ul><li>前面步骤一直，后面直接angr梭哈</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angrp <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'sign.exe'</span><span class="token punctuation">,</span> auto_load_libs<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>st <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>call_state<span class="token punctuation">(</span>addr<span class="token operator">=</span><span class="token number">0x401520</span><span class="token punctuation">,</span> add_options<span class="token operator">=</span>angr<span class="token punctuation">.</span>options<span class="token punctuation">.</span>unicorn<span class="token punctuation">)</span>sim <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>st<span class="token punctuation">)</span>sim<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span><span class="token number">0x40155e</span><span class="token punctuation">,</span> avoid<span class="token operator">=</span><span class="token number">0x40156c</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sim<span class="token punctuation">.</span>one_found<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>这个地方就可以看出，有多解情况了。</p><h2 id="太空大战"><a href="#太空大战" class="headerlink" title="太空大战"></a>太空大战</h2><h3 id="出题思路-1"><a href="#出题思路-1" class="headerlink" title="出题思路"></a>出题思路</h3><p>  这题是由God sun出的，大概主要考察一个.net，加之让比赛变的更有趣一点，放了个小游戏上去。只要打完180个灰机（一个不落）控制台就会输出flag</p><p>  （180个飞机，无需逆向，轻轻松松就可以打败。</p><h3 id="解题方法-1"><a href="#解题方法-1" class="headerlink" title="解题方法"></a>解题方法</h3><ul><li>关键代码在assets&#x2F;bin&#x2F;Date&#x2F;Managed&#x2F;Assembly-CSharp.dll</li><li>⽤.NET Reflector打开分析</li></ul><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20200526001334.jpg" alt="3" loading="lazy"></p><ul><li><p>经过分析可以得知，每击落一架分级，调用一次这个关键方法。由代码可以看到总共需要摧毁了180个。（其实总共也就180个）</p></li><li><p>写解题脚本</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlibmask <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">49552</span><span class="token punctuation">,</span><span class="token number">26516</span><span class="token punctuation">,</span><span class="token number">15988</span><span class="token punctuation">,</span><span class="token number">29987</span><span class="token punctuation">,</span><span class="token number">52902</span><span class="token punctuation">,</span><span class="token number">33151</span><span class="token punctuation">,</span><span class="token number">8086</span><span class="token punctuation">,</span><span class="token number">39920</span><span class="token punctuation">,</span><span class="token number">3604</span><span class="token punctuation">,</span><span class="token number">21497</span><span class="token punctuation">,</span><span class="token number">19862</span><span class="token punctuation">,</span><span class="token number">12268</span><span class="token punctuation">,</span><span class="token number">50822</span><span class="token punctuation">,</span><span class="token number">26111</span><span class="token punctuation">,</span><span class="token number">35391</span><span class="token punctuation">,</span><span class="token number">20661</span><span class="token punctuation">,</span><span class="token number">6370</span><span class="token punctuation">,</span><span class="token number">14029</span><span class="token punctuation">,</span><span class="token number">26707</span><span class="token punctuation">,</span><span class="token number">42890</span><span class="token punctuation">,</span><span class="token number">19391</span><span class="token punctuation">,</span><span class="token number">13836</span><span class="token punctuation">,</span><span class="token number">61102</span><span class="token punctuation">,</span><span class="token number">38705</span><span class="token punctuation">,</span><span class="token number">45159</span><span class="token punctuation">,</span><span class="token number">12927</span><span class="token punctuation">,</span><span class="token number">47794</span><span class="token punctuation">,</span><span class="token number">39183</span><span class="token punctuation">,</span><span class="token number">20776</span><span class="token punctuation">,</span><span class="token number">44532</span><span class="token punctuation">,</span><span class="token number">18925</span><span class="token punctuation">,</span><span class="token number">4854</span><span class="token punctuation">,</span><span class="token number">60596</span><span class="token punctuation">,</span><span class="token number">11941</span><span class="token punctuation">,</span><span class="token number">28994</span><span class="token punctuation">,</span><span class="token number">11166</span><span class="token punctuation">,</span><span class="token number">57586</span><span class="token punctuation">,</span><span class="token number">48918</span><span class="token punctuation">,</span><span class="token number">13199</span><span class="token punctuation">,</span><span class="token number">42006</span><span class="token punctuation">,</span><span class="token number">62781</span><span class="token punctuation">,</span><span class="token number">31480</span><span class="token punctuation">,</span><span class="token number">50464</span><span class="token punctuation">,</span><span class="token number">53893</span><span class="token punctuation">,</span><span class="token number">21233</span><span class="token punctuation">,</span><span class="token number">61456</span><span class="token punctuation">,</span><span class="token number">55842</span><span class="token punctuation">,</span><span class="token number">46591</span><span class="token punctuation">,</span><span class="token number">10574</span><span class="token punctuation">,</span><span class="token number">45253</span><span class="token punctuation">,</span><span class="token number">50991</span><span class="token punctuation">,</span><span class="token number">44866</span><span class="token punctuation">,</span><span class="token number">45945</span><span class="token punctuation">,</span><span class="token number">17105</span><span class="token punctuation">,</span><span class="token number">27273</span><span class="token punctuation">,</span><span class="token number">18925</span><span class="token punctuation">,</span><span class="token number">41001</span><span class="token punctuation">,</span><span class="token number">64310</span><span class="token punctuation">,</span><span class="token number">51846</span><span class="token punctuation">,</span><span class="token number">46279</span><span class="token punctuation">,</span><span class="token number">14977</span><span class="token punctuation">,</span><span class="token number">61079</span><span class="token punctuation">,</span><span class="token number">26330</span><span class="token punctuation">,</span><span class="token number">1192</span><span class="token punctuation">,</span><span class="token number">61190</span><span class="token punctuation">,</span><span class="token number">38989</span><span class="token punctuation">,</span><span class="token number">36161</span><span class="token punctuation">,</span><span class="token number">17001</span><span class="token punctuation">,</span><span class="token number">38576</span><span class="token punctuation">,</span><span class="token number">49567</span><span class="token punctuation">,</span><span class="token number">55929</span><span class="token punctuation">,</span><span class="token number">31759</span><span class="token punctuation">,</span><span class="token number">54550</span><span class="token punctuation">,</span><span class="token number">12759</span><span class="token punctuation">,</span><span class="token number">13756</span><span class="token punctuation">,</span><span class="token number">60929</span><span class="token punctuation">,</span><span class="token number">36365</span><span class="token punctuation">,</span><span class="token number">27308</span><span class="token punctuation">,</span><span class="token number">57132</span><span class="token punctuation">,</span><span class="token number">42483</span><span class="token punctuation">,</span><span class="token number">42263</span><span class="token punctuation">,</span><span class="token number">57086</span><span class="token punctuation">,</span><span class="token number">55839</span><span class="token punctuation">,</span><span class="token number">13568</span><span class="token punctuation">,</span><span class="token number">37191</span><span class="token punctuation">,</span><span class="token number">18388</span><span class="token punctuation">,</span><span class="token number">34592</span><span class="token punctuation">,</span><span class="token number">4189</span><span class="token punctuation">,</span><span class="token number">65492</span><span class="token punctuation">,</span><span class="token number">24673</span><span class="token punctuation">,</span><span class="token number">27016</span><span class="token punctuation">,</span><span class="token number">6941</span><span class="token punctuation">,</span><span class="token number">33229</span><span class="token punctuation">,</span><span class="token number">4180</span><span class="token punctuation">,</span><span class="token number">35454</span><span class="token punctuation">,</span><span class="token number">64874</span><span class="token punctuation">,</span><span class="token number">36708</span><span class="token punctuation">,</span><span class="token number">22948</span><span class="token punctuation">]</span>l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>mask<span class="token punctuation">)</span>secret <span class="token operator">=</span> <span class="token string">"jFEQ6xFkUxKGzUbn"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">181</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    secret <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">(</span>secret<span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>mask<span class="token punctuation">[</span>i<span class="token operator">%</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'6a37460f25c719a4'</span> <span class="token keyword">in</span> secret<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span>secret<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></li><li><p>注意这里很多选手以为只调用一次，所以直接拿180%98 去处理，算出来的是错的。</p></li></ul><h2 id="PY-交易"><a href="#PY-交易" class="headerlink" title="PY 交易"></a>PY 交易</h2><h3 id="出题思路-2"><a href="#出题思路-2" class="headerlink" title="出题思路"></a>出题思路</h3><p>这个题目出题主要想考察一下python的逆向，校内打校外比赛的不多，见得题目相对较少。所以本着拓宽学习的目的，出了这道还原字节码的题目。相对来说这道题不是太难，通过相关博客搜索，然后一步步分析还原，还原后dis检验。</p><ul><li>参考文章 <a href="https://bbs.pediy.com/thread-246683.htm">https://bbs.pediy.com/thread-246683.htm</a></li></ul><h3 id="解题方法-2"><a href="#解题方法-2" class="headerlink" title="解题方法"></a>解题方法</h3><ul><li><p>首先直接还原python代码就好了，还原结果如下</p><pre class="language-python" data-language="python"><code class="language-python">inputs <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"please your flag:"</span><span class="token punctuation">)</span>inputs <span class="token operator">=</span> inputs<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>flag <span class="token operator">=</span> <span class="token string">"th31_scuctf_eXclus1v3"</span>theflag <span class="token operator">=</span> <span class="token string">""</span>i <span class="token operator">=</span> <span class="token number">0</span>j <span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error!"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    theflag <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">ord</span><span class="token punctuation">(</span>inputs<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    theflag <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">ord</span><span class="token punctuation">(</span>inputs<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    theflag <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">ord</span><span class="token punctuation">(</span>inputs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>flags <span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span>theflag<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flags<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>flags<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token comment">#Flag scuctf&#123;&#125;</span><span class="token comment">#The flag text starts with "d1" and the eighth bit is "3"</span>flagt <span class="token operator">=</span> flags<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">]</span>theflag <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>flagt<span class="token punctuation">)</span><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    theflag <span class="token operator">+=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>flags<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>theflag <span class="token operator">==</span> <span class="token string">'×\x8bÙÍ\x8cÓÜî¤ú±¬¤¤úÖíÒ'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You win!"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error!!!"</span><span class="token punctuation">)</span></code></pre></li><li><p>接着就是逆向分析，写解题脚本</p></li></ul><h4 id="法1-1"><a href="#法1-1" class="headerlink" title="法1"></a>法1</h4><pre class="language-python" data-language="python"><code class="language-python">enflag <span class="token operator">=</span> <span class="token string">'×\x8bÙÍ\x8cÓÜî¤ú±¬¤¤úÖíÒ'</span>flag <span class="token operator">=</span> <span class="token string">'th31_scuctf_eXclus1v3'</span>ans <span class="token operator">=</span> <span class="token string">'d1'</span> <span class="token operator">+</span> <span class="token string">'*'</span> <span class="token operator">*</span> <span class="token number">19</span>step1 <span class="token operator">=</span> enflag<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> enflag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>theflag <span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    theflag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>step1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">)</span>theflag <span class="token operator">+=</span> step1<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token punctuation">]</span>inputs <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    inputs<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>theflag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    inputs<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>theflag<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    inputs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>theflag<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>inputs<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'3'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'scuctf&#123;'</span> <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&#125;'</span><span class="token punctuation">)</span></code></pre><h4 id="法2-1"><a href="#法2-1" class="headerlink" title="法2"></a>法2</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> z3 <span class="token keyword">import</span> <span class="token operator">*</span>flag <span class="token operator">=</span> <span class="token string">"th31_scuctf_eXclus1v3"</span>dist <span class="token operator">=</span> <span class="token string">"×ÙÍÓÜî¤ú±¬¤¤úÖíÒ"</span>inp <span class="token operator">=</span> <span class="token punctuation">[</span>BitVec<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'x%s'</span> <span class="token operator">%</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>theflag <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    theflag<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> inp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    theflag<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> inp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    theflag<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> inp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>flags <span class="token operator">=</span> <span class="token punctuation">[</span>_ <span class="token keyword">for</span> _ <span class="token keyword">in</span> theflag<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flags<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> flags<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">20</span>theflag <span class="token operator">=</span> theflag<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    theflag<span class="token punctuation">.</span>append<span class="token punctuation">(</span>flags<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>solver <span class="token operator">=</span> Solver<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>theflag<span class="token punctuation">,</span> dist<span class="token punctuation">)</span><span class="token punctuation">:</span>    solver<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>solver<span class="token punctuation">.</span>check<span class="token punctuation">(</span><span class="token punctuation">)</span>model <span class="token operator">=</span> solver<span class="token punctuation">.</span>model<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>inp<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>model<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>as_long<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre><ul><li>题目前两位和第八位无法解除，题目中已经提示具体字符</li></ul><h2 id="ONIbase64"><a href="#ONIbase64" class="headerlink" title="ONIbase64"></a>ONIbase64</h2><h3 id="出题思路-3"><a href="#出题思路-3" class="headerlink" title="出题思路"></a>出题思路</h3><p>本道题主要就是考察一个ollvm平坦化。也没想到这么惨烈。</p><h3 id="解题方法-3"><a href="#解题方法-3" class="headerlink" title="解题方法"></a>解题方法</h3><ul><li><p>文件拉到最后就可以看到编译器地址，直接把它pull下来，编译.s文件得到可执行文件。</p></li><li><p>拖入IDA分析，是个标准的平坦化。</p><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20200526001331.png" alt="6" loading="lazy"></p></li><li><p>参考&lt;<a href="https://github.com/pcy190/deflat">https://github.com/pcy190/deflat</a> &gt;去除平坦化</p></li><li><p>然后直接F5写解密脚本</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> z3 <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span>table <span class="token operator">=</span> <span class="token string">'ZAnUX1W2oPNQ4sBMOd/+ChfGI5r8Hvt3uaLkbDgcyJYTipez6mxF0SEqRjVKwl97'</span>coding <span class="token operator">=</span> <span class="token string">'5auRs6a4A2lEUObG5+uoPGuWHnimZLXtvkyEHxCFoal5'</span>dist <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> BitVecVal<span class="token punctuation">(</span>table<span class="token punctuation">.</span>find<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> coding<span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token punctuation">[</span>BitVec<span class="token punctuation">(</span><span class="token string">'c%d'</span> <span class="token operator">%</span> i<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">]</span>total <span class="token operator">=</span> Concat<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token punctuation">[</span>Extract<span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span> <span class="token operator">*</span> i<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span>temps <span class="token operator">=</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">^</span> y<span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token operator">^</span> temps <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">]</span>s<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>total <span class="token operator">=</span> Concat<span class="token punctuation">(</span>s<span class="token punctuation">)</span>bits <span class="token operator">=</span> <span class="token punctuation">[</span>Extract<span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token operator">*</span> i<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">]</span>bits <span class="token operator">=</span> bits <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">^</span> y<span class="token punctuation">,</span> bits<span class="token punctuation">)</span><span class="token punctuation">]</span>tup <span class="token operator">=</span> <span class="token punctuation">[</span>bits<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>bits<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>outs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>padding <span class="token operator">=</span> BitVecVal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>tup<span class="token punctuation">)</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> Concat<span class="token punctuation">(</span>v<span class="token punctuation">)</span>    s1 <span class="token operator">=</span> Extract<span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>    s2 <span class="token operator">=</span> Extract<span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>    s3 <span class="token operator">=</span> Extract<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>    s4 <span class="token operator">=</span> Extract<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>    outs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s1<span class="token punctuation">)</span>    outs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>    outs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s3<span class="token punctuation">)</span>    outs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s4<span class="token punctuation">)</span>    <span class="token keyword">for</span> v2 <span class="token keyword">in</span> tup<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        v2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> v2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">^</span> Concat<span class="token punctuation">(</span>padding<span class="token punctuation">,</span> s1<span class="token punctuation">)</span>        v2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> Concat<span class="token punctuation">(</span>padding<span class="token punctuation">,</span> s2<span class="token punctuation">)</span>        v2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> v2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">^</span> Concat<span class="token punctuation">(</span>padding<span class="token punctuation">,</span> s3<span class="token punctuation">)</span>solve <span class="token operator">=</span> Solver<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>dist<span class="token punctuation">)</span><span class="token punctuation">:</span>    solve<span class="token punctuation">.</span>add<span class="token punctuation">(</span>outs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> v<span class="token punctuation">)</span>solve<span class="token punctuation">.</span>check<span class="token punctuation">(</span><span class="token punctuation">)</span>model <span class="token operator">=</span> solve<span class="token punctuation">.</span>model<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span>as_long<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">reversed</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ul><h2 id="easy-re-amp-easy-base"><a href="#easy-re-amp-easy-base" class="headerlink" title="easy_re&amp;easy_base"></a>easy_re&amp;easy_base</h2><h3 id="出题思路-4"><a href="#出题思路-4" class="headerlink" title="出题思路"></a>出题思路</h3><p>既然要搞花样，当然少不当今最火的iot。采用腾讯TencentOS tiny 官方定制IoT开发板EVB_LX(暂时是限量的)编译环境： <a href="https://github.com/Tencent/TencentOS-tiny">https://github.com/Tencent/TencentOS-tiny</a>两个题目，都是考察找到被替换的base64密码表，由于考虑到直接上base有点难，所以出了一个easy_re过渡。</p><p>两个题目替换都涉及四段字符如下（把初始密码表拆分为四段）：</p><blockquote><p>“ABCDEFGHIJKLMNOPQRSTUVWXYZ”<br>“abcdefghijklmnopqrstuvwxyz”<br>“0123456789”<br>“+&#x2F;“</p></blockquote><p>easy_re是改变了这四段字符压栈顺序。没想到ida太过于智能化，显示结果即是正确压栈顺序。</p><p>easy_base考察偏难了，主要是对这四段字符进行了一些变换，如果逆向分析的话需要学习risc-v指令集。</p><p>当然，这两个题最简单的方法是把程序放入对应开发板里，他相应的串口也会输出字母表。</p><p>做题过程中也发现一些选手拿到题目直接猜测arm架构，拿着ida 当arm分析，还原的内容是错的，无从下手。如果拿到文件后File一下也会知道是risc-v架构。不至于走偏。</p><h3 id="解题方法-4"><a href="#解题方法-4" class="headerlink" title="解题方法"></a>解题方法</h3><ul><li><p>首先，ida默认不支持risc-v，所以需要下载相关插件。<a href="https://github.com/lcq2/riscv-ida">https://github.com/lcq2/riscv-ida</a></p></li><li><p>然后，ida打开分析，直接就有正确的字母表压栈顺序，（原本是想让选手分析简单指令来确定或者爆破）</p><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20200526001332.png" alt="4" loading="lazy"></p></li><li><p>得到 字母表就很容易解出来了</p></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64str1 <span class="token operator">=</span> <span class="token string">"PalXPrhnOrLZT6PVQJ1oNr9dSqDVTbo=="</span>string1 <span class="token operator">=</span><span class="token string">"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ+/abcdefghijklmnopqrstuvwxyz"</span>string2 <span class="token operator">=</span><span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>str1<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>string1<span class="token punctuation">,</span> string2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li><p>easy_base 的话就需要分析指令得出具体操作或者直接开发板跑一下得到输出</p></li><li><p>看到大多数人解题无果，比赛最后放出了一个risc-v 64位的附件（代码一样），通过docker跑即可得到table。</p><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20200526001333.jpg" alt="5" loading="lazy"></p></li><li><p>然后直接解密得到flag</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64str1 <span class="token operator">=</span> <span class="token string">"UoH+U/DJV/YlQdUOU94JPYxJgdHMUWK="</span>string1 <span class="token operator">=</span><span class="token string">"a0b1c2d3e4f5g6h7i8j9ZYXWVUTSRQPON+klmnopqrABCDEFGHIJKLM/stuvwxyz"</span>string2 <span class="token operator">=</span><span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>str1<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>string1<span class="token punctuation">,</span> string2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>如果对题目感兴趣的，可以之后再研究。我附上题目主文件源代码</p></li></ul><pre class="language-C" data-language="C"><code class="language-C">#include &quot;mcu_init.h&quot;#include &quot;tos_k.h&quot;#define TASK_SIZE 1024k_task_t k_task_task1;k_task_t k_task_task2;uint8_t k_task1_stk[TASK_SIZE];uint8_t k_task2_stk[TASK_SIZE];int share &#x3D; 0xCBA7F9;k_sem_t sem;unsigned char *scuctf_flag_base64&#x3D;&quot;UoH+U&#x2F;DJV&#x2F;YlQdUOU94JPYxJgdHMUWK&#x3D;&quot;;unsigned char base64_right[65]&#x3D;&quot;&quot;;void scuctf_base64(void)&#123;unsigned char base64_1[26]&#x3D;&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;unsigned char base64_2[26]&#x3D;&quot;abcdefghijklmnopqrstuvwxyz&quot;;unsigned char base64_3[10]&#x3D;&quot;0123456789&quot;;unsigned char base64_4[2]&#x3D;&quot;+&#x2F;&quot;;int i&#x3D;0,j&#x3D;0,k&#x3D;0,q&#x3D;25,r&#x3D;10,n&#x3D;0;for(i&#x3D;0;i&lt;20;)&#123;base64_right[i]&#x3D;base64_2[j];j++;base64_right[i+1]&#x3D;base64_3[k];k++;i+&#x3D;2;&#125;for(i&#x3D;20;i&lt;33;i++)&#123;base64_right[i]&#x3D;base64_1[q];q--;&#125;for(i&#x3D;33;i&lt;42;i++)&#123;if(i&#x3D;&#x3D;33)&#123;base64_right[33]&#x3D;base64_4[0];&#125;else&#123;base64_right[i]&#x3D;base64_2[r];r++;&#125;&#125;for(i&#x3D;42;i&lt;64;i++)&#123;if(n&lt;13)&#123;base64_right[i]&#x3D;base64_1[n];n++;&#125;else&#123;if(i&#x3D;&#x3D;55)&#123;base64_right[i]&#x3D;base64_4[1];&#125;else&#123;base64_right[i]&#x3D;base64_2[r];r++;&#125;&#125;&#125;&#125;void task1(void *pdata)&#123;    int task_cnt1 &#x3D; 0;    while (1) &#123;        printf(&quot;welcome scuctf from %s cnt: %d\n&quot;, __func__, task_cnt1++);        tos_sem_pend(&amp;sem, ~0U);        gpio_bit_write(GPIOA, GPIO_PIN_7, share % 2);    &#125;&#125;void task2(void *pdata)&#123;    int task_cnt2 &#x3D; 0;    scuctf_base64();    while (1) &#123;        share++;        for(int i&#x3D;0; i&lt;5; i++) &#123;            printf(&quot;Where is scuctf_base64? %s cnt: %08x\n%s&quot;, __func__, task_cnt2--,base64_right);            tos_task_delay(50);        &#125;        tos_sem_post(&amp;sem);    &#125;&#125;void main(void) &#123;    board_init();    usart0_init(115200);    tos_knl_init();    tos_task_create(&amp;k_task_task1, &quot;task1&quot;, task1, NULL, 3, k_task1_stk, TASK_SIZE, 0);    tos_task_create(&amp;k_task_task2, &quot;task2&quot;, task2, NULL, 3, k_task2_stk, TASK_SIZE, 0);    k_err_t err &#x3D; tos_sem_create(&amp;sem, 1);    if (err !&#x3D; K_ERR_NONE) &#123;        goto die;    &#125;    tos_knl_start();die:    while (1) &#123;        asm(&quot;wfi;&quot;);    &#125;&#125;int _put_char(int ch)&#123;    usart_data_transmit(USART0, (uint8_t) ch );    while (usart_flag_get(USART0, USART_FLAG_TBE)&#x3D;&#x3D; RESET)&#123;    &#125;    return ch;&#125;</code></pre><ul><li>参考<a href="https://github.com/riscv/riscv-isa-manual/releases">https://github.com/riscv/riscv-isa-manual/releases</a></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>由于是普通校赛，题目也没出过分难，个人感觉难以把握还算可以。这次题目主要也本着打破传统scuctf 常规题目，一丢丢小小的创新。 .NET，risc-v，ollvm，apk，python等。即使这些可能在全国ctf中是常见题目，但是感觉校内还是几乎没出的。比赛过程中也发生了很多趣味东西，比如第一题一题多解，flag设置时候多加了空格导致选手提交报错等好多问题。</p><p>总之希望scuctf越来越有趣，参与人数越来越多吧！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2020 scuctf 如期举行，比赛也相当激烈。正好要写官方wp，顺便更新到博客吧。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Reverse" scheme="https://blog.minhal.me/tags/Reverse/"/>
    
    <category term="CTF" scheme="https://blog.minhal.me/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>hexo+github+zeit Blog</title>
    <link href="https://blog.minhal.me/2020/05/08/d64f3157b16b/"/>
    <id>https://blog.minhal.me/2020/05/08/d64f3157b16b/</id>
    <published>2020-05-08T13:32:52.000Z</published>
    <updated>2020-12-19T07:25:52.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>年轻爱折腾，从wordpress—&gt;typecho—&gt;hexo，追求越来越轻量。</p><p>网站托管于zeit+github，(zeit真香，速度相对快一些)</p></blockquote><span id="more"></span><h2 id="hexo搭建"><a href="#hexo搭建" class="headerlink" title="hexo搭建"></a>hexo搭建</h2><h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><pre class="language-none"><code class="language-none">sudo apt-get install git</code></pre><h4 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h4><pre class="language-none"><code class="language-none">sudo apt-get install nodejssudo apt-get install npm</code></pre><h4 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h4><pre class="language-none"><code class="language-none">npm install -g hexo-cli</code></pre><p>初始化hexo </p><p>blog是文件名</p><pre class="language-none"><code class="language-none">hexo init blog</code></pre><p>进入blog文件</p><pre class="language-none"><code class="language-none">npm install</code></pre><p>直接通过下面命令本地查看效果</p><pre class="language-none"><code class="language-none">hexo ghexo server</code></pre><h4 id="github"><a href="#github" class="headerlink" title="github"></a>github</h4><p>github 新建公开仓库 </p><p>githubname.github.io</p><h4 id="生成ssh添加到github"><a href="#生成ssh添加到github" class="headerlink" title="生成ssh添加到github"></a>生成ssh添加到github</h4><pre class="language-none"><code class="language-none">git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot;##检查git config user.namegit config user.emailssh-keygen -t rsa -C &quot;youremail&quot;</code></pre><p>生成.ssh 文件</p><p>id_rsa.pub复制到github—&gt;setting—&gt;SSH keys</p><p>下面命令检查成功与否</p><pre class="language-none"><code class="language-none">ssh -T git@github.com</code></pre><h4 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h4><p>_config.yml文件打开，最下面修改</p><pre class="language-none"><code class="language-none"># Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.htmldeploy:  type: git  repository: git@github.com:githubname&#x2F;githubname.github.io.git  branch: master</code></pre><p>安装deploy-git</p><pre class="language-none"><code class="language-none">npm install hexo-deployer-git --save</code></pre><pre class="language-none"><code class="language-none"># 清除生成hexo clean#生成静态文件hexo g#部署到githubhexo d</code></pre><h3 id="添加站点地图"><a href="#添加站点地图" class="headerlink" title="添加站点地图"></a>添加站点地图</h3><pre class="language-none"><code class="language-none">npm install hexo-generator-sitemap --save #sitemap.xml googlenpm install hexo-generator-baidu-sitemap --save #baidusitemap.xml百度</code></pre><p>在<code>themes\next\layout\_partials\head.swing</code>中添加百度站长验证代码</p><p>谷歌在<a href="https://search.google.com/search-console">https://search.google.com/search-console</a> 添加站点信息</p><p>_config.yml 添加</p><pre class="language-none"><code class="language-none">sitemap:path: sitemap.xmlbaidusitemap:path: baidusitemap.xml</code></pre><h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><pre class="language-none"><code class="language-none">npm install hexo-generator-feed###_config.ymlplugins: hexo-generator-feed#Feed Atomfeed:    type: atom    path: atom.xml    limit: 20</code></pre><h2 id="zeit托管"><a href="#zeit托管" class="headerlink" title="zeit托管"></a>zeit托管</h2><blockquote><p>为什么用zeit?</p><p>github国内访问相对较慢，所以直接托管到了zeit上面。</p></blockquote><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>通过<a href="https://zeit.co/login">ZEIT</a>使用github登陆</p><h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><p>Import Project 导入github博客仓库。</p><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>接着全部默认即可。</p><p>最后生成一个xxx.now.sh域名</p><h3 id="域名修改"><a href="#域名修改" class="headerlink" title="域名修改"></a>域名修改</h3><p>cname 添加记录绑定自己域名</p><p>详细介绍可以参考<a href="https://vercel.com/docs">帮助文档</a></p><h2 id="valine"><a href="#valine" class="headerlink" title="valine"></a>valine</h2><ul><li>注册<a href="https://leancloud.cn/">LeanCloud</a></li><li>创建新应用</li><li>设置 应用key 查看APP ID APP KEY</li><li>安全中心添加博客域名</li><li>修改主题的配置文件添加id 和 key</li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;年轻爱折腾，从wordpress—&amp;gt;typecho—&amp;gt;hexo，追求越来越轻量。&lt;/p&gt;
&lt;p&gt;网站托管于zeit+github，(zeit真香，速度相对快一些)&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="blog" scheme="https://blog.minhal.me/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>github图床搭建(picgo+typora)</title>
    <link href="https://blog.minhal.me/2020/05/07/df25c9f91382/"/>
    <id>https://blog.minhal.me/2020/05/07/df25c9f91382/</id>
    <published>2020-05-07T12:22:12.000Z</published>
    <updated>2023-03-18T09:57:14.945Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最开始，博客的图床是随便在百度找的，后来发现一些小图床平台不稳。<br>换了七牛云，用来用去。还是觉得github免费香。</p></blockquote><span id="more"></span><h2 id="github仓库搭建"><a href="#github仓库搭建" class="headerlink" title="github仓库搭建"></a>github仓库搭建</h2><ul><li>直接在gihub新建一个仓库，但特别注意是公开仓库。</li></ul><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20200503215527.png" alt="仓库" loading="lazy"></p><ul><li><p>然后在github个人设置生成token，记得保存token</p><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20200503215528.png" alt="token" loading="lazy"></p></li></ul><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20200503215529.png" alt="xxx" loading="lazy"></p><h2 id="picgo"><a href="#picgo" class="headerlink" title="picgo"></a>picgo</h2><ul><li><p>picgo直接到<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a>下载安装</p></li><li><p>接着到图床设置—&gt;github图床设置。</p></li></ul><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20200503173826.png" alt="sz" loading="lazy"></p><blockquote><ul><li>仓库名为ID&#x2F;仓库名</li><li>分支默认master(github现在默认分支可能为main)</li><li>token之前申请的</li><li>路径可以自己设置</li><li><strong>自定域名可以使用jsdelivr加速，设置方法<a href="https://cdn.jsdelivr.net/gh+%E7%94%A8%E6%88%B7id+%E4%BB%93%E5%BA%93%E5%90%8D">https://cdn.jsdelivr.net/gh+用户id+仓库名</a></strong></li></ul></blockquote><h2 id="typora设置"><a href="#typora设置" class="headerlink" title="typora设置"></a>typora设置</h2><ul><li>文件—&gt;偏好设—&gt;图像</li></ul><p><img src="https://photo-1302246897.cos.ap-singapore.myqcloud.com/blog/20200503174300.png" alt="设置" loading="lazy"></p><ul><li>上传服务器设定，PicGo(app)</li><li>PicGo路径设置为自己的picgo软件路径。</li><li>设置完成验证图片上传是否可以成功</li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul><li><p>这个方法使用后，可能导致你的github工作日志一片绿。(经常上传图片)</p></li><li><p>可能还有一个问题，这个属不属于github仓库滥用呢。v2ex有朋友询问了官方。贴上官方回信。</p></li></ul><blockquote><p>Hi Haoxun Zhan,</p><p>Thanks for your question! We’ve reviewed your project and, in addition to uploading files, it appears to assist in generating rawgit URLs. Is that correct?</p><p>If that’s the case, your project doesn’t appear to violate GitHub’s Terms of Service, though you may want to check in with the owner of rawgit if you haven’t already done so.</p><p>Of course, any individual who decided to use your code would be responsible for making sure their usage and content didn’t violate our Terms.</p><p>Please let me know if you have any other questions.</p><p>Best,<br>Elizabeth</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最开始，博客的图床是随便在百度找的，后来发现一些小图床平台不稳。&lt;br&gt;换了七牛云，用来用去。还是觉得github免费香。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="blog" scheme="https://blog.minhal.me/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>hello word</title>
    <link href="https://blog.minhal.me/2020/05/07/dc5bac85e158/"/>
    <id>https://blog.minhal.me/2020/05/07/dc5bac85e158/</id>
    <published>2020-05-07T02:56:00.000Z</published>
    <updated>2020-12-19T07:25:44.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>博客再次迁移！</p></blockquote><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;博客再次迁移！&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
