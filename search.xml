<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2022总结与展望</title>
      <link href="2022/02/01/2022_summary/"/>
      <url>2022/02/01/2022_summary/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="888dd495b3302375e1ec9e1edaed86d6458a592c0dbbab20a9f717b9dc769129"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 小记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GSE协议封装解析</title>
      <link href="2021/11/19/GSE/"/>
      <url>2021/11/19/GSE/</url>
      
        <content type="html"><![CDATA[<p>GSE协议封装的学习笔记。</p><span id="more"></span><h2 id="GSE介绍"><a href="#GSE介绍" class="headerlink" title="GSE介绍"></a>GSE介绍</h2><p>卫星通信近几年逐渐火热，目前的低轨卫星通信大多数采用欧盟ETSI的数字卫星电视广播标准（DVB-S&#x2F;DVB-S2 &#x2F;S2X）并做改进。而通常它们用通用流封装，因此，在卫星安全的研究中，对一些数据的解析需要对GSE封装协议有所了解，所以近期对官方文档阅读并做出一些笔记。</p><p>通用流封装（GSE）协议可以在物理层对IP和其他网络层数据封装，在通用流上提供网络层数据包封装和分片功能。GSE 不仅可以灵活的分片和封装，而且能使用智能调度器来优化系统性能。不仅如此还：</p><ul><li>支持多协议封装(IPv4、IPv6、MPEG、ATM、以太网、802.1pQ VLANs 等)。</li><li>对网络层功能的透明性。</li><li>支持多种寻址模式。</li><li>可扩展性</li></ul><h2 id="封装方法"><a href="#封装方法" class="headerlink" title="封装方法"></a>封装方法</h2><p>PDU（协议数据单元）可以封装在一个GSE包中，也可以分成片段封装成几个GSE包。而GSE包的长度是动态可变的。GSE包可在不同基带桢中发送，基带桢长度是可变的。GSE没有独自的完整性校验机制。通常一段数据碎片化变成几个PDU片段，在最后一段加CRC-32。如图是DVB协议的GSE封装：</p><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20211119115001.png" loading="lazy"></p><p>GSE包的头由固定长度（2bytes）和可变长度组成（0-11bytes）。固定长度主要有S 、E 、LT 、GSE Length等字段，可变部分主要是Fragment ID、Total Length、Protocol Type和Label等字段。如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20211119115136.png" loading="lazy"></p><p>每个GS流可存放最多256个PDU碎片，每个GSE数据包的头有一个开始指示位（S）和结束指示位（E），开始指示位为“1”表示PDU开始，结束指示位为“1”表示PDU结束。如果都为1表示是一个完整的PDU。</p><p>而接下来有两位标签类型指示（主要用于寻址）。标签存在时，接收者可以删去标签不匹配的数据包。当为广播包时，接收者都应该处理该数据包。标签重复时，只有上一个GSE包的地址与现在匹配，接收者才去处理。所以标签重复主要用于同一个基带桢中。</p><table><thead><tr><th>变量</th><th>说明</th></tr></thead><tbody><tr><td>00</td><td>存在一个6字节标签</td></tr><tr><td>01</td><td>存在一个3字节标签</td></tr><tr><td>10</td><td>广播，不存在标签字段。</td></tr><tr><td>11</td><td>标签重复试用</td></tr></tbody></table><p>接下来12位表示GSE包长度，最大2^12（4kb）。注：End包最后包含CRC-32。</p><p>Fragment ID只会在中间包出现，同一个PDU的GSE包有相同的ID。所以只有一个PDU传输完成，才可以有另一个PDU使用这个ID。</p><ul><li>含有同一PDU数据的GSE包必须用相同Frag ID</li><li>第一个 GSE 数据包的 S 位应等于 “1”，E 位等于 “0”。</li><li>中间PDU片段 S 位和 E 位等于 “0”。</li><li>最后一个 GSE 数据包的 S 位应等于 “0”，E 位等于 “1”。</li><li>一个 PDU 没穿完，它的 Frag ID 不得重复使用。</li><li>具有相同片段 ID 的 GSE 数据包必须按顺序传输。</li></ul><p>Total Length这个是保存PDU的总长度，所以通常在PDU碎片的第一个包中才有。总长度最高65536个字节，CRC-32不包含其中。</p><p>Protocol Type 0-0x5FF表示Next Header，0x600-0xFFFF表示 Ether Type。</p><h3 id="CRC-32"><a href="#CRC-32" class="headerlink" title="CRC-32"></a>CRC-32</h3><p>为了防止PDU包的数据丢失，所以在PDU最后一个GSE包放入一个32位的CRC字段。定义的CRC多项式为</p><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20211119115151.png" loading="lazy"></p><p> 初始累积器为0xFFFFFFFF。然后PDU的字节、总长度、协议类型、标签、扩展头等计算。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><p>Protocol Type定义了扩展头，扩展头属于数据的一部分，所以数据段的数据结构如下</p><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20211119115152.png" loading="lazy"></p><ul><li><p>如果有可选扩展头，跟在GSE头之后</p></li><li><p>如果有强制性扩展头，跟在可选扩展头之后</p></li><li><p>PDU跟在强制扩展头之后。</p></li></ul><p>上面三部分都不是必须有的。</p><h2 id="解析流程图"><a href="#解析流程图" class="headerlink" title="解析流程图"></a>解析流程图</h2><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20211119115153.png" loading="lazy"></p><h2 id="PDU分片"><a href="#PDU分片" class="headerlink" title="PDU分片"></a>PDU分片</h2><h3 id="首包"><a href="#首包" class="headerlink" title="首包"></a>首包</h3><ul><li>S 位设置1，E 位设置 0</li><li>GSE 长度设置为计算出的字节数（包括数据的长度和片段 ID 字段、总长度字段、协议类型字段、标签字段和任何扩展头等长度）。</li><li>将 Frag ID 设置为一个任意值。</li><li>总长度字段设置为计算出的字节数，（PDU、协议类型字段、标签字段和扩展头的长度。）</li><li>添加一个协议类型。</li><li>添加标签字段。（如果需要）</li><li>放入第一段PDU碎片数据。</li><li>GSE包放入基带桢</li></ul><h3 id="中间包"><a href="#中间包" class="headerlink" title="中间包"></a>中间包</h3><p>（如果PDU分为2个以上碎片时）</p><ul><li>S 位设置0，E 位设置 0</li><li>GSE 长度设置为计算出的字节数（包括数据的长度和片段 ID 字段长度）。</li><li>将 Frag ID 设置为首包设置的值。</li><li>放入一段PDU碎片数据。（按顺序放）</li><li>GSE包放入基带桢</li></ul><h3 id="尾包"><a href="#尾包" class="headerlink" title="尾包"></a>尾包</h3><ul><li>S 位设置0，E 位设置 1</li><li>GSE 长度设置为计算出的字节数（包括数据的长度和片段 ID 字段、CRC-32字段长度）。</li><li>将 Frag ID 设置为首包设置的值。</li><li>总长度字段设置为计算出的字节数，（PDU、协议类型字段、标签字段和扩展头的长度。）</li><li>放入最后一段PDU碎片数据，并加上CRC-32值。</li><li>GSE包放入基带桢</li></ul><h2 id="封装器调度"><a href="#封装器调度" class="headerlink" title="封装器调度"></a>封装器调度</h2><p>GSE封装器中的调度器，在基带桢中是智能放置，以提高效率。</p><p>如下图，PDU1、PDU2 和 PDU3 构成一个 PDU 序列，由调度器预先排定。（MODCOD 表示PDU 相关的调制格式和编码率）如果 MODCOD2 的效率高于 MODCOD1 的效率，那么我们应该采取 MODCOD1 对应的才会更稳定。PDU 被封装并由 GSE 封装器排入基带帧。</p><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20211119115154.png" loading="lazy"></p><p>当 PDU 被分割时，像上图 PDU2 ，剩余的 PDU 片段被封装在一个独立的 GSE 包中，在下一个基带帧中传输。如果没有利用智能调度策略，PDU2剩余的包与PDU3的包封装在同一个基带桢里。基带桢不得不降级。而如下图操作，能实现更好的系统效率。 </p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>本文主要参考 ETSI 官方协议文档。</p>]]></content>
      
      
      
        <tags>
            
            <tag> satellite </tag>
            
            <tag> protocol </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frida学习[持续更……]</title>
      <link href="2021/04/06/frida/"/>
      <url>2021/04/06/frida/</url>
      
        <content type="html"><![CDATA[<p>记录frida学习的一些东西。</p><span id="more"></span><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>kali2020</li><li>小米6已ROOT刷入android10原生系统</li><li>python版本3.8</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h2><pre class="language-shell" data-language="shell"><code class="language-shell">pip install fridapip install frida-tools</code></pre><p>也可以直接安装对应版本</p><pre class="language-shell" data-language="shell"><code class="language-shell">pip install frida&#x3D;&#x3D;x.x.xpip install frida-tools&#x3D;&#x3D;x.x.x</code></pre><h2 id="安装server"><a href="#安装server" class="headerlink" title="安装server"></a>安装server</h2><h3 id="下载server"><a href="#下载server" class="headerlink" title="下载server"></a>下载server</h3><p>直接进入 <a href="https://github.com/frida/frida/releases">frida rlease</a> 页面下载，这里要与安装的frida库版本对应，同时与手机架构对应。</p><h3 id="安装server-1"><a href="#安装server-1" class="headerlink" title="安装server"></a>安装server</h3><ul><li>adb push frida-server &#x2F;data&#x2F;local&#x2F;tmp # 把serverpush到手机中</li><li>adb shell # 进入手机控制台</li><li>su # 获取控制权限</li><li>cd &#x2F;data&#x2F;local&#x2F;tmp #进入目录</li><li>chmod 777 frida-server #添加权限</li><li>.&#x2F;frida-server &amp; #添加到后台运行</li></ul><p>可以通过命令frida-ps -R 检查是否成功。</p><h1 id="frida-基础"><a href="#frida-基础" class="headerlink" title="frida 基础"></a>frida 基础</h1><h2 id="基础样例"><a href="#基础样例" class="headerlink" title="基础样例"></a>基础样例</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> frida<span class="token comment"># 连接安卓机上的frida-server</span>device <span class="token operator">=</span> frida<span class="token punctuation">.</span>get_usb_device<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment"># 启动`demo02`这个app</span>pid <span class="token operator">=</span> device<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"com.minhal.demo2"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>device<span class="token punctuation">.</span>resume<span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token comment">#通过pid重新启动</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>session <span class="token operator">=</span> device<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token comment"># 加载a.js脚本</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"a.js"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    script <span class="token operator">=</span> session<span class="token punctuation">.</span>create_script<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#上一步连接到的session 去执行js</span>script<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 脚本会持续运行等待输入</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="hook参数、修改结果（重载、隐藏函数的处理）"><a href="#hook参数、修改结果（重载、隐藏函数的处理）" class="headerlink" title="hook参数、修改结果（重载、隐藏函数的处理）"></a>hook参数、修改结果（重载、隐藏函数的处理）</h2><p>demo样例源代码。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>minhal<span class="token punctuation">.</span>demo2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">androidx<span class="token punctuation">.</span>appcompat<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">AppCompatActivity</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Log</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> total <span class="token operator">=</span> <span class="token string">"@@@###@@@"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"Minhal.string"</span> <span class="token punctuation">,</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">"Fuck U!!!!!!!!!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token punctuation">,</span> <span class="token keyword">int</span> y <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"Minhal.Sum"</span> <span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token class-name">String</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        total <span class="token operator">+=</span>x<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span> <span class="token function">secret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> total<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>把这段代码编译成apk后安装在测试机，连接到主机通过 可以查看系统日志。</p><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20210406172720.png" alt="1" loading="lazy"></p><p>然后接下来是js代码</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Script loaded successfully "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Java<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Inside java perform function"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//定位类</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Java<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span><span class="token string">"com.minhal.demo2.MainActivity"</span> <span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">onMatch</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//该类有多少个实例，该回调就会被触发多少次</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Found instance: "</span><span class="token operator">+</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Result of secret func: "</span> <span class="token operator">+</span> instance<span class="token punctuation">.</span><span class="token function">secret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">onComplete</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> my_class <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"com.minhal.demo2.MainActivity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> string_class <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取String类型</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Java.Use.Successfully!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定位类成功！</span>    <span class="token comment">//在这里更改类的方法的实现（implementation）</span>    my_class<span class="token punctuation">.</span>fun<span class="token punctuation">.</span><span class="token function">overload</span><span class="token punctuation">(</span><span class="token string">"int"</span> <span class="token punctuation">,</span> <span class="token string">"int"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">implementation</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//打印替换前的参数</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"original call: fun("</span><span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//把参数替换成2和5，依旧调用原函数</span>        <span class="token keyword">var</span> ret_value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret_value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    my_class<span class="token punctuation">.</span>fun<span class="token punctuation">.</span><span class="token function">overload</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">implementation</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"*************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> my_string <span class="token operator">=</span> string_class<span class="token punctuation">.</span>$<span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">"My TeSt String#####"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//new一个新字符串</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Original arg: "</span> <span class="token operator">+</span>x <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> ret <span class="token operator">=</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span>my_string<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用新的参数替换旧的参数，然后调用原函数获取结果</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Return value: "</span><span class="token operator">+</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"*************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>执行脚本</p><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20210406172721.png" alt="3" loading="lazy"></p><p>查看日志变化</p><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20210406172722.png" alt="2" loading="lazy"></p><h2 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h2><p>这个实力主要是实现在py脚本中也可以调用secret函数。这里主要是使用的frida提供的RPC功能（Remote Procedure Call）</p><p>apk文件还是上一个样例的文件。</p><p>现在修改下js脚本。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Script loaded successfully "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">callsecretFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Java<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Inside java perform function"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//定位类</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Java<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span><span class="token string">"com.minhal.demo2.MainActivity"</span> <span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token function-variable function">onMatch</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//该类有多少个实例，该回调就会被触发多少次</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Found instance: "</span><span class="token operator">+</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Result of secret func: "</span> <span class="token operator">+</span> instance<span class="token punctuation">.</span><span class="token function">secret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function-variable function">onComplete</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>rpc<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">callsecretfunction</span><span class="token operator">:</span>callsecretFun<span class="token comment">//把callSecretFun函数导出为callsecretfunction符号，导出名不可以有大写字母或者下划线</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>然后修改对应的py代码</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> frida<span class="token comment"># 连接安卓机上的frida-server</span>device <span class="token operator">=</span> frida<span class="token punctuation">.</span>get_usb_device<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment"># 启动`demo02`这个app</span>pid <span class="token operator">=</span> device<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"com.minhal.demo2"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>device<span class="token punctuation">.</span>resume<span class="token punctuation">(</span>pid<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>session <span class="token operator">=</span> device<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token comment"># 加载s1.js脚本</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"a.js"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    script <span class="token operator">=</span> session<span class="token punctuation">.</span>create_script<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>script<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>command <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">while</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    command <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Enter command:\n1: Exit\n2: Call secret function\nchoice:"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> command <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">elif</span> command <span class="token operator">==</span> <span class="token string">"2"</span><span class="token punctuation">:</span> <span class="token comment">#在这里调用</span>        script<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>callsecretfunction<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行python脚本得到下面内容：</p><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20210406172723.jpg" alt="4" loading="lazy"></p><h2 id="动态修改"><a href="#动态修改" class="headerlink" title="动态修改"></a>动态修改</h2><p>这里主要实现的功能不仅仅是可以用python调用app的函数。还要做到把数据从app传到python程序中，通过python代码修改传回到app里。<br>app代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>minhal<span class="token punctuation">.</span>demo3</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">androidx<span class="token punctuation">.</span>appcompat<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">AppCompatActivity</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">View</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">EditText</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">TextView</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">EditText</span> username_et<span class="token punctuation">;</span>    <span class="token class-name">EditText</span> password_et<span class="token punctuation">;</span>    <span class="token class-name">TextView</span> message_tv<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        password_et <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EditText</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>editText2<span class="token punctuation">)</span><span class="token punctuation">;</span>        username_et <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EditText</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>editText<span class="token punctuation">)</span><span class="token punctuation">;</span>        message_tv <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TextView</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>textView<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>button<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>username_et<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    message_tv<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"You cannot login as admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//hook target</span>                message_tv<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"Sending to the server :"</span> <span class="token operator">+</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span><span class="token punctuation">(</span>username_et<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> password_et<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>app界面</p><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20210406172724.png" alt="5" loading="lazy"></p><p>接下来操作是python代码获取输入内容，并修改输入内容然后传输到app，通过验证。（包括admin）<br>js代码主要实现是先截到输入内容，传输到python代码，然后等python传入新数据继续执行。<br>js代码</p><pre class="language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">console.log(&quot;Script loaded successfully &quot;);Java.perform(function () &#123;    var tv_class &#x3D; Java.use(&quot;android.widget.TextView&quot;);    tv_class.setText.overload(&quot;java.lang.CharSequence&quot;).implementation &#x3D; function (x) &#123;        var string_to_send &#x3D; x.toString();        var string_to_recv;        console.log(&quot;Script loaded successfully &quot;);        send(string_to_send); &#x2F;&#x2F; 将数据发送给python的python代码        recv(function (received_json_object) &#123;            string_to_recv &#x3D; received_json_object.my_data            console.log(&quot;string_to_recv: &quot; + string_to_recv);        &#125;).wait(); &#x2F;&#x2F;收到数据之后，再执行下去        var my_string &#x3D; Java.use(&quot;java.lang.String&quot;).$new(string_to_recv);        this.setText(my_string);    &#125;&#125;);</code></pre><p>python代码</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> frida<span class="token keyword">import</span> base64<span class="token keyword">def</span> <span class="token function">my_message_handler</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    <span class="token keyword">if</span> message<span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"send"</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span>message<span class="token punctuation">[</span><span class="token string">"payload"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> message<span class="token punctuation">[</span><span class="token string">"payload"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'message:'</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        user<span class="token punctuation">,</span>pw <span class="token operator">=</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"user:"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span>        data <span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"admin"</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> pw<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"encoded data:"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>        script<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"my_data"</span><span class="token punctuation">:</span> data<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment"># 将JSON对象发送回去</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Modified data sent"</span><span class="token punctuation">)</span><span class="token comment"># 连接安卓机上的frida-server</span>device <span class="token operator">=</span> frida<span class="token punctuation">.</span>get_usb_device<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment"># 启动`demo02`这个app</span>pid <span class="token operator">=</span> device<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"com.minhal.demo3"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>device<span class="token punctuation">.</span>resume<span class="token punctuation">(</span>pid<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>session <span class="token operator">=</span> device<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token comment"># 加载a.js脚本</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"a.js"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    script <span class="token operator">=</span> session<span class="token punctuation">.</span>create_script<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>script<span class="token punctuation">.</span>on<span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> my_message_handler<span class="token punctuation">)</span>script<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>直接运行python代码，然后输入新的用户名和密码，我们原程序是本来不可以输入admin的，我们本代码就是通过输入其他内容，通过frida更改他的用户名参数，使得输入内容用户名为admin。<br>执行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20210406172725.png" alt="6" loading="lazy"></p><p>然后就实现了动态内容的修改。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>Android Application Security Study [<a href="https://github.com/r0ysue/AndroidSecurityStudy]">https://github.com/r0ysue/AndroidSecurityStudy]</a><br>Frida Android hook[<a href="https://eternalsakura13.com/2020/07/04/frida/]">https://eternalsakura13.com/2020/07/04/frida/]</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年总结</title>
      <link href="2021/01/01/2020_summary/"/>
      <url>2021/01/01/2020_summary/</url>
      
        <content type="html"><![CDATA[<blockquote><p>2020年过的有些仓促，这一年发生了很多事情。这一年或许是近些年的一个转折点，对于自己也算一直很重要的节点吧。一直想写个总结，总算开始敲起了流水账。2021新的一年，也要加油了。</p></blockquote><span id="more"></span><hr><p>“新冠”是2020最热的事件。2020年年初考完试兜兜转转最终9号还是踏上了回家的路。从知乎看到武汉有确诊不明传染病到回到家后的越来越严重。当时也没想到自己正在经历一场会影响全球的大事件。疫情让2020的春节不一样，不串门窝在家里看到的是大家晒吃的，那段时间闷不住了就是出去去自家后山上面走路散步。那段时间，时常由于焦虑感到胸闷，误以为自己得了新冠。</p><p>2020也是第一次体会到在“家里蹲”上大学，还记得第一课的计网，早早起床准备着上课，之后也逐渐变的懒散起来。由于疫情在家上课也使得自己体重上升，在家上课没有了想家的烦恼，过得格外快。在听到9月返校的时候，毫无犹豫订到了去往学校的车票。</p><p>国庆节，一个人去了武大的疫情纪念馆，看到了华西的医疗队伍，莫名的有些亲切感。看到几岁小朋友给护士写的信，忍不住落泪；看到一线医护人员穿过的战袍，用的器械。感受到的都是祖国的强大。</p><p>2021年，也希望疫情逐渐过去。在2020的尾声，国家卫健委也宣布了疫苗免费的好消息。赞！</p><hr><p>2020年，参加了很多竞赛，虽然疫情原因很多竞赛取消了。从年初开始准备的国赛作品赛；虽然国赛作品赛被很多人称为PPT大赛，但还是收获颇多。项目开发，共同柔和；文字打磨，答辩等都是一次又一次的修改。在最终答辩“翻车”中，还是功夫不负有心人拿到了一等奖和国内仅2个的最具创新价值奖。通过这个奖被保推到了互联网+全国总决赛。9月份，就在互联网+的忙碌中度过。</p><p>9月几乎没上过课，一直在望江备战决赛。互联网+的比赛比起之前的技术类比赛显然风格不一样，所以经验不足。好在在学长的帮助组成了一个团队。这个月里，每天都挺累的。常常熬夜，偶尔也会通宵。最终比赛结果也没能进入围。但这个月确实收获颇多。这一个月如梦一般，相似体验了一次创业；了解到了很多公司的运作，产品模式。也见到了很多大佬。这一次无成本的“创业”经历也是大学里最难忘的吧。</p><p>作品赛之外主要就是参加CTF竞赛，省赛今年如愿拿到了一等奖；国赛不尽人意，有自己的失误，有比赛场上环境的变化，最终结果不是太好。如果明年有机会也可能重新冲回来。之后还在西湖论剑与很多朋友面基，第一次参加IoT竞赛经验还是不足，需要总结的还是很多。</p><p>这一年，协会发展也很不错。从年中开始，跟小伙伴一起把协会发展模式改变，办两次比赛也发现了后生力量。希望2021年，协会不出现断层现象吧，发展越来越好。</p><p>这一年的技术长进感觉不是很满意，很多目标也没怎么做好。知乎，公众号可能是很大一部分知识的来源；对于根基知识与知识架构的建立还是有很大的不足，在2021年要改变现状，多看一些书籍来构建知识网络。大学以来，也不怎么看技术外的书了，这一年也逐渐明白到技术不是唯一，在2021一年还是需要建起那些非技术书籍增加一些人文素养。</p><p>2020年已去，2021年出发！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 小记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio调试apk</title>
      <link href="2020/11/07/android_studio_debugging_APP/"/>
      <url>2020/11/07/android_studio_debugging_APP/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在逆向一个某工程性的APK文件，由于加了一些混淆和其他原因，需要动态调试理解一些关键代码，于是搭建了android studio调试环境。</p></blockquote><span id="more"></span><p>APK的调试有很多方法，个人还是习惯Android Studio 配合JEB的伪代码来进行调试。</p><h2 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h2><p>首先需要使用工具反编译apk。</p><h3 id="Apktool"><a href="#Apktool" class="headerlink" title="Apktool"></a>Apktool</h3><p>可以直接用Apktool反编译 </p><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20201219151801.png" alt="1" loading="lazy"></p><p>也也可以通过Android Killer反编译（原理其实就是集成Apttool）</p><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20201219151804.png" alt="3" loading="lazy"></p><p>还可以使用  <strong>java -jar apktool.jar d MyApp.apk</strong> 命令调用apktool。</p><p>Android Studio3.x已经自带反编译，所以可以直接导入。</p><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20201219151803.png" alt="4" loading="lazy"></p><h2 id="导入Android-Studio"><a href="#导入Android-Studio" class="headerlink" title="导入Android Studio"></a>导入Android Studio</h2><p>如果没用自AS自带的反编译，可以选择<strong>Import Project</strong>导入</p><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20201219151802.png" alt="2" loading="lazy"><br>一直选择“Next“。</p><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>安装smaliidea插件，来对smali代码进行处理。</p><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20201219151805.png" alt="5" loading="lazy"></p><h2 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h2><p>AndroidManifest.xml文件中在application中改为true(如果没有添加上)：</p><blockquote><p>​     <em>android:debuggable&#x3D;”true”</em></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20201219151807.png" alt="7" loading="lazy"></p><h2 id="设置Sources-Root"><a href="#设置Sources-Root" class="headerlink" title="设置Sources Root"></a>设置Sources Root</h2><p> 在AndroidStudio工程中右键点击smali文件夹，设定Mark Directory as -&gt; Sources Root</p><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20201219151808.png" alt="8" loading="lazy"></p><h2 id="重新编译"><a href="#重新编译" class="headerlink" title="重新编译"></a>重新编译</h2><p>如果之前改过代码，这步要重新编译签名程序。</p><p> <strong>java -jar apktool.jar b MyApp -o newMyApp.apk</strong></p><h2 id="启动DDMS"><a href="#启动DDMS" class="headerlink" title="启动DDMS"></a>启动DDMS</h2><p>启动DDMS，在Android Studio 3.x可能在tools菜单找不到DDMS，可以直接在terninal 输入 monitor启动。</p><p>打开后可能会遇到<br><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20201219151806.png" alt="6" loading="lazy"></p><p>这个时候可以按照提示改下端口号。</p><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20201219151809.png" alt="9" loading="lazy"></p><p>如果改了还不行可以先启动monitor，再打开Android Studio即可。</p><h2 id="配置调试"><a href="#配置调试" class="headerlink" title="配置调试"></a>配置调试</h2><p>在AndroidStudio里面配置远程调试的选项，选择Run -&gt; Edit Configurations</p><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20201219151810.png" alt="10" loading="lazy"></p><p>然后选择加号新建一个远程调试</p><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20201219151811.png" alt="11" loading="lazy"></p><p>然后进行配置</p><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20201219151812.png" alt="12" loading="lazy"></p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>配置完成后即可调试，直接在想调试的地方下断点。在DDMS中选择要调试的程序。</p><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20201219151813.png" alt="13" loading="lazy"></p><p>然后Run-&gt;Debug ‘name’来启动调试。</p><h2 id="模拟器连接"><a href="#模拟器连接" class="headerlink" title="模拟器连接"></a>模拟器连接</h2><p>如果通过模拟器来调试可以参考模拟器连接端口</p><ul><li>夜神模拟器：adb connect 127.0.0.1:62001</li><li>逍遥安卓模拟器：adb connect 127.0.0.1:21503</li><li>天天模拟器：adb connect 127.0.0.1:6555 </li><li>海马玩模拟器：adb connect 127.0.0.1:53001</li><li>网易MUMU模拟器：adb connect 127.0.0.1:7555</li><li>原生模拟器：adb connect (你的IP地址)：5555</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RCTF cipher</title>
      <link href="2020/06/02/RCTF-cipher/"/>
      <url>2020/06/02/RCTF-cipher/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一个mips64架构的Re题目。</p></blockquote><span id="more"></span><h3 id="检查文件格式"><a href="#检查文件格式" class="headerlink" title="检查文件格式"></a>检查文件格式</h3><p>检查文件是个一个mips64大端程序，穷人用不起IDA pro 7.5，只能上ghidra来进行反编译操作。</p><h3 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h3><ul><li>题目给出了一个加密后的文本</li></ul><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20200602145422.png" alt="12" loading="lazy"><br>最后多出来的0A是个换行符。</p><ul><li>用ghidra反汇编，进入主函数</li></ul><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20200602122538.png" alt="1" loading="lazy"></p><ul><li>时间做随机种子， cipher应该就是加密函数了。</li><li>进入cipher，发现有个循环，每16位为一组数据，由于我们结果为48位，所以应该是就分为三组进行操作。encrypt是加密函数，第一个参数是加密结果，第二个参数是输入内容。<br><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20200602122539.png" alt="2" loading="lazy"></li><li>再次进入encrypt函数，由于反汇编偏差，rand这个随机数参数未能识别传进来。in_a2就是这个参数。<br><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20200602122540.png" alt="3" loading="lazy"></li><li>根据代码，修复一些变量名。<br><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20200602122541.png" alt="4" loading="lazy"></li><li>while循环为主要加密过程，主要进行了一些位运算。，写出位运算逆向脚本<pre class="language-python" data-language="python"><code class="language-python">ld <span class="token operator">=</span><span class="token punctuation">[</span>s2<span class="token punctuation">]</span>lc <span class="token operator">=</span> <span class="token punctuation">[</span>s1<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  ld<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>rright<span class="token punctuation">(</span>ld<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> lc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> i<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffffffffffffffff</span> <span class="token punctuation">)</span>  lc<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rright<span class="token punctuation">(</span>lc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">61</span><span class="token punctuation">)</span> <span class="token operator">^</span> ld<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  x1 <span class="token operator">=</span> rright<span class="token punctuation">(</span>x1<span class="token operator">^</span>x2<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>  x2 <span class="token operator">=</span> rright<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x2<span class="token operator">^</span>lc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>x1<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffffffffffffffff</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> x1<span class="token punctuation">,</span>x2</code></pre></li></ul><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><ul><li><p>while循环中，srand未知，输出结果已知，输入内容未知。所以我们逆向出这个运算，还是需要得到srand值，才可能解决题目</p></li><li><p>srand 可以采取爆破的形式，由于比赛flag形式为RCTF{xxxxx},所以我们可以根据第一组数据进行爆破，得到srand。每个srand255（无符号）种情况，255*255总共65535种情况。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">65536</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s1 <span class="token operator">=</span> i    s2 <span class="token operator">=</span> <span class="token number">0</span>    s1<span class="token punctuation">,</span>s2 <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">'QQ'</span><span class="token punctuation">,</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'>QQ'</span><span class="token punctuation">,</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span>    x1<span class="token punctuation">,</span>x2 <span class="token operator">=</span> reverse<span class="token punctuation">(</span>lists2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>lists2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span>    str1 <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'>Q'</span><span class="token punctuation">,</span>x1<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'RCTF'</span> <span class="token keyword">in</span> str1<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">break</span></code></pre></li><li><p>得到srand，然后直接逆向解决就好了。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>lists2<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s1<span class="token punctuation">,</span>s2 <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">'QQ'</span><span class="token punctuation">,</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'>QQ'</span><span class="token punctuation">,</span><span class="token number">4980</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    x1<span class="token punctuation">,</span>x2 <span class="token operator">=</span> reverse<span class="token punctuation">(</span>lists2<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>lists2<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span>    flag <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'>Q'</span><span class="token punctuation">,</span>x1<span class="token punctuation">)</span>    flag <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'>Q'</span><span class="token punctuation">,</span>x2<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span></code></pre></li></ul><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="language-none"><code class="language-none">import structdef encrypt(a,b,c,d ):  b &#x3D; (rright(b,8) + a ^ c)&amp;0xffffffffffffffff  a &#x3D; rright(a,61) ^ b  for i in range(0x1f):    d &#x3D; (rright(d,8) + c ^ i)&amp;0xffffffffffffffff    c &#x3D; rright(c,61) ^ d    b &#x3D; (rright(b,8) + a ^ c)&amp;0xffffffffffffffff    a &#x3D; rright(a,61) ^ b      return a,b  def recerse(x1,x2,s1,s2):  ld &#x3D;[s2]  lc &#x3D; [s1]  for i in range(31):    ld.append((rright(ld[i],8) + lc[i] ^ i)&amp;0xffffffffffffffff )    lc.append(rright(lc[i],61) ^ ld[i+1])  for i in range(31,-1,-1):    x1 &#x3D; rright(x1^x2,3)    x2 &#x3D; rright(((x2^lc[i])-x1)&amp;0xffffffffffffffff,56)      return x1,x2def rright(v,n):  return ((v &gt;&gt; n) + (v &lt;&lt; (64-n)))&amp;0xfffffffffffffffflists &#x3D; [0x2A, 0x00, 0xF8, 0x2B, 0xE1, 0x1D, 0x77, 0xC1, 0xC3, 0xB1, 0x71, 0xFC, 0x23, 0xD5, 0x91, 0xF4, 0x30, 0xF1, 0x1E, 0x8B, 0xC2, 0x88, 0x59, 0x57, 0xD5, 0x94, 0xAB, 0x77, 0x42, 0x2F, 0xEB, 0x75, 0xE1, 0x5D, 0x76, 0xF0, 0x46, 0x6E, 0x98, 0xB9, 0xB6, 0x51, 0xFD, 0xB5, 0x5D, 0x77, 0x36, 0xF2]lists2 &#x3D;[]for i in lists:    lists2.append(chr(i))lists2 &#x3D; struct.unpack(&#39;&gt;QQQQQQ&#39;,&#39;&#39;.join(lists2))for i in range(65536):    s1 &#x3D; i    s2 &#x3D; 0    s1,s2 &#x3D; struct.unpack(&#39;QQ&#39;,struct.pack(&#39;&gt;QQ&#39;,s1,s2))    x1,x2 &#x3D; reverse(lists2[0],lists2[1],s1,s2)    str1 &#x3D; struct.pack(&#39;&gt;Q&#39;,x1)    if &#39;RCTF&#39; in str1:        print(i)        break    flag &#x3D; &#39;&#39;for i in range(len(lists2)&#x2F;2):    s1,s2 &#x3D; struct.unpack(&#39;QQ&#39;,struct.pack(&#39;&gt;QQ&#39;,4980,0))    x1,x2 &#x3D; reverse(lists2[2*i],lists2[2*i+1],s1,s2)    flag +&#x3D; struct.pack(&#39;&gt;Q&#39;,x1)    flag +&#x3D; struct.pack(&#39;&gt;Q&#39;,x2)print (flag)</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这个题目比较坑的两个地方是注意大小端，还有就是加号与异或运算优先级，如果这两个搞错，很容易被卡住的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 geekgame(scuctf) Reverse出题思路&amp;writeup</title>
      <link href="2020/05/23/geekgame(scuctf)/"/>
      <url>2020/05/23/geekgame(scuctf)/</url>
      
        <content type="html"><![CDATA[<p>2020 scuctf 如期举行，比赛也相当激烈。正好要写官方wp，顺便更新到博客吧。</p><span id="more"></span><h2 id="真正的签到"><a href="#真正的签到" class="headerlink" title="真正的签到"></a>真正的签到</h2><h3 id="出题思路"><a href="#出题思路" class="headerlink" title="出题思路"></a>出题思路</h3><p>本身作为签到题就没必要太刁难人，主要考察脱压缩壳（re选手基础技能），正好在4月的脱壳分享会也说了要出一道这种题。脱完壳后就打算搞个简单的加减乘除，但是还是出题时候考虑不周，出现了多解的情况。（按照正常思路一般都是一个解。）</p><p>问题主要出在当时做了一个除法的操作，因为C语言中5&#x2F;2 与4&#x2F;2都为2。</p><h3 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h3><h4 id="法1"><a href="#法1" class="headerlink" title="法1"></a>法1</h4><ul><li><p>第一步，查壳，发现为upx。</p><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20200526001329.png" alt="1" loading="lazy"></p></li><li><p>直接可以用脱壳软件脱壳也可esp定律等手动脱壳。</p></li><li><p>脱壳后分析代码。</p><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20200526001330.png" alt="2" loading="lazy"></p></li><li><p>直接写脚本</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> fstr<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"pbm`KkL`dKQ2KeJLd"</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> theflag<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> flag<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"scu_ctf_f4k3_f14g"</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">17</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    theflag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> fstr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">-</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">17</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>theflag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span></code></pre></li></ul><h4 id="法2"><a href="#法2" class="headerlink" title="法2"></a>法2</h4><ul><li>前面步骤一直，后面直接angr梭哈</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angrp <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'sign.exe'</span><span class="token punctuation">,</span> auto_load_libs<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>st <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>call_state<span class="token punctuation">(</span>addr<span class="token operator">=</span><span class="token number">0x401520</span><span class="token punctuation">,</span> add_options<span class="token operator">=</span>angr<span class="token punctuation">.</span>options<span class="token punctuation">.</span>unicorn<span class="token punctuation">)</span>sim <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>st<span class="token punctuation">)</span>sim<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span><span class="token number">0x40155e</span><span class="token punctuation">,</span> avoid<span class="token operator">=</span><span class="token number">0x40156c</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sim<span class="token punctuation">.</span>one_found<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>这个地方就可以看出，有多解情况了。</p><h2 id="太空大战"><a href="#太空大战" class="headerlink" title="太空大战"></a>太空大战</h2><h3 id="出题思路-1"><a href="#出题思路-1" class="headerlink" title="出题思路"></a>出题思路</h3><p>  这题是由God sun出的，大概主要考察一个.net，加之让比赛变的更有趣一点，放了个小游戏上去。只要打完180个灰机（一个不落）控制台就会输出flag</p><p>  （180个飞机，无需逆向，轻轻松松就可以打败。</p><h3 id="解题方法-1"><a href="#解题方法-1" class="headerlink" title="解题方法"></a>解题方法</h3><ul><li>关键代码在assets&#x2F;bin&#x2F;Date&#x2F;Managed&#x2F;Assembly-CSharp.dll</li><li>⽤.NET Reflector打开分析</li></ul><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20200526001334.jpg" alt="3" loading="lazy"></p><ul><li><p>经过分析可以得知，每击落一架分级，调用一次这个关键方法。由代码可以看到总共需要摧毁了180个。（其实总共也就180个）</p></li><li><p>写解题脚本</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlibmask <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">49552</span><span class="token punctuation">,</span><span class="token number">26516</span><span class="token punctuation">,</span><span class="token number">15988</span><span class="token punctuation">,</span><span class="token number">29987</span><span class="token punctuation">,</span><span class="token number">52902</span><span class="token punctuation">,</span><span class="token number">33151</span><span class="token punctuation">,</span><span class="token number">8086</span><span class="token punctuation">,</span><span class="token number">39920</span><span class="token punctuation">,</span><span class="token number">3604</span><span class="token punctuation">,</span><span class="token number">21497</span><span class="token punctuation">,</span><span class="token number">19862</span><span class="token punctuation">,</span><span class="token number">12268</span><span class="token punctuation">,</span><span class="token number">50822</span><span class="token punctuation">,</span><span class="token number">26111</span><span class="token punctuation">,</span><span class="token number">35391</span><span class="token punctuation">,</span><span class="token number">20661</span><span class="token punctuation">,</span><span class="token number">6370</span><span class="token punctuation">,</span><span class="token number">14029</span><span class="token punctuation">,</span><span class="token number">26707</span><span class="token punctuation">,</span><span class="token number">42890</span><span class="token punctuation">,</span><span class="token number">19391</span><span class="token punctuation">,</span><span class="token number">13836</span><span class="token punctuation">,</span><span class="token number">61102</span><span class="token punctuation">,</span><span class="token number">38705</span><span class="token punctuation">,</span><span class="token number">45159</span><span class="token punctuation">,</span><span class="token number">12927</span><span class="token punctuation">,</span><span class="token number">47794</span><span class="token punctuation">,</span><span class="token number">39183</span><span class="token punctuation">,</span><span class="token number">20776</span><span class="token punctuation">,</span><span class="token number">44532</span><span class="token punctuation">,</span><span class="token number">18925</span><span class="token punctuation">,</span><span class="token number">4854</span><span class="token punctuation">,</span><span class="token number">60596</span><span class="token punctuation">,</span><span class="token number">11941</span><span class="token punctuation">,</span><span class="token number">28994</span><span class="token punctuation">,</span><span class="token number">11166</span><span class="token punctuation">,</span><span class="token number">57586</span><span class="token punctuation">,</span><span class="token number">48918</span><span class="token punctuation">,</span><span class="token number">13199</span><span class="token punctuation">,</span><span class="token number">42006</span><span class="token punctuation">,</span><span class="token number">62781</span><span class="token punctuation">,</span><span class="token number">31480</span><span class="token punctuation">,</span><span class="token number">50464</span><span class="token punctuation">,</span><span class="token number">53893</span><span class="token punctuation">,</span><span class="token number">21233</span><span class="token punctuation">,</span><span class="token number">61456</span><span class="token punctuation">,</span><span class="token number">55842</span><span class="token punctuation">,</span><span class="token number">46591</span><span class="token punctuation">,</span><span class="token number">10574</span><span class="token punctuation">,</span><span class="token number">45253</span><span class="token punctuation">,</span><span class="token number">50991</span><span class="token punctuation">,</span><span class="token number">44866</span><span class="token punctuation">,</span><span class="token number">45945</span><span class="token punctuation">,</span><span class="token number">17105</span><span class="token punctuation">,</span><span class="token number">27273</span><span class="token punctuation">,</span><span class="token number">18925</span><span class="token punctuation">,</span><span class="token number">41001</span><span class="token punctuation">,</span><span class="token number">64310</span><span class="token punctuation">,</span><span class="token number">51846</span><span class="token punctuation">,</span><span class="token number">46279</span><span class="token punctuation">,</span><span class="token number">14977</span><span class="token punctuation">,</span><span class="token number">61079</span><span class="token punctuation">,</span><span class="token number">26330</span><span class="token punctuation">,</span><span class="token number">1192</span><span class="token punctuation">,</span><span class="token number">61190</span><span class="token punctuation">,</span><span class="token number">38989</span><span class="token punctuation">,</span><span class="token number">36161</span><span class="token punctuation">,</span><span class="token number">17001</span><span class="token punctuation">,</span><span class="token number">38576</span><span class="token punctuation">,</span><span class="token number">49567</span><span class="token punctuation">,</span><span class="token number">55929</span><span class="token punctuation">,</span><span class="token number">31759</span><span class="token punctuation">,</span><span class="token number">54550</span><span class="token punctuation">,</span><span class="token number">12759</span><span class="token punctuation">,</span><span class="token number">13756</span><span class="token punctuation">,</span><span class="token number">60929</span><span class="token punctuation">,</span><span class="token number">36365</span><span class="token punctuation">,</span><span class="token number">27308</span><span class="token punctuation">,</span><span class="token number">57132</span><span class="token punctuation">,</span><span class="token number">42483</span><span class="token punctuation">,</span><span class="token number">42263</span><span class="token punctuation">,</span><span class="token number">57086</span><span class="token punctuation">,</span><span class="token number">55839</span><span class="token punctuation">,</span><span class="token number">13568</span><span class="token punctuation">,</span><span class="token number">37191</span><span class="token punctuation">,</span><span class="token number">18388</span><span class="token punctuation">,</span><span class="token number">34592</span><span class="token punctuation">,</span><span class="token number">4189</span><span class="token punctuation">,</span><span class="token number">65492</span><span class="token punctuation">,</span><span class="token number">24673</span><span class="token punctuation">,</span><span class="token number">27016</span><span class="token punctuation">,</span><span class="token number">6941</span><span class="token punctuation">,</span><span class="token number">33229</span><span class="token punctuation">,</span><span class="token number">4180</span><span class="token punctuation">,</span><span class="token number">35454</span><span class="token punctuation">,</span><span class="token number">64874</span><span class="token punctuation">,</span><span class="token number">36708</span><span class="token punctuation">,</span><span class="token number">22948</span><span class="token punctuation">]</span>l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>mask<span class="token punctuation">)</span>secret <span class="token operator">=</span> <span class="token string">"jFEQ6xFkUxKGzUbn"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">181</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    secret <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">(</span>secret<span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>mask<span class="token punctuation">[</span>i<span class="token operator">%</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'6a37460f25c719a4'</span> <span class="token keyword">in</span> secret<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span>secret<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></li><li><p>注意这里很多选手以为只调用一次，所以直接拿180%98 去处理，算出来的是错的。</p></li></ul><h2 id="PY-交易"><a href="#PY-交易" class="headerlink" title="PY 交易"></a>PY 交易</h2><h3 id="出题思路-2"><a href="#出题思路-2" class="headerlink" title="出题思路"></a>出题思路</h3><p>这个题目出题主要想考察一下python的逆向，校内打校外比赛的不多，见得题目相对较少。所以本着拓宽学习的目的，出了这道还原字节码的题目。相对来说这道题不是太难，通过相关博客搜索，然后一步步分析还原，还原后dis检验。</p><ul><li>参考文章 <a href="https://bbs.pediy.com/thread-246683.htm">https://bbs.pediy.com/thread-246683.htm</a></li></ul><h3 id="解题方法-2"><a href="#解题方法-2" class="headerlink" title="解题方法"></a>解题方法</h3><ul><li><p>首先直接还原python代码就好了，还原结果如下</p><pre class="language-python" data-language="python"><code class="language-python">inputs <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"please your flag:"</span><span class="token punctuation">)</span>inputs <span class="token operator">=</span> inputs<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>flag <span class="token operator">=</span> <span class="token string">"th31_scuctf_eXclus1v3"</span>theflag <span class="token operator">=</span> <span class="token string">""</span>i <span class="token operator">=</span> <span class="token number">0</span>j <span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error!"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    theflag <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">ord</span><span class="token punctuation">(</span>inputs<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    theflag <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">ord</span><span class="token punctuation">(</span>inputs<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    theflag <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">ord</span><span class="token punctuation">(</span>inputs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>flags <span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span>theflag<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flags<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>flags<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token comment">#Flag scuctf&#123;&#125;</span><span class="token comment">#The flag text starts with "d1" and the eighth bit is "3"</span>flagt <span class="token operator">=</span> flags<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">]</span>theflag <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>flagt<span class="token punctuation">)</span><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    theflag <span class="token operator">+=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>flags<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>theflag <span class="token operator">==</span> <span class="token string">'×\x8bÙÍ\x8cÓÜî¤ú±¬¤¤úÖíÒ'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You win!"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error!!!"</span><span class="token punctuation">)</span></code></pre></li><li><p>接着就是逆向分析，写解题脚本</p></li></ul><h4 id="法1-1"><a href="#法1-1" class="headerlink" title="法1"></a>法1</h4><pre class="language-python" data-language="python"><code class="language-python">enflag <span class="token operator">=</span> <span class="token string">'×\x8bÙÍ\x8cÓÜî¤ú±¬¤¤úÖíÒ'</span>flag <span class="token operator">=</span> <span class="token string">'th31_scuctf_eXclus1v3'</span>ans <span class="token operator">=</span> <span class="token string">'d1'</span> <span class="token operator">+</span> <span class="token string">'*'</span> <span class="token operator">*</span> <span class="token number">19</span>step1 <span class="token operator">=</span> enflag<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> enflag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>theflag <span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    theflag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>step1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">)</span>theflag <span class="token operator">+=</span> step1<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token punctuation">]</span>inputs <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    inputs<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>theflag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    inputs<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>theflag<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    inputs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>theflag<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>inputs<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'3'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'scuctf&#123;'</span> <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&#125;'</span><span class="token punctuation">)</span></code></pre><h4 id="法2-1"><a href="#法2-1" class="headerlink" title="法2"></a>法2</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> z3 <span class="token keyword">import</span> <span class="token operator">*</span>flag <span class="token operator">=</span> <span class="token string">"th31_scuctf_eXclus1v3"</span>dist <span class="token operator">=</span> <span class="token string">"×ÙÍÓÜî¤ú±¬¤¤úÖíÒ"</span>inp <span class="token operator">=</span> <span class="token punctuation">[</span>BitVec<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'x%s'</span> <span class="token operator">%</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>theflag <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    theflag<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> inp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    theflag<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> inp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    theflag<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> inp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>flags <span class="token operator">=</span> <span class="token punctuation">[</span>_ <span class="token keyword">for</span> _ <span class="token keyword">in</span> theflag<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flags<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> flags<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">20</span>theflag <span class="token operator">=</span> theflag<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    theflag<span class="token punctuation">.</span>append<span class="token punctuation">(</span>flags<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>solver <span class="token operator">=</span> Solver<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>theflag<span class="token punctuation">,</span> dist<span class="token punctuation">)</span><span class="token punctuation">:</span>    solver<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>solver<span class="token punctuation">.</span>check<span class="token punctuation">(</span><span class="token punctuation">)</span>model <span class="token operator">=</span> solver<span class="token punctuation">.</span>model<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>inp<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>model<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>as_long<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre><ul><li>题目前两位和第八位无法解除，题目中已经提示具体字符</li></ul><h2 id="ONIbase64"><a href="#ONIbase64" class="headerlink" title="ONIbase64"></a>ONIbase64</h2><h3 id="出题思路-3"><a href="#出题思路-3" class="headerlink" title="出题思路"></a>出题思路</h3><p>本道题主要就是考察一个ollvm平坦化。也没想到这么惨烈。</p><h3 id="解题方法-3"><a href="#解题方法-3" class="headerlink" title="解题方法"></a>解题方法</h3><ul><li><p>文件拉到最后就可以看到编译器地址，直接把它pull下来，编译.s文件得到可执行文件。</p></li><li><p>拖入IDA分析，是个标准的平坦化。</p><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20200526001331.png" alt="6" loading="lazy"></p></li><li><p>参考&lt;<a href="https://github.com/pcy190/deflat">https://github.com/pcy190/deflat</a> &gt;去除平坦化</p></li><li><p>然后直接F5写解密脚本</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> z3 <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span>table <span class="token operator">=</span> <span class="token string">'ZAnUX1W2oPNQ4sBMOd/+ChfGI5r8Hvt3uaLkbDgcyJYTipez6mxF0SEqRjVKwl97'</span>coding <span class="token operator">=</span> <span class="token string">'5auRs6a4A2lEUObG5+uoPGuWHnimZLXtvkyEHxCFoal5'</span>dist <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> BitVecVal<span class="token punctuation">(</span>table<span class="token punctuation">.</span>find<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> coding<span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token punctuation">[</span>BitVec<span class="token punctuation">(</span><span class="token string">'c%d'</span> <span class="token operator">%</span> i<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">]</span>total <span class="token operator">=</span> Concat<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token punctuation">[</span>Extract<span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span> <span class="token operator">*</span> i<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span>temps <span class="token operator">=</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">^</span> y<span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token operator">^</span> temps <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">]</span>s<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>total <span class="token operator">=</span> Concat<span class="token punctuation">(</span>s<span class="token punctuation">)</span>bits <span class="token operator">=</span> <span class="token punctuation">[</span>Extract<span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token operator">*</span> i<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">]</span>bits <span class="token operator">=</span> bits <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">^</span> y<span class="token punctuation">,</span> bits<span class="token punctuation">)</span><span class="token punctuation">]</span>tup <span class="token operator">=</span> <span class="token punctuation">[</span>bits<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>bits<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>outs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>padding <span class="token operator">=</span> BitVecVal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>tup<span class="token punctuation">)</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> Concat<span class="token punctuation">(</span>v<span class="token punctuation">)</span>    s1 <span class="token operator">=</span> Extract<span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>    s2 <span class="token operator">=</span> Extract<span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>    s3 <span class="token operator">=</span> Extract<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>    s4 <span class="token operator">=</span> Extract<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>    outs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s1<span class="token punctuation">)</span>    outs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>    outs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s3<span class="token punctuation">)</span>    outs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s4<span class="token punctuation">)</span>    <span class="token keyword">for</span> v2 <span class="token keyword">in</span> tup<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        v2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> v2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">^</span> Concat<span class="token punctuation">(</span>padding<span class="token punctuation">,</span> s1<span class="token punctuation">)</span>        v2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> Concat<span class="token punctuation">(</span>padding<span class="token punctuation">,</span> s2<span class="token punctuation">)</span>        v2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> v2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">^</span> Concat<span class="token punctuation">(</span>padding<span class="token punctuation">,</span> s3<span class="token punctuation">)</span>solve <span class="token operator">=</span> Solver<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>dist<span class="token punctuation">)</span><span class="token punctuation">:</span>    solve<span class="token punctuation">.</span>add<span class="token punctuation">(</span>outs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> v<span class="token punctuation">)</span>solve<span class="token punctuation">.</span>check<span class="token punctuation">(</span><span class="token punctuation">)</span>model <span class="token operator">=</span> solve<span class="token punctuation">.</span>model<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span>as_long<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">reversed</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ul><h2 id="easy-re-amp-easy-base"><a href="#easy-re-amp-easy-base" class="headerlink" title="easy_re&amp;easy_base"></a>easy_re&amp;easy_base</h2><h3 id="出题思路-4"><a href="#出题思路-4" class="headerlink" title="出题思路"></a>出题思路</h3><p>既然要搞花样，当然少不当今最火的iot。采用腾讯TencentOS tiny 官方定制IoT开发板EVB_LX(暂时是限量的)编译环境： <a href="https://github.com/Tencent/TencentOS-tiny">https://github.com/Tencent/TencentOS-tiny</a>两个题目，都是考察找到被替换的base64密码表，由于考虑到直接上base有点难，所以出了一个easy_re过渡。</p><p>两个题目替换都涉及四段字符如下（把初始密码表拆分为四段）：</p><blockquote><p>“ABCDEFGHIJKLMNOPQRSTUVWXYZ”<br>“abcdefghijklmnopqrstuvwxyz”<br>“0123456789”<br>“+&#x2F;“</p></blockquote><p>easy_re是改变了这四段字符压栈顺序。没想到ida太过于智能化，显示结果即是正确压栈顺序。</p><p>easy_base考察偏难了，主要是对这四段字符进行了一些变换，如果逆向分析的话需要学习risc-v指令集。</p><p>当然，这两个题最简单的方法是把程序放入对应开发板里，他相应的串口也会输出字母表。</p><p>做题过程中也发现一些选手拿到题目直接猜测arm架构，拿着ida 当arm分析，还原的内容是错的，无从下手。如果拿到文件后File一下也会知道是risc-v架构。不至于走偏。</p><h3 id="解题方法-4"><a href="#解题方法-4" class="headerlink" title="解题方法"></a>解题方法</h3><ul><li><p>首先，ida默认不支持risc-v，所以需要下载相关插件。<a href="https://github.com/lcq2/riscv-ida">https://github.com/lcq2/riscv-ida</a></p></li><li><p>然后，ida打开分析，直接就有正确的字母表压栈顺序，（原本是想让选手分析简单指令来确定或者爆破）</p><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20200526001332.png" alt="4" loading="lazy"></p></li><li><p>得到 字母表就很容易解出来了</p></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64str1 <span class="token operator">=</span> <span class="token string">"PalXPrhnOrLZT6PVQJ1oNr9dSqDVTbo=="</span>string1 <span class="token operator">=</span><span class="token string">"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ+/abcdefghijklmnopqrstuvwxyz"</span>string2 <span class="token operator">=</span><span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>str1<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>string1<span class="token punctuation">,</span> string2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li><p>easy_base 的话就需要分析指令得出具体操作或者直接开发板跑一下得到输出</p></li><li><p>看到大多数人解题无果，比赛最后放出了一个risc-v 64位的附件（代码一样），通过docker跑即可得到table。</p><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20200526001333.jpg" alt="5" loading="lazy"></p></li><li><p>然后直接解密得到flag</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64str1 <span class="token operator">=</span> <span class="token string">"UoH+U/DJV/YlQdUOU94JPYxJgdHMUWK="</span>string1 <span class="token operator">=</span><span class="token string">"a0b1c2d3e4f5g6h7i8j9ZYXWVUTSRQPON+klmnopqrABCDEFGHIJKLM/stuvwxyz"</span>string2 <span class="token operator">=</span><span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>str1<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>string1<span class="token punctuation">,</span> string2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>如果对题目感兴趣的，可以之后再研究。我附上题目主文件源代码</p></li></ul><pre class="language-C" data-language="C"><code class="language-C">#include &quot;mcu_init.h&quot;#include &quot;tos_k.h&quot;#define TASK_SIZE 1024k_task_t k_task_task1;k_task_t k_task_task2;uint8_t k_task1_stk[TASK_SIZE];uint8_t k_task2_stk[TASK_SIZE];int share &#x3D; 0xCBA7F9;k_sem_t sem;unsigned char *scuctf_flag_base64&#x3D;&quot;UoH+U&#x2F;DJV&#x2F;YlQdUOU94JPYxJgdHMUWK&#x3D;&quot;;unsigned char base64_right[65]&#x3D;&quot;&quot;;void scuctf_base64(void)&#123;unsigned char base64_1[26]&#x3D;&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;unsigned char base64_2[26]&#x3D;&quot;abcdefghijklmnopqrstuvwxyz&quot;;unsigned char base64_3[10]&#x3D;&quot;0123456789&quot;;unsigned char base64_4[2]&#x3D;&quot;+&#x2F;&quot;;int i&#x3D;0,j&#x3D;0,k&#x3D;0,q&#x3D;25,r&#x3D;10,n&#x3D;0;for(i&#x3D;0;i&lt;20;)&#123;base64_right[i]&#x3D;base64_2[j];j++;base64_right[i+1]&#x3D;base64_3[k];k++;i+&#x3D;2;&#125;for(i&#x3D;20;i&lt;33;i++)&#123;base64_right[i]&#x3D;base64_1[q];q--;&#125;for(i&#x3D;33;i&lt;42;i++)&#123;if(i&#x3D;&#x3D;33)&#123;base64_right[33]&#x3D;base64_4[0];&#125;else&#123;base64_right[i]&#x3D;base64_2[r];r++;&#125;&#125;for(i&#x3D;42;i&lt;64;i++)&#123;if(n&lt;13)&#123;base64_right[i]&#x3D;base64_1[n];n++;&#125;else&#123;if(i&#x3D;&#x3D;55)&#123;base64_right[i]&#x3D;base64_4[1];&#125;else&#123;base64_right[i]&#x3D;base64_2[r];r++;&#125;&#125;&#125;&#125;void task1(void *pdata)&#123;    int task_cnt1 &#x3D; 0;    while (1) &#123;        printf(&quot;welcome scuctf from %s cnt: %d\n&quot;, __func__, task_cnt1++);        tos_sem_pend(&amp;sem, ~0U);        gpio_bit_write(GPIOA, GPIO_PIN_7, share % 2);    &#125;&#125;void task2(void *pdata)&#123;    int task_cnt2 &#x3D; 0;    scuctf_base64();    while (1) &#123;        share++;        for(int i&#x3D;0; i&lt;5; i++) &#123;            printf(&quot;Where is scuctf_base64? %s cnt: %08x\n%s&quot;, __func__, task_cnt2--,base64_right);            tos_task_delay(50);        &#125;        tos_sem_post(&amp;sem);    &#125;&#125;void main(void) &#123;    board_init();    usart0_init(115200);    tos_knl_init();    tos_task_create(&amp;k_task_task1, &quot;task1&quot;, task1, NULL, 3, k_task1_stk, TASK_SIZE, 0);    tos_task_create(&amp;k_task_task2, &quot;task2&quot;, task2, NULL, 3, k_task2_stk, TASK_SIZE, 0);    k_err_t err &#x3D; tos_sem_create(&amp;sem, 1);    if (err !&#x3D; K_ERR_NONE) &#123;        goto die;    &#125;    tos_knl_start();die:    while (1) &#123;        asm(&quot;wfi;&quot;);    &#125;&#125;int _put_char(int ch)&#123;    usart_data_transmit(USART0, (uint8_t) ch );    while (usart_flag_get(USART0, USART_FLAG_TBE)&#x3D;&#x3D; RESET)&#123;    &#125;    return ch;&#125;</code></pre><ul><li>参考<a href="https://github.com/riscv/riscv-isa-manual/releases">https://github.com/riscv/riscv-isa-manual/releases</a></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>由于是普通校赛，题目也没出过分难，个人感觉难以把握还算可以。这次题目主要也本着打破传统scuctf 常规题目，一丢丢小小的创新。 .NET，risc-v，ollvm，apk，python等。即使这些可能在全国ctf中是常见题目，但是感觉校内还是几乎没出的。比赛过程中也发生了很多趣味东西，比如第一题一题多解，flag设置时候多加了空格导致选手提交报错等好多问题。</p><p>总之希望scuctf越来越有趣，参与人数越来越多吧！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github+zeit Blog</title>
      <link href="2020/05/08/hexo-github-zeit-Blog/"/>
      <url>2020/05/08/hexo-github-zeit-Blog/</url>
      
        <content type="html"><![CDATA[<blockquote><p>年轻爱折腾，从wordpress—&gt;typecho—&gt;hexo，追求越来越轻量。</p><p>网站托管于zeit+github，(zeit真香，速度相对快一些)</p></blockquote><span id="more"></span><h2 id="hexo搭建"><a href="#hexo搭建" class="headerlink" title="hexo搭建"></a>hexo搭建</h2><h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><pre class="language-none"><code class="language-none">sudo apt-get install git</code></pre><h4 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h4><pre class="language-none"><code class="language-none">sudo apt-get install nodejssudo apt-get install npm</code></pre><h4 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h4><pre class="language-none"><code class="language-none">npm install -g hexo-cli</code></pre><p>初始化hexo </p><p>blog是文件名</p><pre class="language-none"><code class="language-none">hexo init blog</code></pre><p>进入blog文件</p><pre class="language-none"><code class="language-none">npm install</code></pre><p>直接通过下面命令本地查看效果</p><pre class="language-none"><code class="language-none">hexo ghexo server</code></pre><h4 id="github"><a href="#github" class="headerlink" title="github"></a>github</h4><p>github 新建公开仓库 </p><p>githubname.github.io</p><h4 id="生成ssh添加到github"><a href="#生成ssh添加到github" class="headerlink" title="生成ssh添加到github"></a>生成ssh添加到github</h4><pre class="language-none"><code class="language-none">git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot;##检查git config user.namegit config user.emailssh-keygen -t rsa -C &quot;youremail&quot;</code></pre><p>生成.ssh 文件</p><p>id_rsa.pub复制到github—&gt;setting—&gt;SSH keys</p><p>下面命令检查成功与否</p><pre class="language-none"><code class="language-none">ssh -T git@github.com</code></pre><h4 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h4><p>_config.yml文件打开，最下面修改</p><pre class="language-none"><code class="language-none"># Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.htmldeploy:  type: git  repository: git@github.com:githubname&#x2F;githubname.github.io.git  branch: master</code></pre><p>安装deploy-git</p><pre class="language-none"><code class="language-none">npm install hexo-deployer-git --save</code></pre><pre class="language-none"><code class="language-none"># 清除生成hexo clean#生成静态文件hexo g#部署到githubhexo d</code></pre><h3 id="添加站点地图"><a href="#添加站点地图" class="headerlink" title="添加站点地图"></a>添加站点地图</h3><pre class="language-none"><code class="language-none">npm install hexo-generator-sitemap --save #sitemap.xml googlenpm install hexo-generator-baidu-sitemap --save #baidusitemap.xml百度</code></pre><p>在<code>themes\next\layout\_partials\head.swing</code>中添加百度站长验证代码</p><p>谷歌在<a href="https://search.google.com/search-console">https://search.google.com/search-console</a> 添加站点信息</p><p>_config.yml 添加</p><pre class="language-none"><code class="language-none">sitemap:path: sitemap.xmlbaidusitemap:path: baidusitemap.xml</code></pre><h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><pre class="language-none"><code class="language-none">npm install hexo-generator-feed###_config.ymlplugins: hexo-generator-feed#Feed Atomfeed:    type: atom    path: atom.xml    limit: 20</code></pre><h2 id="zeit托管"><a href="#zeit托管" class="headerlink" title="zeit托管"></a>zeit托管</h2><blockquote><p>为什么用zeit?</p><p>github国内访问相对较慢，所以直接托管到了zeit上面。</p></blockquote><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>通过<a href="https://zeit.co/login">ZEIT</a>使用github登陆</p><h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><p>Import Project 导入github博客仓库。</p><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>接着全部默认即可。</p><p>最后生成一个xxx.now.sh域名</p><h3 id="域名修改"><a href="#域名修改" class="headerlink" title="域名修改"></a>域名修改</h3><p>cname 添加记录绑定自己域名</p><p>详细介绍可以参考<a href="https://vercel.com/docs">帮助文档</a></p><h2 id="valine"><a href="#valine" class="headerlink" title="valine"></a>valine</h2><ul><li>注册<a href="https://leancloud.cn/">LeanCloud</a></li><li>创建新应用</li><li>设置 应用key 查看APP ID APP KEY</li><li>安全中心添加博客域名</li><li>修改主题的配置文件添加id 和 key</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github图床搭建(picgo+typora)</title>
      <link href="2020/05/07/github-picgo-typora/"/>
      <url>2020/05/07/github-picgo-typora/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最开始，博客的图床是随便在百度找的，后来发现一些小图床平台不稳。<br>换了七牛云，用来用去。还是觉得github免费香。</p></blockquote><span id="more"></span><h2 id="github仓库搭建"><a href="#github仓库搭建" class="headerlink" title="github仓库搭建"></a>github仓库搭建</h2><ul><li>直接在gihub新建一个仓库，但特别注意是公开仓库。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20200503215527.png" alt="仓库" loading="lazy"></p><ul><li><p>然后在github个人设置生成token，记得保存token</p><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20200503215528.png" alt="token" loading="lazy"></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20200503215529.png" alt="xxx" loading="lazy"></p><h2 id="picgo"><a href="#picgo" class="headerlink" title="picgo"></a>picgo</h2><ul><li><p>picgo直接到<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a>下载安装</p></li><li><p>接着到图床设置—&gt;github图床设置。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20200503173826.png" alt="sz" loading="lazy"></p><blockquote><ul><li>仓库名为ID&#x2F;仓库名</li><li>分支默认master(github现在默认分支可能为main)</li><li>token之前申请的</li><li>路径可以自己设置</li><li><strong>自定域名可以使用jsdelivr加速，设置方法<a href="https://cdn.jsdelivr.net/gh+%E7%94%A8%E6%88%B7id+%E4%BB%93%E5%BA%93%E5%90%8D">https://cdn.jsdelivr.net/gh+用户id+仓库名</a></strong></li></ul></blockquote><h2 id="typora设置"><a href="#typora设置" class="headerlink" title="typora设置"></a>typora设置</h2><ul><li>文件—&gt;偏好设—&gt;图像</li></ul><p><img src="https://cdn.jsdelivr.net/gh/loveminhal/myblog-picgo/blog/20200503174300.png" alt="设置" loading="lazy"></p><ul><li>上传服务器设定，PicGo(app)</li><li>PicGo路径设置为自己的picgo软件路径。</li><li>设置完成验证图片上传是否可以成功</li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul><li><p>这个方法使用后，可能导致你的github工作日志一片绿。(经常上传图片)</p></li><li><p>可能还有一个问题，这个属不属于github仓库滥用呢。v2ex有朋友询问了官方。贴上官方回信。</p></li></ul><blockquote><p>Hi Haoxun Zhan,</p><p>Thanks for your question! We’ve reviewed your project and, in addition to uploading files, it appears to assist in generating rawgit URLs. Is that correct?</p><p>If that’s the case, your project doesn’t appear to violate GitHub’s Terms of Service, though you may want to check in with the owner of rawgit if you haven’t already done so.</p><p>Of course, any individual who decided to use your code would be responsible for making sure their usage and content didn’t violate our Terms.</p><p>Please let me know if you have any other questions.</p><p>Best,<br>Elizabeth</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello word</title>
      <link href="2020/05/07/hello%20word/"/>
      <url>2020/05/07/hello%20word/</url>
      
        <content type="html"><![CDATA[<blockquote><p>博客再次迁移！</p></blockquote><span id="more"></span>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
